#### 泛癌分析,一致聚类 2019/4/19
#################################
# 一致聚类 Consensus Clustering #
#################################
## 排秩一致聚类
setwd("/pub6/siyu/3-co-consensus/order")
library(ConsensusClusterPlus)
# 排秩数据
imm <- read.table("/pub6/siyu/two-character-data/TIMER.txt",sep = "\t",header = T,row.names = 1)
imm$B_cell <- apply(imm,1,function(x){ifelse(x[1] > x[2],1,0)})
imm$CD8_Tcell <- apply(imm,1,function(x){ifelse(x[1] == 0,1,0)})

cancerimm <- imm

# 1.处理cancerimm的异常值
#me <- apply(cancerimm,1,mean) # 距离中值
#sp <- boxplot(me)
#cancerimm <- cancerimm[names(me[me < (sp$stats[4] + (sp$stats[4]-sp$stats[2])*3) & 
#                                  me > (sp$stats[2] - (sp$stats[4]-sp$stats[2])*3)]),] # 去除异常值：将个体是距离底线或顶线的距离超过3倍的箱体高度视为离群值。
# 标准化：num - 每一列的绝对中位数
cancerimm <- t(cancerimm)
#mads <- apply(cancerimm,2,mad)
cancerimm <- sweep(cancerimm,2, apply(cancerimm,2,median,na.rm=T))

# 2.一致性聚类
for(clu in c("pam","km","kmdist","hc")){
  for(dis in c("manhattan","pearson","spearman","euclidean","binary","maximum","canberra","minkowski")){
    tryCatch({
      results <- ConsensusClusterPlus(cancerimm,maxK = 10,reps = 100,pItem = 0.8,pFeature = 1,title = paste0(clu,"-",dis),
                                      clusterAlg = clu,distance = dis,seed = 1262118388.71279,
                                      plot = "png",writeTable = TRUE)
      icl <- calcICL(results,title = paste0(clu,"-",dis),plot = "png",writeTable = TRUE)
    },
    error = function(e){cat("ERROR :",clu," ",dis," ",conditionMessage(e),"\n")}) 
  }
}

## 均值一致聚类
setwd("/pub6/siyu/3-co-consensus/avg")
library(ConsensusClusterPlus)
# 均值数据
timer <- read.table("/pub6/siyu/two-character-data/TIMER.txt",sep = "\t",header = T,row.names = 1)
epic <- read.table("/pub6/siyu/two-character-data/EPIC.txt",sep = "\t",header = T,row.names = 1)
mcp <- read.table("/pub6/siyu/two-character-data/MCP.txt",sep = "\t",header = T,row.names = 1)

# 标准化
timer <- scale(timer)
epic <- scale(epic)
mcp <- scale(mcp)
imm <- cbind(timer,epic,mcp)
B_cell <- apply(imm[,c(1,3,5)],1,mean)
CD8_Tcell <- apply(imm[,c(2,4,6)],1,mean)
imm <- data.frame(B_cell,CD8_Tcell)

cancerimm <- t(imm)

# 1.处理cancerimm的异常值
#me <- apply(cancerimm,1,mean) # 距离中值
#sp <- boxplot(me)
#cancerimm <- cancerimm[names(me[me < (sp$stats[4] + (sp$stats[4]-sp$stats[2])*3) & 
#                                  me > (sp$stats[2] - (sp$stats[4]-sp$stats[2])*3)]),] # 去除异常值：将个体是距离底线或顶线的距离超过3倍的箱体高度视为离群值。
# 标准化：num - 每一列的绝对中位数
#cancerimm <- t(cancerimm)
#mads <- apply(cancerimm,2,mad)
#cancerimm <- sweep(cancerimm,2, apply(cancerimm,2,median,na.rm=T))

# 2.一致性聚类
for(clu in c("pam")){
  for(dis in c("euclidean","binary","maximum","canberra","minkowski")){
    tryCatch({
      results <- ConsensusClusterPlus(cancerimm,maxK = 10,reps = 100,pItem = 0.8,pFeature = 1,title = paste0(clu,"-",dis),
                                      clusterAlg = clu,distance = dis,seed = 1262118388.71279,
                                      plot = "png",writeTable = TRUE)
      icl <- calcICL(results,title = paste0(clu,"-",dis),plot = "png",writeTable = TRUE)
    },
    error = function(e){cat("ERROR :",clu," ",dis," ",conditionMessage(e),"\n")}) 
  }
}

for(clu in c("km","kmdist","hc")){
  for(dis in c("manhattan","pearson","spearman","euclidean","binary","maximum","canberra","minkowski")){
    tryCatch({
      results <- ConsensusClusterPlus(cancerimm,maxK = 10,reps = 100,pItem = 0.8,pFeature = 1,title = paste0(clu,"-",dis),
                                      clusterAlg = clu,distance = dis,seed = 1262118388.71279,
                                      plot = "png",writeTable = TRUE)
      icl <- calcICL(results,title = paste0(clu,"-",dis),plot = "png",writeTable = TRUE)
    },
    error = function(e){cat("ERROR :",clu," ",dis," ",conditionMessage(e),"\n")}) 
  }
}



## 全部细胞一致聚类
setwd("/pub6/siyu/3-co-consensus/all")
library(ConsensusClusterPlus)
# 均值数据
timer <- read.table("data/immuneEstimation.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
epic <- read.table("EPIC/data/EPIC.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
mcp <- read.table("MCP/data/MCP.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
rownames(timer) <- gsub("-01$","",rownames(timer))
co_sample <- intersect(rownames(timer),intersect(rownames(epic),rownames(mcp)))
imm <- cbind(timer[co_sample,],epic[co_sample,],mcp[co_sample,])

# 标准化
imm <- scale(imm)

B_cell <- apply(imm[,grep("B",colnames(imm))],1,mean)
imm <- imm[,-grep("B",colnames(imm))]

CD8_Tcell <- apply(imm[,grep("CD8",colnames(imm))],1,mean)
imm <- imm[,-grep("CD8",colnames(imm))]

Endothelial <- apply(imm[,grep("Endothelial",colnames(imm))],1,mean)
imm <- imm[,-grep("Endothelial",colnames(imm))]

Macrophage <- apply(imm[,grep("Macrophage",colnames(imm))],1,mean)
imm <- imm[,-grep("Macrophage",colnames(imm))]

NK_cell <- apply(imm[,grep("NK",colnames(imm))],1,mean)
imm <- imm[,-grep("NK",colnames(imm))]

Neutrophil <- apply(imm[,grep("Neutrophil",colnames(imm))],1,mean)
imm <- imm[,-grep("Neutrophil",colnames(imm))]

CD4_Tcell <- apply(imm[,grep("CD4",colnames(imm))],1,mean)
imm <- imm[,-grep("CD4",colnames(imm))]

imm1 <- data.frame(B_cell,CD8_Tcell,Endothelial,Macrophage,NK_cell,Neutrophil,CD4_Tcell)
imm <- cbind(imm1,imm)

cancerimm <- t(imm)

# 1.处理cancerimm的异常值
#me <- apply(cancerimm,1,mean) # 距离中值
#sp <- boxplot(me)
#cancerimm <- cancerimm[names(me[me < (sp$stats[4] + (sp$stats[4]-sp$stats[2])*3) & 
#                                  me > (sp$stats[2] - (sp$stats[4]-sp$stats[2])*3)]),] # 去除异常值：将个体是距离底线或顶线的距离超过3倍的箱体高度视为离群值。
# 标准化：num - 每一列的绝对中位数
#cancerimm <- t(cancerimm)
#mads <- apply(cancerimm,2,mad)
#cancerimm <- sweep(cancerimm,2, apply(cancerimm,2,median,na.rm=T))

# 2.一致性聚类
for(clu in c("pam","km","kmdist","hc")){
  for(dis in c("manhattan","pearson","spearman","euclidean","binary","maximum","canberra","minkowski")){
    tryCatch({
      results <- ConsensusClusterPlus(cancerimm,maxK = 10,reps = 100,pItem = 0.8,pFeature = 1,title = paste0(clu,"-",dis),
                                      clusterAlg = clu,distance = dis,seed = 1262118388.71279,
                                      plot = "png",writeTable = TRUE)
      icl <- calcICL(results,title = paste0(clu,"-",dis),plot = "png",writeTable = TRUE)
    },
    error = function(e){cat("ERROR :",clu," ",dis," ",conditionMessage(e),"\n")}) 
  }
}

## 将pam-manhattan 5类按照免疫浸润分类
setwd("f:/datahe/immuno/3-co-consensus/avg/")
class <- read.csv("pam-manhattan/pam-manhattan.k=5.consensusClass.csv",header = F)
class$V3[class$V2 == 1] <- 2
class$V3[class$V2 == 2] <- 1
class$V3[class$V2 == 3] <- 4
class$V3[class$V2 == 4] <- 3
class$V3[class$V2 == 5] <- 5
class <- class[,-2]
colnames(class)[2] <- "V2"
write.csv(class,"pam-manhattan/pam-manhattan.k=5.consensusClass.csv",quote = F)


## 处理一致系数
rm(list = ls())
setwd("f:/datahe/immuno/3-co-consensus/avg/")
class <- read.csv("pam-manhattan/pam-manhattan.summary.cluster.consensus.csv",header = T)
class_sub <- split(class$k,x = class)
ci <- as.data.frame(unlist(lapply(class_sub,function(x){mean(x[,3])})))
colnames(ci) <- "consensus_index"
ci$k <- rownames(ci)


pdf("plot/Cluster Consensus.pdf",width = 7,height = 7)
plot(ci$k,ci$consensus_index,type = "b",axes = F,
     main = "Cluster Consensus",xlab = "k",ylab = "Consensus Index")
axis(1,c(2,4,6,8,10))
axis(2,c(0.75,0.8,0.85,0.9,0.95,1))
dev.off()


####-- 三种方法一致性 --####
setwd("f:/datahe/immuno/")
library(ggplot2)
# 真实数据 real data,构建秩次谱
timer <- read.table("data/immuneEstimation.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
epic <- read.table("EPIC/data/EPIC.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
mcp <- read.table("MCP/data/MCP.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
rownames(timer) <- gsub("-01$","",rownames(timer))
co_sample <- intersect(rownames(timer),intersect(rownames(epic),rownames(mcp)))
timer <- timer[co_sample,c("B_cell","CD8_Tcell")]
epic <- epic[co_sample,c("Bcells","CD8_Tcells")]
mcp <- mcp[co_sample,c("B.lineage","CD8.T.cells")]
# 统一行名
colnames(epic) <- colnames(timer)
colnames(mcp) <- colnames(timer)

write.table(epic,"two-character-data/EPIC.txt",sep = "\t",col.names = T,row.names = T,quote = F)
write.table(timer,"two-character-data/TIMER.txt",sep = "\t",col.names = T,row.names = T,quote = F)
write.table(mcp,"two-character-data/MCP.txt",sep = "\t",col.names = T,row.names = T,quote = F)


# 构建秩次谱矩阵
timer$B_cell <- apply(timer,1,function(x){ifelse(x[1] > x[2],1,0)})
timer$CD8_Tcell <- apply(timer,1,function(x){ifelse(x[1] == 0,1,0)})

epic$B_cell <- apply(epic,1,function(x){ifelse(x[1] > x[2],1,0)})
epic$CD8_Tcell <- apply(epic,1,function(x){ifelse(x[1] == 0,1,0)})

mcp$B_cell <- apply(mcp,1,function(x){ifelse(x[1] > x[2],1,0)})
mcp$CD8_Tcell <- apply(mcp,1,function(x){ifelse(x[1] == 0,1,0)})

# 计算三种方法稳定(统一)的个数
real_sample <- rownames(timer)[grep("TRUE",as.data.frame(timer == epic & timer == mcp & epic == mcp)[,1])]
real_num <- length(grep("TRUE",as.data.frame(timer == epic & timer == mcp & epic == mcp)[,1]))

# 仿真数据
sim_num <- c()# 稳定的仿真数据个数
for(i in 1:1000){
  simulation_1 <- sample(c(0,1),9468,replace = T)
  simulation_2 <- sample(c(0,1),9468,replace = T)
  simulation_3 <- sample(c(0,1),9468,replace = T)
  sim_num <- c(sim_num,length(grep("TRUE",simulation_1 == simulation_2 & simulation_1 == simulation_3 & simulation_2 == simulation_3)))
}
max(sort(sim_num))
p <- ggplot()
p + geom_point(aes(x = 1:1001,y = sort(c(sim_num,real_num)))) +
  scale_fill_gradient(low = "#FFFDE4",high = "#005AA7") +
  #labs(title = paste(dir,i)) +
  theme(#legend.position = "top",
    #legend.position = "none",
    legend.background=element_blank(),
    axis.text.x=element_text(size=10),
    axis.text.y = element_text(size = 8),
    axis.line = element_blank(),
    #axis.line.y = element_line(size = 0.5, colour = "black"),
    strip.background = element_blank(),
    panel.background = element_blank(),
    panel.border = element_blank(),
    panel.grid = element_blank())
#ggsave(paste0("plot/",dir,".",i,".pdf"),width = 10,height = 10)


library(plotrix)
plot(sort(c(sim_num,real_num)),pch = 20)
from <- 2600;to <- 4600
pdf("三种方法真实数据与仿真数据比较.pdf",width = 10, heigh = 10)
gap.plot(sort(c(sim_num,real_num)),gap=c(from,to),pch = 20,main='gap plot')
axis.break(2,from,breakcol='snow',style='gap')
axis.break(2,from,breakcol='black',style='slash')
axis.break(4,from,breakcol='black',style='slash')
axis(2,at=from)
axis(2,at=real_num)
abline(v = 1001*0.05,col = "red",lty = 2)
abline(v = 1001-1001*0.05,col = "red",lty = 2)
#points(x=1001,y = real_num,colors = "red")
dev.off()


# 对真实稳定的数据样本进行一致聚类
setwd("f:/datahe/immuno/")
timer <- read.table("data/immuneEstimation.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
epic <- read.table("EPIC/data/EPIC.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
mcp <- read.table("MCP/data/MCP.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
rownames(timer) <- gsub("-01$","",rownames(timer))
timer <- timer[real_sample,c("B_cell","CD8_Tcell")]
epic <- epic[real_sample,c("Bcells","CD8_Tcells")]
mcp <- mcp[real_sample,c("B.lineage","CD8.T.cells")]
# 统一行名
colnames(epic) <- colnames(timer)
colnames(mcp) <- colnames(timer)

####-- 比较timer & EPIC --####
setwd("f:/datahe/immuno/")
library(ggplot2)
# 真实数据 real data,构建秩次谱
timer <- read.table("data/immuneEstimation.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
epic <- read.table("EPIC/data/EPIC.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
#mcp <- read.table("MCP/data/MCP.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
rownames(timer) <- gsub("-01$","",rownames(timer))
#co_sample <- intersect(rownames(timer),intersect(rownames(epic),rownames(mcp)))
co_sample <- intersect(rownames(timer),rownames(epic))
timer <- timer[co_sample,c("B_cell","CD8_Tcell","CD4_Tcell","Neutrophil","Macrophage")]
epic <- epic[co_sample,c("Bcells","CD8_Tcells","CD4_Tcells","Endothelial","NKcells","Macrophages")]
#mcp <- mcp[co_sample,c("B.lineage","CD8.T.cells","Endothelial.cells","NK.cells","Neutrophils")]
# 统一行名
colnames(epic)[c(1,2,3,6)] <- colnames(timer)[c(1,2,3,5)]
#colnames(mcp)[c(1:4)] <- colnames(epic)[c(1:4)]
#colnames(mcp)[5] <- colnames(epic)[5]



# 构建秩次谱矩阵
timer1 <- timer[,c(1,2,3,5)]
epic1 <- epic[,c(1,2,3,6)]

#timer1$B_cell <- apply(timer[,c(1,2,4)],1,function(x){ifelse(x[1] == max(x),3,ifelse(x[1] == min(x),1,2))})
#timer1$CD8_Tcell <- apply(timer[,c(1,2,4)],1,function(x){ifelse(x[2] == max(x),3,ifelse(x[2] == min(x),1,2))})
#timer1$Macrophage <- apply(timer[,c(1,2,4)],1,function(x){ifelse(x[3] == max(x),3,ifelse(x[3] == min(x),1,2))})

#epic1$B_cell <- apply(epic[,c(1,2,5)],1,function(x){ifelse(x[1] == max(x),3,ifelse(x[1] == min(x),1,2))})
#epic1$CD8_Tcell <- apply(epic[,c(1,2,5)],1,function(x){ifelse(x[2] == max(x),3,ifelse(x[2] == min(x),1,2))})
#epic1$Macrophage <- apply(epic[,c(1,2,5)],1,function(x){ifelse(x[3] == max(x),3,ifelse(x[3] == min(x),1,2))})

timer1 <- as.data.frame(t(apply(timer1,1,order)))## 注意排序

epic1 <- as.data.frame(t(apply(epic1,1,order)))## 注意排序

#mcp$B_cell <- apply(mcp,1,function(x){ifelse(x[1] > x[2],1,0)})
#mcp$CD8_Tcell <- apply(mcp,1,function(x){ifelse(x[1] == 0,1,0)})

# 计算三种方法稳定(统一)的个数
real_sample <- rownames(timer)[grep("TRUE",apply(as.data.frame(timer1 == epic1),1,all))]
real_num <- length(grep("TRUE",apply(as.data.frame(timer1 == epic1),1,all)))

# 仿真数据
sim_num <- c()# 稳定的仿真数据个数
for(i in 1:1000){
  simulation_1 <- data.frame()
  simulation_2 <- data.frame()
  for(j in 1:9532){
    simulation_1 <- rbind(simulation_1,sample(c(1,2,3,4)))
    simulation_2 <- rbind(simulation_2,sample(c(1,2,3,4)))
  }
  sim_num <- c(sim_num,length(grep("TRUE",apply(as.data.frame(simulation_1 == simulation_2),1,all))))
}
max(sort(sim_num))


sim <- data.frame(TIMER_EPIC_MCP = sort(c(sim_num3,4667)),TIMER_EPIC = sort(c(sim_num1,859)),EPIC_MCP = sort(c(sim_num1,3298)),TIMER_MCP = sort(c(sim_num2,1818)))
sim <- rbind(data.frame(method = "TIMER_EPIC_MCP",index = 1:1001,value = sort(c(sim_num3,4667))),
             data.frame(method = "TIMER_EPIC",index = 1:1001,value = sort(c(sim_num1,859) + 8)),
             data.frame(method = "EPIC_MCP",index = 1:1001,value = sort(c(sim_num1,3298))),
             data.frame(method = "TIMER_MCP",index = 1:1001,value = sort(c(sim_num2,1818))))


p <- ggplot(data = sim,aes(x = index,y = value,color = method))
p + geom_point() +
  scale_color_manual(values = c("#9f609c","#ea8f79","#e4d183","#a0c1b8")) +
  #labs(title = paste(dir,i)) +
  theme(#legend.position = "top",
    #legend.position = "none",
    legend.background=element_blank(),
    axis.text.x=element_text(size=10),
    axis.text.y = element_text(size = 8),
    axis.line = element_blank(),
    #axis.line.y = element_line(size = 0.5, colour = "black"),
    strip.background = element_blank(),
    panel.background = element_blank(),
    panel.border = element_blank(),
    panel.grid = element_blank())
ggsave(paste0("附表/一致聚类图四合一1.pdf"),width = 10,height = 10)


library(plotrix)
plot(sort(c(sim_num,real_num)),pch = 20)
from <- 2600;to <- 4600
pdf("EPIC_TIMER方法真实数据与仿真数据比较.pdf",width = 10, heigh = 10)
gap.plot(sort(c(sim_num,real_num)),gap=c(from,to),pch = 20,main='gap plot')
axis.break(2,from,breakcol='snow',style='gap')
axis.break(2,from,breakcol='black',style='slash')
axis.break(4,from,breakcol='black',style='slash')
axis(2,at=from)
axis(2,at=real_num)
abline(v = 1001*0.05,col = "red",lty = 2)
abline(v = 1001-1001*0.05,col = "red",lty = 2)
#points(x=1001,y = real_num,colors = "red")
dev.off()



####-- 比较MCP & EPIC --####
setwd("f:/datahe/immuno/")
library(ggplot2)
# 真实数据 real data,构建秩次谱
timer <- read.table("data/immuneEstimation.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
epic <- read.table("EPIC/data/EPIC.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
mcp <- read.table("MCP/data/MCP.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
rownames(timer) <- gsub("-01$","",rownames(timer))
#co_sample <- intersect(rownames(timer),intersect(rownames(epic),rownames(mcp)))
co_sample <- intersect(rownames(epic),rownames(mcp))
timer <- timer[co_sample,c("B_cell","CD8_Tcell","Neutrophil","Macrophage")]
epic <- epic[co_sample,c("Bcells","CD8_Tcells","Endothelial","NKcells","Macrophages")]
mcp <- mcp[co_sample,c("B.lineage","CD8.T.cells","Endothelial.cells","NK.cells","Neutrophils")]
# 统一行名
colnames(epic)[c(1,2,5)] <- colnames(timer)[c(1,2,4)]
colnames(mcp)[c(1:4)] <- colnames(epic)[c(1:4)]
colnames(mcp)[5] <- colnames(timer)[3]

# 构建秩次谱矩阵
epic1 <- epic[,1:4]
mcp1 <- mcp[,1:4]

#timer1$B_cell <- apply(timer[,c(1,2,3)],1,function(x){ifelse(x[1] == max(x),3,ifelse(x[1] == min(x),1,2))})
#timer1$CD8_Tcell <- apply(timer[,c(1,2,3)],1,function(x){ifelse(x[2] == max(x),3,ifelse(x[2] == min(x),1,2))})
#timer1$Neutrophil <- apply(timer[,c(1,2,3)],1,function(x){ifelse(x[3] == max(x),3,ifelse(x[3] == min(x),1,2))})

epic1 <- as.data.frame(t(apply(epic[,1:4],1,order)))## 注意排序
#colnames(epic1) <- colnames(epic)[1:4]

mcp1$B_cell <- apply(mcp[,1:4],1,function(x){grep(x[1],sort(x))})
mcp1$CD8_Tcell <- apply(mcp[,1:4],1,function(x){grep(x[2],sort(x))})
mcp1$Endothelial <- apply(mcp[,1:4],1,function(x){grep(x[3],sort(x))})
mcp1$NKcells <- apply(mcp[,1:4],1,function(x){grep(x[4],sort(x))})
mcp1 <- as.data.frame(t(apply(mcp[,1:4],1,order)))

# 计算三种方法稳定(统一)的个数
real_sample <- rownames(epic1)[grep("TRUE",apply(as.data.frame(epic1 == mcp1),1,all))]
real_num <- length(grep("TRUE",apply(as.data.frame(epic1 == mcp1),1,all)))

# 仿真数据
sim_num <- c()# 稳定的仿真数据个数
for(i in 1:1000){
  simulation_1 <- data.frame()
  simulation_2 <- data.frame()
  for(j in 1:9532){
    simulation_1 <- rbind(simulation_1,sample(c(1,2,3,4)))
    simulation_2 <- rbind(simulation_2,sample(c(1,2,3,4)))
  }
  sim_num <- c(sim_num,length(grep("TRUE",apply(as.data.frame(simulation_1 == simulation_2),1,all))))
}
max(sort(sim_num))



library(plotrix)
plot(sort(c(sim_num,real_num)),pch = 20)
from <- 480;to <- 3200
pdf("EPIC_MCP方法真实数据与仿真数据比较.pdf",width = 10, heigh = 10)
gap.plot(sort(c(sim_num,real_num)),gap=c(from,to),pch = 20,main='gap plot')
axis.break(2,from,breakcol='snow',style='gap')
axis.break(2,from,breakcol='black',style='slash')
axis.break(4,from,breakcol='black',style='slash')
axis(2,at=from)
axis(2,at=real_num)
abline(v = 1001*0.05,col = "red",lty = 2)
abline(v = 1001-1001*0.05,col = "red",lty = 2)
#points(x=1001,y = real_num,colors = "red")
dev.off()




####-- 比较MCP & TIMER --####
setwd("f:/datahe/immuno/")
library(ggplot2)
# 真实数据 real data,构建秩次谱
timer <- read.table("data/immuneEstimation.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
epic <- read.table("EPIC/data/EPIC.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
mcp <- read.table("MCP/data/MCP.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
rownames(timer) <- gsub("-01$","",rownames(timer))
#co_sample <- intersect(rownames(timer),intersect(rownames(epic),rownames(mcp)))
co_sample <- intersect(rownames(timer),rownames(mcp))
timer <- timer[co_sample,c("B_cell","CD8_Tcell","Neutrophil","Macrophage")]
epic <- epic[co_sample,c("Bcells","CD8_Tcells","Endothelial","NKcells","Macrophages")]
mcp <- mcp[co_sample,c("B.lineage","CD8.T.cells","Endothelial.cells","NK.cells","Neutrophils")]
# 统一行名
colnames(epic)[c(1,2,5)] <- colnames(timer)[c(1,2,4)]
colnames(mcp)[c(1:4)] <- colnames(epic)[c(1:4)]
colnames(mcp)[5] <- colnames(timer)[3]

# 构建秩次谱矩阵
timer1 <- timer[,c(1,2,3)]
mcp1 <- mcp[,c(1,2,5)]

timer1$B_cell <- apply(timer[,c(1,2,3)],1,function(x){ifelse(x[1] == max(x),3,ifelse(x[1] == min(x),1,2))})
timer1$CD8_Tcell <- apply(timer[,c(1,2,3)],1,function(x){ifelse(x[2] == max(x),3,ifelse(x[2] == min(x),1,2))})
timer1$Neutrophil <- apply(timer[,c(1,2,3)],1,function(x){ifelse(x[3] == max(x),3,ifelse(x[3] == min(x),1,2))})

#epic1$B_cell <- apply(epic[,c(1,2,5)],1,function(x){ifelse(x[1] == max(x),3,ifelse(x[1] == min(x),1,2))})
#epic1$CD8_Tcell <- apply(epic[,c(1,2,5)],1,function(x){ifelse(x[2] == max(x),3,ifelse(x[2] == min(x),1,2))})
#epic1$Macrophage <- apply(epic[,c(1,2,5)],1,function(x){ifelse(x[3] == max(x),3,ifelse(x[3] == min(x),1,2))})

mcp1$B_cell <- apply(mcp[,c(1,2,5)],1,function(x){ifelse(x[1] == max(x),3,ifelse(x[1] == min(x),1,2))})
mcp1$CD8_Tcell <- apply(mcp[,c(1,2,5)],1,function(x){ifelse(x[2] == max(x),3,ifelse(x[2] == min(x),1,2))})
mcp1$Neutrophil <- apply(mcp[,c(1,2,5)],1,function(x){ifelse(x[3] == max(x),3,ifelse(x[3] == min(x),1,2))})

# 计算三种方法稳定(统一)的个数
real_sample <- rownames(timer)[grep("TRUE",apply(as.data.frame(timer1 == mcp1),1,all))]
real_num <- length(grep("TRUE",apply(as.data.frame(timer1 == mcp1),1,all)))

# 仿真数据
sim_num <- c()# 稳定的仿真数据个数
for(i in 1:1000){
  simulation_1 <- data.frame()
  simulation_2 <- data.frame()
  for(j in 1:9468){
    simulation_1 <- rbind(simulation_1,sample(c(1,2,3)))
    simulation_2 <- rbind(simulation_2,sample(c(1,2,3)))
  }
  sim_num <- c(sim_num,length(grep("TRUE",apply(as.data.frame(simulation_1 == simulation_2),1,all))))
}
max(sort(sim_num))




library(plotrix)
plot(sort(c(sim_num,real_num)),pch = 20)
from <- 2600;to <- 4600
pdf("MCP_TIMER方法真实数据与仿真数据比较.pdf",width = 10, heigh = 10)
gap.plot(sort(c(sim_num,real_num)),gap=c(from,to),pch = 20,main='gap plot')
axis.break(2,from,breakcol='snow',style='gap')
axis.break(2,from,breakcol='black',style='slash')
axis.break(4,from,breakcol='black',style='slash')
axis(2,at=from)
axis(2,at=real_num)
abline(v = 1001*0.05,col = "red",lty = 2)
abline(v = 1001-1001*0.05,col = "red",lty = 2)
#points(x=1001,y = real_num,colors = "red")
dev.off()




####-- 上述密度图 --####
setwd("f:/datahe/immuno")
library(ggplot2)
library(ggpubr)
library(magrittr)
library(easyGgplot2)
load(file = "一致性三合一.RData")
sim1 <- sim[sim$index != 1001,]

p <- ggplot(sim1, aes(x = value,fill = method))
p + geom_density()


p1 <- ggdensity(sim1[sim1$method == "TIMER_EPIC_MCP",], x="value", add = "mean", rug = TRUE, color = "#0082c8", fill = "#1565C0", alpha = 0.5,size = 1,title = "TIMER_EPIC_MCP")
p2 <- ggdensity(sim1[sim1$method == "TIMER_EPIC",], x="value", add = "mean", rug = TRUE, color = "#0082c8", fill = "#1565C0", alpha = 0.5,size = 1,title = "TIMER_EPIC")
p3 <- ggdensity(sim1[sim1$method == "TIMER_MCP",], x="value", add = "mean", rug = TRUE, color = "#0082c8", fill = "#1565C0", alpha = 0.5,size = 1,title = "TIMER_MCP")
p4 <- ggdensity(sim1[sim1$method == "EPIC_MCP",], x="value", add = "mean", rug = TRUE, color = "#0082c8", fill = "#1565C0", alpha = 0.5,size = 1,title = "EPIC_MCP")


pdf("附表/The Robustness of Three Methods.pdf",width = 9,height = 10)
ggplot2.multiplot(p1, p2, p3, p4, cols=2)
#ggplot2.multiplot(p1, p2, p3, p4, p5, p6, cols=2)
dev.off()

sim1 <- sim[sim$index == "1001",]
sim1$index1 <- "1"
sim <- sim[sim$index != "1001",]
sim$index1[sim$method == "TIMER_EPIC_MCP"] <- as.character(sample(2:1001))
sim$index1[sim$method == "TIMER_EPIC"] <- as.character(sample(2:1001))
sim$index1[sim$method == "TIMER_MCP"] <- as.character(sample(2:1001))
sim$index1[sim$method == "EPIC_MCP"] <- as.character(sample(2:1001))
sim <- rbind(sim,sim1)


p <- ggplot(data = sim,aes(x = index1,y = value))
p + geom_bar(stat="identity",color = "black") +
  #scale_color_manual(values = c("#9f609c","#ea8f79","#e4d183","#a0c1b8")) +
  facet_wrap(method~.,scales = "free_y",ncol = 2) +
  #labs(title = paste(dir,i)) +
  theme(#legend.position = "top",
    #legend.position = "none",
    legend.background=element_blank(),
    axis.text.x=element_blank(),
    axis.text.y = element_text(size = 6),
    axis.line.x = element_blank(),
    axis.line.y = element_line(colour = "black"),
    strip.background = element_blank(),
    panel.background = element_blank(),
    panel.border = element_blank(),
    panel.grid = element_blank())
ggsave(paste0("附表/一致聚类图四合一1.pdf"),width = 4,height = 6)




##############
# Silhouette #
##############
library(fpc) # sil
library(cluster)
setwd("f:/datahe/immuno/3-co-consensus/avg")
imm <- read.table("f:/datahe/immuno/3-co-consensus/imm.txt",sep = "\t",header = T)
imm$V1 <- row.names(imm)
## 提取癌症样本
cancerimm <- imm[,c(1,2)]
siltable <- data.frame()
for (dir in setdiff(dir(),c("plot"))){
  pdf(paste0("plot/silhouette/",dir,"-sil.pdf"),width = 15,height = 15)
  par(mfrow = c(3,3))
  for (k in 2:10){
    tryCatch({
      class <- read.csv(paste0(dir,"/",dir,".k=",k,".consensusClass.csv"),header = F,stringsAsFactors = F)
      cancerk <- merge(imm,class)
      class <- cancerk$V2
      names(class) <- cancerk$V1
      class <- sort(class)
      cancerimm <- cancerimm[names(class),]
      ifelse(gsub("^.*-","",dir) %in% c("pearson","spearman"),
             dis <- 1 - abs(as.dist(cor(t(cancerimm),method = gsub("^.*-","",dir)))),
             dis <- dist(cancerimm,method = gsub("^.*-","",dir)))
      sil <- silhouette(class, dis)
      # Silhouette
      #pam.res <- pam(cancerimm, k)
      #sil <- silhouette(pam.res)
      plot(sil,main = "Silhouette",col = c(terrain.colors(10)[c(1,3,5,7,9)],topo.colors(10)[c(2,4,6,8,10)])[1:k])
      abline(v = mean(sil[,3]),lty = 2,col = "gray30")
      siltable <- rbind(siltable,data.frame(method = dir,
                                            group = k,
                                            silhouette = mean(sil[,3]),
                                            row.names = NULL))
    },
    error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
  }
  dev.off()
}
write.table(siltable,"plot/silhouette.txt",sep = "\t",col.names = T,row.names = F,quote = F)



#####################
# 亚型在癌症中的分布#
#####################
library(ggplot2)
library(RColorBrewer)
library(reshape2)
setwd("f:/datahe/immuno/3-co-consensus/avg")
class <- read.csv("pam-manhattan/pam-manhattan.k=5.consensusClass.csv",header = F,stringsAsFactors = F)
cancer <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",header = T,sep = "\t",stringsAsFactors = F)
cancer <- merge(cancer[,c(1,2)],class,by.x = "TCGA.Participant.Barcode",by.y = "V1")
cancer$class[cancer$V2 == 1 | cancer$V2 == 2] <- "Cold Tumors"
cancer$class[cancer$V2 == 3 | cancer$V2 == 4 | cancer$V2 == 5] <- "Hot Tumors"
cancer$V2 <- paste("Subtype",cancer$V2)
cancer <- cancer[order(cancer$TCGA.Study,cancer$V2),]

# 富集
M <- as.data.frame(table(cancer$TCGA.Study))
colnames(M) <- c("TCGA.Study","M")
cancer <- merge(cancer,M)

cancer$N <- dim(cancer)[1]

k1 <- table(cancer$TCGA.Study,cancer$V2)
k1 <- melt(k1)
colnames(k1) <- c("TCGA.Study","V2","k.V2")
cancer <- merge(cancer,k1)

n1 <- as.data.frame(table(cancer$V2))
colnames(n1) <- c("V2","n.V2")
cancer <- merge(cancer,n1)

k2 <- table(cancer$TCGA.Study,cancer$class)
k2 <- melt(k2)
colnames(k2) <- c("TCGA.Study","class","k.class")
cancer <- merge(cancer,k2)

n2 <- as.data.frame(table(cancer$class))
colnames(n2) <- c("class","n.class")
cancer <- merge(cancer,n2)

#计算
#cancer <- cancer[,-4]
#cancer <- cancer[!duplicated(cancer),]
cancer$phyper.V2 <- apply(cancer[,5:8],1,function(x){phyper(x[3],x[1],x[2]-x[1],x[4],lower.tail = FALSE)})
cancer$phyper.class <- apply(cancer[,c(5,6,9,10)],1,function(x){phyper(x[3],x[1],x[2]-x[1],x[4],lower.tail = FALSE)})


#图百分比文字
cancer$freq1 <- round(cancer$k.class/cancer$M*100,2)
cancer$freq2 <- round(cancer$k.class/cancer$n.class*100,2)

cancer <- cancer[,-4]
cancer <- cancer[!duplicated(cancer),]

cancer1 <- cancer
colnames(cancer1)[c(1,6:11)] <- c("V2","k","n","k","n","phyper","phyper")

cancer1 <- rbind(cancer1[,c(1,2,4,5,8,9,11:13)],cancer1[,c(3,2,4:7,10,12,13)])
cancer1$class[grep("Subtype",cancer1$V2)] <- "Subtypes"
cancer1$class[grep("Tumors",cancer1$V2)] <- "Cold & Hot Tumors"
cancer1$p <- ifelse(cancer1$phyper <= 0.05,"*",NA)

#第一张图
cancer1 <- cancer1[order(cancer1$V2,cancer1$freq1),]
cancer1$TCGA.Study <- factor(cancer1$TCGA.Study,levels = unique(cancer1$TCGA.Study))
cancer1 <- cancer1[!duplicated(cancer1),]


p <- ggplot(cancer1,aes(TCGA.Study,k))
p + geom_bar(aes(fill = V2),stat = "identity",position = "stack") +
  #scale_y_continuous(labels = scales::percent) +
  geom_text(aes(label = p,color = V2,y = M+15), position = position_dodge(width = 0.4),size = 8) +
  #scale_fill_manual(values = c(brewer.pal(12, "Set3"),
  #                             brewer.pal(8, "Pastel1"),
  #                             "#48d2a8","#fed000","#6082d9","#ee5b5b","#73d394","#7aac3d","#9664bd","#f39565","#3BA9D7","#2F2F4C","#E8D380","#D87A80")) +
  scale_color_manual(values = c("#015890","#DA4934","#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E")) +
  scale_fill_manual(values = c("#015890","#DA4934","#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E")) +
  #"#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80"
  facet_grid(.~ class)+
  coord_flip()  +
  theme(legend.background = element_blank(),
        #legend.position = "none",
        #axis.text.x = element_blank(),
        axis.line.x = element_blank(),
        axis.title = element_blank(),
        #axis.ticks.x = element_blank(),
        strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
ggsave("plot/癌症中的亚型1.pdf",width = 10,height = 10)

# 第二张图
cancer1 <- cancer1[order(cancer1$freq2,cancer1$TCGA.Study),]
cancer1$TCGA.Study <- factor(cancer1$TCGA.Study,levels = unique(cancer1$TCGA.Study))

p <- ggplot(cancer1,aes(V2,Freq1,group = TCGA.Study))
p + geom_bar(aes(fill = TCGA.Study),stat = "identity",position = "fill") +
  #scale_y_continuous(labels = scales::percent) +
  #geom_text(aes(label = paste0(freq,"%")), position = position_fill(vjust = 0.5)) +
  scale_fill_manual(values = c(brewer.pal(12, "Set3"),
                               brewer.pal(4, "Pastel1"),
                               brewer.pal(8, "Paired"),
                               brewer.pal(8, "Set2"))) +
                               #"#48d2a8","#fed000","#6082d9","#ee5b5b","#73d394","#7aac3d","#9664bd","#f39565","#3BA9D7","#2F2F4C","#E8D380","#D87A80")) +
  #scale_fill_manual(values = c("#48d2a8","#fed000","#6082d9","#ee5b5b","#73d394","#7aac3d","#9664bd","#f39565","#3BA9D7","#2F2F4C")[1:5]) +
  #"#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80"
  #facet_grid(class~ .,scales = "free_y")+
  coord_flip()  +
  theme(legend.background = element_blank(),
        #legend.position = "none",
        #axis.text.x = element_blank(),
        axis.line.x = element_blank(),
        axis.title = element_blank(),
        #axis.ticks.x = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())





ggsave("plot/亚型中的癌症.pdf",width = 10,height = 5)



##################
# 癌症的免疫打分 # boxplot
##################
rm (list = ls())
setwd("f:/datahe/immuno/big")
library(ggplot2)
library(reshape2)
library(gridExtra)
library(gtable)
library(plyr)
library(grid)
library(easyGgplot2)
# immuno cell
imm <- read.table("f:/datahe/immuno/data/immuneEstimation.txt",sep = "\t",header = T,row.names = 1)
imm <- imm[apply(imm,1,sum) != 0,]        # ------ 去除在6个免疫中都不表达的样本
imm  <- imm[grep("-01",rownames(imm)),]
rownames(imm) <- gsub("-..$","",rownames(imm))
cancer <- read.table("f:/datahe/immuno/data/Result2.txt",sep = "\t",header = T,stringsAsFactors = F)
# Subtype
#basal <- read.table("data/basal.txt",header = F)
#her2 <- read.table("data/her2.txt",header = F)
#luminalA <- read.table("data/luminalA.txt",header = F)
#luminalB <- read.table("data/luminalB.txt",header = F)
# immuno-Subtype
#imm[intersect(rownames(imm),basal$V1),"Subtype"] <- "basal"
#imm[intersect(rownames(imm),her2$V1),"Subtype"] <- "her2"
#imm[intersect(rownames(imm),luminalA$V1),"Subtype"] <- "luminalA"
#imm[intersect(rownames(imm),luminalB$V1),"Subtype"] <- "luminalB"
#imm <- imm[!is.na(imm$Subtype),]
#imm <- imm[rownames(cancerimm),]
#colnames(imm)[7] <- "Groups"
#imm$Groups <- factor(imm$Groups)
#levels(imm$Groups) <- 1:4
#levels(imm$Groups) <- c("1:basal","2:her2","3:luminalA","4:luminalB")
Bcell <- grobTree(rectGrob(gp=gpar(fill="red",colour = "red", alpha=0.05)))
CD4Tcell <- grobTree(rectGrob(gp=gpar(fill="orange",colour = "orange", alpha=0.05)))
CD8Tcell <- grobTree(rectGrob(gp=gpar(fill="yellow",colour = "yellow", alpha=0.05)))
Neu <- grobTree(rectGrob(gp=gpar(fill="green",colour = "green", alpha=0.05)))
Mac <- grobTree(rectGrob(gp=gpar(fill="blue",colour = "blue", alpha=0.05)))
Den <- grobTree(rectGrob(gp=gpar(fill="purple",colour = "purple", alpha=0.05)))
plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F,row.names = 1)
  immuno <- imm
  immuno[intersect(rownames(imm),rownames(class)),"Groups"] <- class[intersect(rownames(imm),rownames(class)),"V2"]
  immuno <- immuno[!is.na(immuno$Groups),]
  immuno$Groups <- factor(immuno$Groups) 
  # 表格
  excB_cell <- matrix("",nrow = i,ncol = i,dimnames = list(1:i,1:i))
  for (m in 1:(i-1)){
    if (sum(immuno$B_cell[immuno$Groups == m]) == 0){next}
    for (n in (m+1):i){
      if (sum(immuno$B_cell[immuno$Groups == n]) == 0){next}
      p.value <- wilcox.test(immuno$B_cell[immuno$Groups == m],immuno$B_cell[immuno$Groups == n])$p.value
      if (p.value < 0.05 & p.value >= 0.01){excB_cell[m,n] <- "*"}
      if (p.value < 0.01 & p.value >= 0.001){excB_cell[m,n] <- "**"}
      if (p.value < 0.001){excB_cell[m,n] <- "***"}
    }
  }
  excB_cell <- as.data.frame(excB_cell)
  excCD4_Tcell <- matrix("",nrow = i,ncol = i,dimnames = list(1:i,1:i))
  for (m in 1:(i-1)){
    if (sum(immuno$CD4_Tcell[immuno$Groups == m]) == 0){next}
    for (n in (m+1):i){
      if (sum(immuno$CD4_Tcell[immuno$Groups == n]) == 0){next}
      p.value <- wilcox.test(immuno$CD4_Tcell[immuno$Groups == m],immuno$CD4_Tcell[immuno$Groups == n])$p.value
      if (p.value < 0.05 & p.value >= 0.01){excCD4_Tcell[m,n] <- "*"}
      if (p.value < 0.01 & p.value >= 0.001){excCD4_Tcell[m,n] <- "**"}
      if (p.value < 0.001){excCD4_Tcell[m,n] <- "***"}
    }
  }
  excCD4_Tcell <- as.data.frame(excCD4_Tcell)
  excCD8_Tcell <- matrix("",nrow = i,ncol = i,dimnames = list(1:i,1:i))
  for (m in 1:(i-1)){
    if (sum(immuno$CD8_Tcell[immuno$Groups == m]) == 0){next}
    for (n in (m+1):i){
      if (sum(immuno$CD8_Tcell[immuno$Groups == n]) == 0){next}
      p.value <- wilcox.test(immuno$CD8_Tcell[immuno$Groups == m],immuno$CD8_Tcell[immuno$Groups == n])$p.value
      if (p.value < 0.05 & p.value >= 0.01){excCD8_Tcell[m,n] <- "*"}
      if (p.value < 0.01 & p.value >= 0.001){excCD8_Tcell[m,n] <- "**"}
      if (p.value < 0.001){excCD8_Tcell[m,n] <- "***"}
    }
  }
  excCD8_Tcell <- as.data.frame(excCD8_Tcell)
  excNeutrophil <- matrix("",nrow = i,ncol = i,dimnames = list(1:i,1:i))
  for (m in 1:(i-1)){
    if (sum(immuno$Neutrophil[immuno$Groups == m]) == 0){next}
    for (n in (m+1):i){
      if (sum(immuno$Neutrophil[immuno$Groups == n]) == 0){next}
      p.value <- wilcox.test(immuno$Neutrophil[immuno$Groups == m],immuno$Neutrophil[immuno$Groups == n])$p.value
      if (p.value < 0.05 & p.value >= 0.01){excNeutrophil[m,n] <- "*"}
      if (p.value < 0.01 & p.value >= 0.001){excNeutrophil[m,n] <- "**"}
      if (p.value < 0.001){excNeutrophil[m,n] <- "***"}
    }
  }
  excNeutrophil <- as.data.frame(excNeutrophil)
  excMacrophage <- matrix("",nrow = i,ncol = i,dimnames = list(1:i,1:i))
  for (m in 1:(i-1)){
    if (sum(immuno$Macrophage[immuno$Groups == m]) == 0){next}
    for (n in (m+1):i){
      if (sum(immuno$Macrophage[immuno$Groups == n]) == 0){next}
      p.value <- wilcox.test(immuno$Macrophage[immuno$Groups == m],immuno$Macrophage[immuno$Groups == n])$p.value
      if (p.value < 0.05 & p.value >= 0.01){excMacrophage[m,n] <- "*"}
      if (p.value < 0.01 & p.value >= 0.001){excMacrophage[m,n] <- "**"}
      if (p.value < 0.001){excMacrophage[m,n] <- "***"}
    }
  }
  excMacrophage <- as.data.frame(excMacrophage)
  excDendritic <- matrix("",nrow = i,ncol = i,dimnames = list(1:i,1:i))
  for (m in 1:(i-1)){
    if (sum(immuno$Dendritic[immuno$Groups == m]) == 0){next}
    for (n in (m+1):i){
      if (sum(immuno$Dendritic[immuno$Groups == n]) == 0){next}
      p.value <- wilcox.test(immuno$Dendritic[immuno$Groups == m],immuno$Dendritic[immuno$Groups == n])$p.value
      if (p.value < 0.05 & p.value >= 0.01){excDendritic[m,n] <- "*"}
      if (p.value < 0.01 & p.value >= 0.001){excDendritic[m,n] <- "**"}
      if (p.value < 0.001){excDendritic[m,n] <- "***"}
    }
  }
  excDendritic <- as.data.frame(excDendritic)
  # 整理
  immuno <- melt(immuno, id.vars = "Groups")
  immuno$cell <- immuno$variable
  levels(immuno$cell) <- 1:6
  immuno$cell <- as.numeric(as.character(immuno$cell))
  immuno$se <- immuno$Groups
  levels(immuno$se) <- 1:length(levels(immuno$se)) - median(1:length(levels(immuno$se)))
  immuno$se <- as.numeric(as.character(immuno$se))/(i+1.5)
  
  # Plot
  tt <- ttheme_minimal(base_size = 9,base_colour = "red",
                       colhead = list(fg_params = list(col = "grey50")),
                       rowhead = list(fg_params = list(col = "grey50")))
  ggplot(data = immuno,aes(x = variable,y = value)) +
    stat_boxplot(geom ='errorbar') +
    geom_boxplot(aes(fill = Groups),outlier.size=0) +
    #geom_boxplot(aes(fill = Groups),outlier.size=0,alpha = 0.8,notch = T,notchwidth = 0.8) +
    #geom_violin(aes(fill = Groups),outlier.size=0,alpha = 0.6,width=0.4) +
    #geom_point(aes(cell + se,value,colour = Groups,fill = Groups),
    #           position = position_jitter(width = 1/(i*3),height = 0),
    #           alpha=0.1,size=1.5) +
    #scale_fill_manual(values = c("#f7aa00","#235784","#40a8c4","#bcdbdf")) +
    #scale_color_manual(values = c("#f7aa00","#235784","#40a8c4","#bcdbdf")) +
    #xlab("BRCA Subtypes") +
    scale_fill_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
    scale_color_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
    xlab(paste(i,"Subtypes of",dir)) +
    scale_y_continuous(limits = c(0,max(immuno$value) +0.7)) +
    
    
    #scale_y_continuous(limits = c(0,2)) +
    #annotation_custom(Bcell,xmin = 0,xmax = 1.5) +
    #annotation_custom(CD4Tcell,xmin = 1.5,xmax = 2.5) +
    #annotation_custom(CD8Tcell,xmin = 2.5,xmax = 3.5) +
    #annotation_custom(Neu,xmin = 3.5,xmax = 4.5) +
    #annotation_custom(Mac,xmin = 4.5,xmax = 5.5) +
    #annotation_custom(Den,xmin = 5.5) +
    annotation_custom(tableGrob(excB_cell,theme = tt),xmin = 1,xmax = 1,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
    annotation_custom(tableGrob(excCD4_Tcell,theme = tt),xmin = 2,xmax = 2,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
    annotation_custom(tableGrob(excCD8_Tcell,theme = tt),xmin = 3,xmax = 3,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
    annotation_custom(tableGrob(excNeutrophil,theme = tt),xmin = 4,xmax = 4,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
    annotation_custom(tableGrob(excMacrophage,theme = tt),xmin = 5,xmax = 5,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
    annotation_custom(tableGrob(excDendritic,theme = tt),xmin = 6,xmax = 6,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  #ggsave("f:/datahe/immuno/BRCA-threefold.pdf",width = 10,height = 10)
  
}


for (dir in setdiff(dir(),c(dir(pattern = ".pdf"),"plot"))){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    pdf(paste0("plot/boxplot/",dir,"-boxplot.pdf"),width = 18,height = 15)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}


#### -- 两个特征的timer -- ####
rm (list = ls())
setwd("f:/datahe/immuno/3-co-consensus/avg")
#imm <- read.table("f:/datahe/immuno/3-co-consensus/imm.txt",sep = "\t",header = T)
library(ggplot2)
library(reshape2)
library(gridExtra)
library(gtable)
library(plyr)
library(grid)
library(easyGgplot2)
# immuno cell
imm <- read.table("f:/datahe/immuno/data/immuneEstimation.txt",sep = "\t",header = T,row.names = 1)
imm <- imm[apply(imm,1,sum) != 0,]        # ------ 去除在6个免疫中都不表达的样本
imm  <- imm[grep("-01",rownames(imm)),]
rownames(imm) <- gsub("-..$","",rownames(imm))

plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F,row.names = 1)
  immuno <- imm
  immuno[intersect(rownames(imm),rownames(class)),"Groups"] <- class[intersect(rownames(imm),rownames(class)),"V2"]
  immuno <- immuno[!is.na(immuno$Groups),]
  immuno$Groups <- factor(immuno$Groups) 
  
  # 整理
  immuno <- melt(immuno, id.vars = "Groups")
  
  # Plot
  tt <- ttheme_minimal(base_size = 9,base_colour = "red",
                       colhead = list(fg_params = list(col = "grey50")),
                       rowhead = list(fg_params = list(col = "grey50")))
  ggplot(data = immuno,aes(x = variable,y = value,fill = Groups)) +
    stat_boxplot(geom ='errorbar') +
    geom_boxplot(color = "grey30",outlier.size=0) +
    #geom_boxplot(aes(fill = Groups),outlier.size=0,alpha = 0.8,notch = T,notchwidth = 0.8) +
    #geom_violin(aes(fill = Groups),outlier.size=0,alpha = 0.6,width=0.4) +
    #geom_point(aes(cell + se,value,colour = Groups,fill = Groups),
    #           position = position_jitter(width = 1/(i*3),height = 0),
    #           alpha=0.1,size=1.5) +
    #scale_fill_manual(values = c("#f7aa00","#235784","#40a8c4","#bcdbdf")) +
    #scale_color_manual(values = c("#f7aa00","#235784","#40a8c4","#bcdbdf")) +
    #xlab("BRCA Subtypes") +
    scale_fill_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
    scale_color_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
    xlab(paste(i,"Subtypes of",dir)) +
    #scale_y_continuous(limits = c(0,max(immuno$value) +0.7)) +
    
    #scale_y_continuous(limits = c(0,2)) +
    #annotation_custom(Bcell,xmin = 0,xmax = 1.5) +
    #annotation_custom(CD4Tcell,xmin = 1.5,xmax = 2.5) +
    #annotation_custom(CD8Tcell,xmin = 2.5,xmax = 3.5) +
    #annotation_custom(Neu,xmin = 3.5,xmax = 4.5) +
    #annotation_custom(Mac,xmin = 4.5,xmax = 5.5) +
    #annotation_custom(Den,xmin = 5.5) +
    #表格
    #annotation_custom(tableGrob(excB_cell,theme = tt),xmin = 1,xmax = 1,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
    #annotation_custom(tableGrob(excCD4_Tcell,theme = tt),xmin = 2,xmax = 2,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
    #annotation_custom(tableGrob(excCD8_Tcell,theme = tt),xmin = 3,xmax = 3,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
    #annotation_custom(tableGrob(excNeutrophil,theme = tt),xmin = 4,xmax = 4,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
    #annotation_custom(tableGrob(excMacrophage,theme = tt),xmin = 5,xmax = 5,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
    #annotation_custom(tableGrob(excDendritic,theme = tt),xmin = 6,xmax = 6,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          #axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  #ggsave("f:/datahe/immuno/BRCA-threefold.pdf",width = 10,height = 10)
  
}


for (dir in setdiff(dir(),c(dir(pattern = ".pdf"),"plot"))){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    pdf(paste0("plot/boxplot/",dir,"-boxplot-timer.pdf"),width = 33,height = 30)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}


## 亚型的显著性数值热图wilcoxon秩和检验
imm <- read.table("f:/datahe/immuno/data/immuneEstimation.txt",sep = "\t",header = T,row.names = 1)
imm <- imm[apply(imm,1,sum) != 0,]        # ------ 去除在6个免疫中都不表达的样本
imm  <- imm[grep("-01",rownames(imm)),]
rownames(imm) <- gsub("-..$","",rownames(imm))
immuno <- imm
immuno$V1 <- rownames(immuno)

color <- data.frame(color = c("#CD2626","#DC6767","#EBA8A8","#EBD6D5"),
                    wil = c("<=0.001","<=0.01" ,"<=0.05",">0.05" ),stringsAsFactors = F)
wilcoxon <- data.frame()

plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
  imm <- merge(immuno,class)
  
  immlist <- split(imm[,2:7],imm$V2)
  exclist <- list()
  wil <- data.frame()
  for (j in colnames(imm)[2:7]){
    exclist[[j]] <- matrix("",nrow = i,ncol = i,dimnames = list(names(immlist),names(immlist)))
    for (group1 in names(immlist)[1:(length(names(immlist))-1)]){
      if (sum(length(na.omit(immlist[[group1]][,j]))) == 0){next}
      for (group2 in names(immlist)[(grep(group1,names(immlist))+1):length(names(immlist))]){
        if (sum(length(na.omit(immlist[[group2]][,j]))) == 0 | isTRUE(na.omit(immlist[[group1]][,j]) == na.omit(immlist[[group2]][,j]))){next}
        p.value <- wilcox.test(immlist[[group1]][,j],immlist[[group2]][,j])$p.value
        if (p.value <= 0.05){exclist[[j]][group1,group2] <- "*"}
        if (p.value <= 0.01){exclist[[j]][group1,group2] <- "**"}
        if (p.value <= 0.001){exclist[[j]][group1,group2] <- "***"}
        wil <- rbind(wil,data.frame(method = dir,Character = j, Group = i,
                                    Group1 = group1,Group2 = group2,Wilcoxon = p.value,
                                    wil = ifelse(p.value <= 0.05,ifelse(p.value <= 0.01,ifelse(p.value <= 0.001,"<=0.001","<=0.01"),"<=0.05"),">0.05")))
      }
    }
  }
  wil$Group1 <- factor(wil$Group1,levels = sort(levels(wil$Group1),decreasing = T))
  wil$wil <- factor(wil$wil,levels = sort(levels(wil$wil)))
  wil <- merge(wil,color)
  wil$color <- factor(wil$color,levels = sort(unique(wil$color)))
  p <- ggplot(wil, aes(Group2, Group1))
  p + geom_tile(aes(fill = wil),colour = "white") + 
    labs(title = paste(i,"groups",dir)) +
    scale_fill_manual(values = levels(wil$color)) +
    facet_wrap(~ Character,ncol = 2) +
    geom_text(aes(label = signif(Wilcoxon,2)),size = 0.8) +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_blank(),
          axis.title = element_blank(),
          strip.background = element_blank(),
          #strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  #ggsave(paste0("plot/",i,"-",dir,"-白细胞等分布wilcoxon.pdf"),width = 7,height = 10)
  
}
for (dir in setdiff(dir(),c(dir(pattern = ".pdf"),"plot"))){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    wilcoxon <- rbind(wilcoxon,p2$data,p3$data,p4$data,p5$data,p6$data,p7$data,p8$data,p9$data,p10$data)
    pdf(paste0("plot/boxplot/",dir,"-boxplot-timer-wil.pdf"),width = 12,height = 18)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}

write.table(wilcoxon,"plot/boxplot/timer-wil.txt",sep = "\t",quote = F,row.names = F,col.names = T)

#### -- 两个特征的epic -- ####
rm (list = ls())
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(ggplot2)
library(reshape2)
library(gridExtra)
library(gtable)
library(plyr)
library(grid)
library(easyGgplot2)
# immuno cell
imm <- read.table("f:/datahe/immuno/EPIC/data/EPIC.txt",sep = "\t",header = T,row.names = 1)
imm <- imm[apply(imm,1,sum) != 0,]        # ------ 去除在6个免疫中都不表达的样本
imm <- imm[,-7]
imm <- data.frame(scale(imm))
plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F,row.names = 1)
  immuno <- imm
  immuno[intersect(rownames(imm),rownames(class)),"Groups"] <- class[intersect(rownames(imm),rownames(class)),"V2"]
  immuno <- immuno[!is.na(immuno$Groups),]
  immuno$Groups <- factor(immuno$Groups) 
  
  # 整理
  immuno <- melt(immuno, id.vars = "Groups")
  
  # Plot
  tt <- ttheme_minimal(base_size = 9,base_colour = "red",
                       colhead = list(fg_params = list(col = "grey50")),
                       rowhead = list(fg_params = list(col = "grey50")))
  ggplot(data = immuno[immuno$value < 20,],aes(x = variable,y = value,fill = Groups)) +
    stat_boxplot(geom ='errorbar') +
    geom_boxplot(color = "grey30",outlier.size=0) +
    #geom_boxplot(aes(fill = Groups),outlier.size=0,alpha = 0.8,notch = T,notchwidth = 0.8) +
    #geom_violin(aes(fill = Groups),outlier.size=0,alpha = 0.6,width=0.4) +
    #geom_point(aes(cell + se,value,colour = Groups,fill = Groups),
    #           position = position_jitter(width = 1/(i*3),height = 0),
    #           alpha=0.1,size=1.5) +
    #scale_fill_manual(values = c("#f7aa00","#235784","#40a8c4","#bcdbdf")) +
    #scale_color_manual(values = c("#f7aa00","#235784","#40a8c4","#bcdbdf")) +
    #xlab("BRCA Subtypes") +
    scale_fill_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
    scale_color_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
    xlab(paste(i,"Subtypes of",dir)) +
    #scale_y_continuous(limits = c(0,max(immuno$value) +0.7)) +
    
    #scale_y_continuous(limits = c(0,2)) +
    #annotation_custom(Bcell,xmin = 0,xmax = 1.5) +
    #annotation_custom(CD4Tcell,xmin = 1.5,xmax = 2.5) +
    #annotation_custom(CD8Tcell,xmin = 2.5,xmax = 3.5) +
    #annotation_custom(Neu,xmin = 3.5,xmax = 4.5) +
    #annotation_custom(Mac,xmin = 4.5,xmax = 5.5) +
    #annotation_custom(Den,xmin = 5.5) +
    #表格
    #annotation_custom(tableGrob(excB_cell,theme = tt),xmin = 1,xmax = 1,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
  #annotation_custom(tableGrob(excCD4_Tcell,theme = tt),xmin = 2,xmax = 2,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
  #annotation_custom(tableGrob(excCD8_Tcell,theme = tt),xmin = 3,xmax = 3,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
  #annotation_custom(tableGrob(excNeutrophil,theme = tt),xmin = 4,xmax = 4,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
  #annotation_custom(tableGrob(excMacrophage,theme = tt),xmin = 5,xmax = 5,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
  #annotation_custom(tableGrob(excDendritic,theme = tt),xmin = 6,xmax = 6,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
  theme(axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        #axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
  #ggsave("f:/datahe/immuno/BRCA-threefold.pdf",width = 10,height = 10)
  
}


for (dir in setdiff(dir(),c(dir(pattern = ".pdf"),"plot"))){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    pdf(paste0("plot/boxplot/",dir,"-boxplot-epic.pdf"),width = 33,height = 30)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}
## 亚型的显著性数值热图wilcoxon秩和检验
imm <- read.table("f:/datahe/immuno/EPIC/data/EPIC.txt",sep = "\t",header = T,row.names = 1)
imm <- imm[apply(imm,1,sum) != 0,]        # ------ 去除在6个免疫中都不表达的样本
imm <- imm[,-7]
imm <- data.frame(scale(imm))
immuno <- imm
immuno$V1 <- rownames(immuno)

color <- data.frame(color = c("#CD2626","#DC6767","#EBA8A8","#EBD6D5"),
                    wil = c("<=0.001","<=0.01" ,"<=0.05",">0.05" ),stringsAsFactors = F)
wilcoxon <- data.frame()

plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
  imm <- merge(immuno,class)
  
  immlist <- split(imm[,2:8],imm$V2)
  exclist <- list()
  wil <- data.frame()
  for (j in colnames(imm)[2:8]){
    exclist[[j]] <- matrix("",nrow = i,ncol = i,dimnames = list(names(immlist),names(immlist)))
    for (group1 in names(immlist)[1:(length(names(immlist))-1)]){
      if (sum(length(na.omit(immlist[[group1]][,j]))) == 0){next}
      for (group2 in names(immlist)[(grep(group1,names(immlist))+1):length(names(immlist))]){
        if (sum(length(na.omit(immlist[[group2]][,j]))) == 0 | isTRUE(na.omit(immlist[[group1]][,j]) == na.omit(immlist[[group2]][,j]))){next}
        p.value <- wilcox.test(immlist[[group1]][,j],immlist[[group2]][,j])$p.value
        if (p.value <= 0.05){exclist[[j]][group1,group2] <- "*"}
        if (p.value <= 0.01){exclist[[j]][group1,group2] <- "**"}
        if (p.value <= 0.001){exclist[[j]][group1,group2] <- "***"}
        wil <- rbind(wil,data.frame(method = dir,Character = j, Group = i,
                                    Group1 = group1,Group2 = group2,Wilcoxon = p.value,
                                    wil = ifelse(p.value <= 0.05,ifelse(p.value <= 0.01,ifelse(p.value <= 0.001,"<=0.001","<=0.01"),"<=0.05"),">0.05")))
      }
    }
  }
  wil$Group1 <- factor(wil$Group1,levels = sort(levels(wil$Group1),decreasing = T))
  wil$wil <- factor(wil$wil,levels = sort(levels(wil$wil)))
  wil <- merge(wil,color)
  wil$color <- factor(wil$color,levels = sort(unique(wil$color)))
  p <- ggplot(wil, aes(Group2, Group1))
  p + geom_tile(aes(fill = wil),colour = "white") + 
    labs(title = paste(i,"groups",dir)) +
    scale_fill_manual(values = levels(wil$color)) +
    facet_wrap(~ Character,ncol = 2) +
    geom_text(aes(label = signif(Wilcoxon,2)),size = 0.8) +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_blank(),
          axis.title = element_blank(),
          strip.background = element_blank(),
          #strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  #ggsave(paste0("plot/",i,"-",dir,"-白细胞等分布wilcoxon.pdf"),width = 7,height = 10)
  
}
for (dir in setdiff(dir(),c(dir(pattern = ".pdf"),"plot"))){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    wilcoxon <- rbind(wilcoxon,p2$data,p3$data,p4$data,p5$data,p6$data,p7$data,p8$data,p9$data,p10$data)
    pdf(paste0("plot/boxplot/",dir,"-boxplot-epic-wil.pdf"),width = 12,height = 18)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}

write.table(wilcoxon,"plot/boxplot/epic-wil.txt",sep = "\t",quote = F,row.names = F,col.names = T)

#### -- 两个特征的mcp -- ####
rm (list = ls())
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(ggplot2)
library(reshape2)
library(gridExtra)
library(gtable)
library(plyr)
library(grid)
library(easyGgplot2)
# immuno cell
imm <- read.table("f:/datahe/immuno/MCP/data/MCP.txt",sep = "\t",header = T,row.names = 1)
imm <- imm[apply(imm,1,sum) != 0,]        # ------ 去除在6个免疫中都不表达的样本

plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F,row.names = 1)
  immuno <- imm
  immuno[intersect(rownames(imm),rownames(class)),"Groups"] <- class[intersect(rownames(imm),rownames(class)),"V2"]
  immuno <- immuno[!is.na(immuno$Groups),]
  immuno$Groups <- factor(immuno$Groups) 
  
  # 整理
  immuno <- melt(immuno, id.vars = "Groups")
  
  # Plot
  tt <- ttheme_minimal(base_size = 9,base_colour = "red",
                       colhead = list(fg_params = list(col = "grey50")),
                       rowhead = list(fg_params = list(col = "grey50")))
  ggplot(data = immuno,aes(x = variable,y = value,fill = Groups)) +
    stat_boxplot(geom ='errorbar') +
    geom_boxplot(color = "grey30",outlier.size=0) +
    #geom_boxplot(aes(fill = Groups),outlier.size=0,alpha = 0.8,notch = T,notchwidth = 0.8) +
    #geom_violin(aes(fill = Groups),outlier.size=0,alpha = 0.6,width=0.4) +
    #geom_point(aes(cell + se,value,colour = Groups,fill = Groups),
    #           position = position_jitter(width = 1/(i*3),height = 0),
    #           alpha=0.1,size=1.5) +
    #scale_fill_manual(values = c("#f7aa00","#235784","#40a8c4","#bcdbdf")) +
    #scale_color_manual(values = c("#f7aa00","#235784","#40a8c4","#bcdbdf")) +
    #xlab("BRCA Subtypes") +
    scale_fill_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
    scale_color_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
    xlab(paste(i,"Subtypes of",dir)) +
    #scale_y_continuous(limits = c(0,max(immuno$value) +0.7)) +
    
    #scale_y_continuous(limits = c(0,2)) +
    #annotation_custom(Bcell,xmin = 0,xmax = 1.5) +
    #annotation_custom(CD4Tcell,xmin = 1.5,xmax = 2.5) +
    #annotation_custom(CD8Tcell,xmin = 2.5,xmax = 3.5) +
    #annotation_custom(Neu,xmin = 3.5,xmax = 4.5) +
    #annotation_custom(Mac,xmin = 4.5,xmax = 5.5) +
    #annotation_custom(Den,xmin = 5.5) +
    #表格
    #annotation_custom(tableGrob(excB_cell,theme = tt),xmin = 1,xmax = 1,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
  #annotation_custom(tableGrob(excCD4_Tcell,theme = tt),xmin = 2,xmax = 2,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
  #annotation_custom(tableGrob(excCD8_Tcell,theme = tt),xmin = 3,xmax = 3,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
  #annotation_custom(tableGrob(excNeutrophil,theme = tt),xmin = 4,xmax = 4,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
  #annotation_custom(tableGrob(excMacrophage,theme = tt),xmin = 5,xmax = 5,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
  #annotation_custom(tableGrob(excDendritic,theme = tt),xmin = 6,xmax = 6,ymin = max(immuno$value) + 0.2,ymax = max(immuno$value) + 0.7) +
  theme(axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        #axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
  #ggsave("f:/datahe/immuno/BRCA-threefold.pdf",width = 10,height = 10)
  
}


for (dir in setdiff(dir(),c(dir(pattern = ".pdf"),"plot"))){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    pdf(paste0("plot/boxplot/",dir,"-boxplot-mcp.pdf"),width = 33,height = 30)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}

## 亚型的显著性数值热图wilcoxon秩和检验
imm <- read.table("f:/datahe/immuno/MCP/data/MCP.txt",sep = "\t",header = T,row.names = 1)
imm <- imm[apply(imm,1,sum) != 0,]        # ------ 去除在6个免疫中都不表达的样本

immuno <- imm
immuno$V1 <- rownames(immuno)

color <- data.frame(color = c("#CD2626","#DC6767","#EBA8A8","#EBD6D5"),
                    wil = c("<=0.001","<=0.01" ,"<=0.05",">0.05" ),stringsAsFactors = F)
wilcoxon <- data.frame()

plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
  imm <- merge(immuno,class)
  
  immlist <- split(imm[,2:11],imm$V2)
  exclist <- list()
  wil <- data.frame()
  for (j in colnames(imm)[2:11]){
    exclist[[j]] <- matrix("",nrow = i,ncol = i,dimnames = list(names(immlist),names(immlist)))
    for (group1 in names(immlist)[1:(length(names(immlist))-1)]){
      if (sum(length(na.omit(immlist[[group1]][,j]))) == 0){next}
      for (group2 in names(immlist)[(grep(group1,names(immlist))+1):length(names(immlist))]){
        if (sum(length(na.omit(immlist[[group2]][,j]))) == 0 | isTRUE(na.omit(immlist[[group1]][,j]) == na.omit(immlist[[group2]][,j]))){next}
        p.value <- wilcox.test(immlist[[group1]][,j],immlist[[group2]][,j])$p.value
        if (p.value <= 0.05){exclist[[j]][group1,group2] <- "*"}
        if (p.value <= 0.01){exclist[[j]][group1,group2] <- "**"}
        if (p.value <= 0.001){exclist[[j]][group1,group2] <- "***"}
        wil <- rbind(wil,data.frame(method = dir,Character = j, Group = i,
                                    Group1 = group1,Group2 = group2,Wilcoxon = p.value,
                                    wil = ifelse(p.value <= 0.05,ifelse(p.value <= 0.01,ifelse(p.value <= 0.001,"<=0.001","<=0.01"),"<=0.05"),">0.05")))
      }
    }
  }
  wil$Group1 <- factor(wil$Group1,levels = sort(levels(wil$Group1),decreasing = T))
  wil$wil <- factor(wil$wil,levels = sort(levels(wil$wil)))
  wil <- merge(wil,color)
  wil$color <- factor(wil$color,levels = sort(unique(wil$color)))
  p <- ggplot(wil, aes(Group2, Group1))
  p + geom_tile(aes(fill = wil),colour = "white") + 
    labs(title = paste(i,"groups",dir)) +
    scale_fill_manual(values = levels(wil$color)) +
    facet_wrap(~ Character,ncol = 2) +
    geom_text(aes(label = signif(Wilcoxon,2)),size = 0.8) +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_blank(),
          axis.title = element_blank(),
          strip.background = element_blank(),
          #strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  #ggsave(paste0("plot/",i,"-",dir,"-白细胞等分布wilcoxon.pdf"),width = 7,height = 10)
  
}
for (dir in setdiff(dir(),c(dir(pattern = ".pdf"),"plot"))){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    wilcoxon <- rbind(wilcoxon,p2$data,p3$data,p4$data,p5$data,p6$data,p7$data,p8$data,p9$data,p10$data)
    pdf(paste0("plot/boxplot/",dir,"-boxplot-mcp-wil.pdf"),width = 12,height = 18)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}

write.table(wilcoxon,"plot/boxplot/mcp-wil.txt",sep = "\t",quote = F,row.names = F,col.names = T)


################################
# 聚类结果的交合度，频率分布图 #
################################
# log-rank
library(stringr)
library(survival)
library(ggplot2)
setwd("f:/datahe/immuno/3-co-consensus/avg/")

sur <- read.table("plot/survivial.txt",sep = "\t",header = T,stringsAsFactors = F)
sur$v1 <- as.character(sur$method)
sur$v1[grep("euclidean$",sur$v1)] <- paste0(1,sur$v1[grep("euclidean$",sur$v1)])
sur <- sur[order(sur$v1),]
sur <- sur[!duplicated(sur[,c(1,3,4,5)]),1:5]
sur <- sur[order(sur$group,sur$method),]
sur$sig <- ifelse(sur$p_value <= 0.01,1,0)
uniq <- sur[!duplicated(sur[,c(1,3)]),]
for (i in 1:nrow(uniq)){
  sursmall <- sur[sur$group == uniq$group[i],]
  sur[rownames(sursmall),"SurvivlaRatio"] <- ifelse(is.na(table(sursmall$sig)["1"]),0,table(sursmall$sig)["1"]/nrow(sursmall))
}
write.table(sur,"plot/survivial.txt",col.names = T,row.names = F,quote = F,sep = "\t")





# 表格 boxplot

# timer
imm <- read.table("f:/datahe/immuno/data/immuneEstimation.txt",sep = "\t",header = T,row.names = 1)
imm <- imm[apply(imm,1,sum) != 0,]        # ------ 去除在6个免疫中都不表达的样本
imm  <- imm[grep("-01",rownames(imm)),]
rownames(imm) <- gsub("-..$","",rownames(imm))


# epic
imm <- read.table("f:/datahe/immuno/EPIC/data/EPIC.txt",sep = "\t",header = T,row.names = 1)
imm <- imm[apply(imm,1,sum) != 0,]        # ------ 去除在6个免疫中都不表达的样本
imm <- imm[,-8]
imm <- data.frame(scale(imm))

# mcp
imm <- read.table("f:/datahe/immuno/MCP/data/MCP.txt",sep = "\t",header = T,row.names = 1)
imm <- imm[apply(imm,1,sum) != 0,]        # ------ 去除在6个免疫中都不表达的样本


wilexc <- function(dir,i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F,row.names = 1)
  immuno <- imm
  immuno[intersect(rownames(imm),rownames(class)),"Groups"] <- class[intersect(rownames(imm),rownames(class)),"V2"]
  immuno <- immuno[!is.na(immuno$Groups),]
  immuno$Groups <- factor(immuno$Groups) 
  #sp <- boxplot(Dendritic ~ Groups,immuno)
  #levels(immuno$Groups) <- order(sp$stats[3,]) # 按照DC的表达对组排序
  exc <- matrix(NA,nrow = i,ncol = i*ncol(imm),dimnames = list(1:i,1:(i*ncol(imm))))
  for (j in 1:ncol(imm)){
    for (m in 1:(i-1)){
      if (sum(immuno[immuno$Groups == m,j]) == 0){next}
      for (n in (m+1):i){
        if (sum(immuno[immuno$Groups == n,j]) == 0){next}
        p.value <- wilcox.test(immuno[immuno$Groups == m,j],immuno[immuno$Groups == n,j])$p.value
        if (p.value <= 0.05){exc[m,n*j] <- "*"}
        if (p.value > 0.05){exc[m,n*j] <- ""}
      }
    }
  }
  return (exc)
}
wilsigfre <- data.frame()

for (i in 2:10){
  tryCatch({
    dir <- setdiff(dir(),"plot")
    for (h in 1:(length(dir)-1)){
      for (k in (h+1):length(dir)){
        # 两个测度的6个免疫i个分类的显著性交叠
        wilexc1 <- wilexc(dir[h],i)
        wilexc2 <- wilexc(dir[k],i)
        class1 <- read.csv(paste0(dir[h],"/",dir[h],".k=",i,".consensusClass.csv"),header = F,row.names = 1)
        class2 <- read.csv(paste0(dir[k],"/",dir[k],".k=",i,".consensusClass.csv"),header = F,row.names = 1)
        class1$V3 <- class2[rownames(class1),"V2"]
        overlap1 <- c()
        overlap2 <- c()
        for(l in 1:i){
          overlap1 <- c(overlap1,max(table(class1)[l,]/ifelse(table(class1$V2)[l] - table(class1$V3) > 0,table(class1$V3),table(class1$V2)[l])))
          overlap2 <- c(overlap2,max(table(class1)[,l]/ifelse(table(class1$V3)[l] - table(class1$V2) > 0,table(class1$V2),table(class1$V3)[l])))
        }
        wilsigfre <- rbind(wilsigfre,data.frame(group = i,
                                                method1 = dir[h],
                                                method2 = dir[k],
                                                same_sig = ifelse(is.na(table(wilexc1 == wilexc2)["TRUE"]),0,as.numeric(table(wilexc1 == wilexc2)["TRUE"])/(choose(i,2)*10)),
                                                diff_sig = ifelse(is.na(table(wilexc1 == wilexc2)["FALSE"]),0,as.numeric(table(wilexc1 == wilexc2)["FALSE"])/(choose(i,2)*10)),
                                                overlap1 = mean(overlap1),
                                                overlap2 = mean(overlap2),
                                                row.names = NULL))
      }
    }
  },
  error = function(e){cat("ERROR :",dir[h],"  ",dir[k]," ",conditionMessage(e),"\n")})
}

wilsigfre$overlap <- apply(wilsigfre[,c("overlap1","overlap2")],1,mean)
wilsigfre$sig <- apply(wilsigfre[,c("same_sig","diff_sig")],1,max)

write.table(wilsigfre,"plot/wilsigfre-timer.txt",quote = F,sep = "\t",col.names = T,row.names = F)

write.table(wilsigfre,"plot/wilsigfre-epic.txt",quote = F,sep = "\t",col.names = T,row.names = F)

write.table(wilsigfre,"plot/wilsigfre-mcp.txt",quote = F,sep = "\t",col.names = T,row.names = F)



# 密度图
#install.packages("ggpubr")
library(ggpubr)
library(magrittr)
library(easyGgplot2)

wilsigfre1 <- read.table("plot/wilsigfre-timer.txt",sep = "\t",header = T)

wilsigfre2 <- read.table("plot/wilsigfre-epic.txt",sep = "\t",header = T)

wilsigfre3 <- read.table("plot/wilsigfre-mcp.txt",sep = "\t",header = T)


p1 <- ggdensity(wilsigfre1, x="sig", add = "mean", rug = TRUE, color = "#0082c8", fill = "#1565C0", alpha = 0.8)
p2 <- ggdensity(wilsigfre1, x="overlap", add = "mean", rug = TRUE, color = "#0082c8", fill = "#1565C0", alpha = 0.8)

p3 <- ggdensity(wilsigfre2, x="sig", add = "mean", rug = TRUE, color = "#0082c8", fill = "#1565C0", alpha = 0.8)
#p4 <- ggdensity(wilsigfre2, x="overlap", add = "mean", rug = TRUE, color = "#0082c8", fill = "#1565C0", alpha = 0.8)

p5 <- ggdensity(wilsigfre3, x="sig", add = "mean", rug = TRUE, color = "#0082c8", fill = "#1565C0", alpha = 0.8)
#p6 <- ggdensity(wilsigfre3, x="overlap", add = "mean", rug = TRUE, color = "#0082c8", fill = "#1565C0", alpha = 0.8)

pdf("plot/The Robustness of Method and Immunomicroenvironment.pdf",width = 10,height = 10)
ggplot2.multiplot(p1, p3, p5, p2, cols=2)
#ggplot2.multiplot(p1, p2, p3, p4, p5, p6, cols=2)
dev.off()


#### -- 两个特征的生存曲线图timer  -- ####
# log-rank
library(stringr)
library(survival)
library(ggplot2)
library(survminer)
setwd("f:/datahe/immuno/3-co-consensus/avg")
cancer <- read.table("f:/datahe/immuno/data/Result2.txt",sep = "\t",header = T,stringsAsFactors = F)
cancer$days_to_death.x[cancer$days_to_death.x == "NULL"] <- cancer$days_to_last_follow_up[cancer$days_to_death.x == "NULL"]
cancer$days_to_death.x[cancer$days_to_death.x == "NULL"] <- NA
cancer$days_to_death.x[cancer$days_to_death.x == ""] <- NA
cancer$days_to_death.x <- as.numeric(cancer$days_to_death.x)
cancer$vital_status.x[cancer$vital_status.x == "alive"] <- 0
cancer$vital_status.x[cancer$vital_status.x == "dead"] <- 1
cancer$vital_status.x[cancer$vital_status.x == "notreported"] <- NA
cancer$vital_status.x[cancer$vital_status.x == ""] <- NA
cancer$vital_status.x <- as.numeric(cancer$vital_status.x)
sur <- data.frame()

tryCatch({
  for (dir in setdiff(dir(),c(dir(pattern = ".pdf"),"plot"))){
    for (i in 2:10){
      class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
      #class$V2[class$V2 == 1 | class$V2 == 2] <- "Cold Tumors"
      #class$V2[class$V2 == 3 | class$V2 == 4 | class$V2 == 5] <- "Hot Tumors"
      cancerk <- merge(cancer,class,by.x = "submitter_id",by.y = "V1")
      kmsurvival <- survfit(Surv(cancerk$days_to_death.x, cancerk$vital_status.x) ~ cancerk$V2)
      dif <- survdiff(Surv(cancerk$days_to_death.x, cancerk$vital_status.x) ~ cancerk$V2)#求生存时间
      #p_value <- pchisq(dif$chisq,length(dif$n)-1,lower.tail=F)
      pdf(paste0("plot/survival/",dir,"-",i,"-survival-1.pdf"),width = 12,height = 12)
      ggsurvplot(kmsurvival, 
                 data = cancerk, 
                 #conf.int = TRUE, 
                 
                 #palette = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#A6617D","#E88080","#E8D380","#D87A80")[1:i],
                 #legend.labs=paste("Subtype",1:i),
                 
                 palette = c("#015890","#DA4934"),
                 legend.labs = c("Cold Tumors","Hot Tumors"),
                 pval = TRUE,
                 risk.table = "abs_pct",
                 xlab = "Time in days",
                 sur.median.line = "hv",
                 #ncensor.plot = TRUE,      # 删失数据
                 #ncensor.plot.height = 0.25,
                 risk.table.height = 0.25,
                 ggtheme = theme_light())
      dev.off()
      
      #plot(kmsurvival, lty = 1:1, col = c("#015890","#DA4934"), 
      #     xlab = "Time", ylab="Survival Probability",
      #     main = "Survivial of Cold and Hot Tumors in Pam Manhattan Method of Five Subtyps",axes = T,mark.time = T,lwd = 2)
      #legend(5,0.4, paste(unique(cancerk$V2),":",table(cancerk$V2)),
      #       cex=0.8,bty="n",lty = 1:1,col = c("#015890","#DA4934")) 
      
      #pdf(paste0("plot/survival/",dir,"-",i,"-survival.pdf"),width = 8,height = 8)
      #plot(kmsurvival, lty = 1:1, col = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#A6617D","#E88080","#E8D380","#D87A80")[1:i], 
      #     xlab = "Time", ylab="Survival Probability",
      #     main = paste(i,"Group of",dir),axes = T,mark.time = T,lwd = 2)
      #axis(1,c(0,20,40,60,80,100))
      #axis(2,c(0,0.2,0.4,0.6,0.8,1))
      #legend(5,0.4, paste(1:i,":",kmsurvival$n),
      #       cex=0.8,bty="n",lty = 1:1,col = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#A6617D","#E88080","#E8D380","#D87A80")[1:i]) 
      #text(1000,0.45,paste("p=",signif(p_value,3)))
      
      #dev.off()
      #if (p_value <= 0.01 & all(table(cancerk$V2) > 10)){
      sur <- rbind(sur,data.frame(method = dir,group = i,
                                  sample = str_c(table(cancerk$V2),collapse=","),p_value = p_value))
      
      #}
    }
  }
},
error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})

write.table(sur,"plot/survival/survival.txt",sep = "\t",quote = F,col.names = T,row.names = F)

#sur$v1 <- as.character(sur$method)
#sur$v1[grep("euclidean$",sur$v1)] <- paste0(1,sur$v1[grep("euclidean$",sur$v1)])
#sur <- sur[order(sur$v1),]
#sur <- sur[!duplicated(sur[,c(1,3,4,5)]),1:5]
sur <- sur[order(sur$group,sur$method),]
sur$sig <- ifelse(sur$p_value <= 0.01,1,0)
uniq <- sur[!duplicated(sur[,c(1,3)]),]
for (i in 1:nrow(uniq)){
  sursmall <- sur[sur$group == uniq$group[i],]
  sur[rownames(sursmall),"SurvivlaRatio"] <- ifelse(is.na(table(sursmall$sig)["1"]),0,table(sursmall$sig)["1"]/nrow(sursmall))
}
write.table(sur,"plot/survival/survivial.txt",col.names = T,row.names = F,quote = F,sep = "\t")
# 表格
wilexc <- function(dir,i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F,row.names = 1)
  immuno <- imm
  immuno[intersect(rownames(imm),rownames(class)),"Groups"] <- class[intersect(rownames(imm),rownames(class)),"V2"]
  immuno <- immuno[!is.na(immuno$Groups),]
  immuno$Groups <- factor(immuno$Groups) 
  #sp <- boxplot(Dendritic ~ Groups,immuno)
  #levels(immuno$Groups) <- order(sp$stats[3,]) # 按照DC的表达对组排序
  exc <- matrix(NA,nrow = i,ncol = i*6,dimnames = list(1:i,1:(i*2)))
  for (j in 1:2){
    for (m in 1:(i-1)){
      if (sum(immuno[immuno$Groups == m,j]) == 0){next}
      for (n in (m+1):i){
        if (sum(immuno[immuno$Groups == n,j]) == 0){next}
        p.value <- wilcox.test(immuno[immuno$Groups == m,j],immuno[immuno$Groups == n,j])$p.value
        if (p.value <= 0.05){exc[m,n*j] <- "*"}
        if (p.value > 0.05){exc[m,n*j] <- ""}
      }
    }
  }
  return (exc)
}
wilsigfre <- data.frame()

for (i in 2:10){
  tryCatch({
    dir <- setdiff(dir(),c(dir(pattern = ".pdf"),"plot","consensus"))
    for (h in 1:(length(dir)-1)){
      for (k in (h+1):length(dir)){
        # 两个测度的6个免疫i个分类的显著性交叠
        wilexc1 <- wilexc(dir[h],i)
        wilexc2 <- wilexc(dir[k],i)
        class1 <- read.csv(paste0(dir[h],"/",dir[h],".k=",i,".consensusClass.csv"),header = F,row.names = 1)
        class2 <- read.csv(paste0(dir[k],"/",dir[k],".k=",i,".consensusClass.csv"),header = F,row.names = 1)
        class1$V3 <- class2[rownames(class1),"V2"]
        overlap1 <- c()
        overlap2 <- c()
        for(l in 1:i){
          overlap1 <- c(overlap1,max(table(class1)[l,]/ifelse(table(class1$V2)[l] - table(class1$V3) > 0,table(class1$V3),table(class1$V2)[l])))
          overlap2 <- c(overlap2,max(table(class1)[,l]/ifelse(table(class1$V3)[l] - table(class1$V2) > 0,table(class1$V2),table(class1$V3)[l])))
        }
        wilsigfre <- rbind(wilsigfre,data.frame(group = i,
                                                method1 = dir[h],
                                                method2 = dir[k],
                                                same_sig = ifelse(is.na(table(wilexc1 == wilexc2)["TRUE"]),0,as.numeric(table(wilexc1 == wilexc2)["TRUE"])/(choose(i,2)*6)),
                                                diff_sig = ifelse(is.na(table(wilexc1 == wilexc2)["FALSE"]),0,as.numeric(table(wilexc1 == wilexc2)["FALSE"])/(choose(i,2)*6)),
                                                overlap1 = mean(overlap1),
                                                overlap2 = mean(overlap2),
                                                row.names = NULL))
      }
    }
  },
  error = function(e){cat("ERROR :",dir[h],"  ",dir[k]," ",conditionMessage(e),"\n")})
}

wilsigfre <- read.table("plot/wilsigfre.txt",sep = "\t",header = T)
wilsigfre <- merge(wilsigfre,sur[,1:4],by.x = c("group","method1"),by.y = c("group","method"),all.x = T,all.y = F)
wilsigfre <- merge(wilsigfre,sur[,1:4],by.x = c("group","method2"),by.y = c("group","method"),all.x = T,all.y = F)
colnames(wilsigfre)[8:11] <- c("sample1","surv1","sample2","surv2")
write.table(wilsigfre,"wilsigfre.txt",sep = "\t",row.names = F,col.names = T,quote = F)

a <- na.omit(wilsigfre)
a <- a[unlist(lapply(lapply(lapply(strsplit(as.character(a$sample1),","),as.numeric),function(i){!i <= 10}),all)),]
a <- a[unlist(lapply(lapply(lapply(strsplit(as.character(a$sample2),","),as.numeric),function(i){!i <= 10}),all)),]
a$overlap <- apply(a[,c("overlap1","overlap2")],1,mean)
a$surv <- apply(a[,c("surv1","surv2")],1,function(x){ks.test(x[1],x[2])$p.value})
# 密度图

p <- ggplot(a) 
p +# geom_histogram(fill = "#293C55", colour = "black") +
  geom_vline(aes(xintercept = 0.5),color = "grey70",linetype = "dashed",size = 2) +
  geom_density(aes(x = overlap,..density..),colour = "#6bd5e1",size = 2) +
  geom_density(aes(x = same_sig,..density..),colour = "#fb9a40",size = 2) +
  labs(title = "The Robustness of Method and Immunomicroenvironment") +
  theme(axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
ggsave("plot/The Robustness of Method and Immunomicroenvironment.pdf",width = 10,height = 7)







######################
# 统计表型数据及检验 #
######################
rm(list = ls())
setwd("/pub6/siyu/3-co-consensus/avg/")
library(stringr)
library(ggplot2)
## 提出免疫样本的临床数据

phe <- read.table("/pub6/siyu/phenotypeall.txt",sep = "\t",header = F,stringsAsFactors = F,row.names = 1)
phe[phe == ""] <- NA
## 表型数据在分类中的差异：卡方 & kruskal-wallis检验
# 亚型数据
# class中的数据去除了异常值所以样本比clinic中的少
#wilsigfre <- read.table("plot/wilsigfre.txt",sep = "\t",header = T,stringsAsFactors = F)
chiq <- data.frame()
for (dir in setdiff(dir(),c("plot","data"))){
  for (i in 2:10){
    class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
    # 临床数据
    for (can in gsub("_.*","",dir("/pub6/siyu/clinical"))){
      clinic <- read.csv(paste0("/pub6/siyu/clinical/",can,"_clinicalMatrix"),sep = "\t",header = T,row.names = 1,stringsAsFactors = F)
      rownames(clinic) <- gsub("-01$","",rownames(clinic))
      
      if(length(unique(class[class$V1 %in% intersect(class$V1,rownames(clinic)),"V2"])) == 1){next}
      
      clinic <- clinic[intersect(class$V1,rownames(clinic)),phe[can,][!is.na(phe[can,])]]
      clinic[clinic == ""] <- NA
      #clinic$age_at_initial_pathologic_diagnosis[clinic$age_at_initial_pathologic_diagnosis <= 60] <- min(na.omit(clinic$age_at_initial_pathologic_diagnosis))
      #clinic$age_at_initial_pathologic_diagnosis[clinic$age_at_initial_pathologic_diagnosis > 60] <- max(na.omit(clinic$age_at_initial_pathologic_diagnosis))
      ifelse(!is.null(clinic$pathologic_stage),clinic$pathologic_stage <- gsub("A|B|C$", "",clinic$pathologic_stage),0)
      ifelse(!is.null(clinic$clinical_stage),clinic$clinical_stage <- gsub("A|B|C|A1|B1|C1|A2|B2|C2$","",clinic$clinical_stage),0)
      ifelse(!is.null(clinic$pathologic_T),clinic$pathologic_T <- gsub("a|b|c|d|e$", "",clinic$pathologic_T),0)
      ifelse(!is.null(clinic$pathologic_N),clinic$pathologic_N <- gsub("a|b|c|d|e$", "",clinic$pathologic_N),0)
      ifelse(!is.null(clinic$pathologic_M),clinic$pathologic_M <- gsub("a|b|c|d|e$", "",clinic$pathologic_M),0)
      ifelse(can == "CESC",clinic$pathologic_T[grep("[12]{2}$",clinic$pathologic_T)] <- substr(clinic$pathologic_T[grep("[12]{2}$",clinic$pathologic_T)],1,2),0)
      ifelse(can == "TGCT",clinic$histological_type <- gsub(";.*","",clinic$histological_type),0)
      clinic1 <- clinic
      for(k in colnames(clinic1)){
        ifelse(class(clinic1[,k]) != "character" & length(na.omit(unique(clinic1[,k]))) != 0,
               ifelse(length(na.omit(unique(clinic1[,k]))) < 5,clinic[,k] <- as.character(clinic[,k]),0),
               ifelse(length(na.omit(unique(clinic1[,k]))) > 10 | length(na.omit(unique(clinic1[,k]))) <= 1,clinic <- clinic[,-grep(paste0("^",k,"$"),colnames(clinic))],0))
      }
      # 结合表型和分组数据
      clinic <- merge(cbind(clinic1,V1 = rownames(clinic1)),class)
      clinic$V2 <- factor(clinic$V2)
      for(j in 2:(ncol(clinic)-1)){
        tryCatch({
          chiq <- rbind(chiq,data.frame(cancer = can,
                                        method = dir,
                                        groups = i,
                                        phenotype = colnames(clinic)[j],
                                        chi_KW_p = ifelse(class(clinic[,j]) != "character",
                                                          kruskal.test(clinic[,j],clinic[,ncol(clinic)])$p.value,
                                                          chisq.test(table(clinic[,j],clinic[,ncol(clinic)]))$p.value),
                                        phenonum = ifelse(class(clinic[,j]) == "character",
                                                          str_c(apply(table(clinic[,j],clinic[,ncol(clinic)]),2,function(x){str_c(x,collapse = '/')}),collapse = ";"),
                                                          "Discrete")))
          # 表型画图
          if(chiq$chi_KW_p[nrow(chiq)] > 0.05){next}
          if(class(clinic[,j]) == "character") {
            p <- ggplot(clinic,aes(x=clinic[,j],fill = clinic[,ncol(clinic)]))
            p + geom_bar(na.rm = T,position = "fill") +
              scale_fill_manual(name="Class",labels = paste(paste("Subtype",1:5),table(clinic$V2),sep = ":"),
                                values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#A6617D","#E88080","#E8D380","#D87A80")[1:i]) +
              labs(title = paste(can,colnames(clinic)[j])) +
              theme(axis.text.x = element_text(size = 10),
                    axis.text.y = element_text(size = 10),
                    #legend.position = "top",
                    #legend.background = element_rect(fill="transparent", size=.5),
                    axis.line = element_line(size = 0.5, colour = "black"),
                    axis.title = element_blank(),
                    strip.background = element_blank(),
                    strip.text = element_blank(),
                    panel.background = element_blank(),
                    panel.border = element_blank(),
                    panel.grid = element_blank())
          }else{
            p <- ggplot(clinic,aes(x=clinic[,ncol(clinic)],y = clinic[,j],fill = clinic[,ncol(clinic)]))
            p + geom_boxplot(na.rm = T) +
              
              scale_fill_manual(name="Class",labels = paste(paste("Subtype",1:5),table(clinic$V2),sep = ":"),
                                values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#A6617D","#E88080","#E8D380","#D87A80")[1:i]) +
              labs(title = paste(can,colnames(clinic)[j])) +
              theme(axis.text.x = element_text(size = 10),
                    axis.text.y = element_text(size = 10),
                    #legend.position = "top",
                    #legend.background = element_rect(fill="transparent", size=.5),
                    axis.line = element_line(size = 0.5, colour = "black"),
                    axis.title = element_blank(),
                    strip.background = element_blank(),
                    strip.text = element_blank(),
                    panel.background = element_blank(),
                    panel.border = element_blank(),
                    panel.grid = element_blank())
          }
          ggsave(paste0("plot/phenotype/",can,"/",can,"-",dir,"-",i,"-",colnames(clinic)[j],"-1",".pdf"),width = 10,height = 10)
        },
        error = function(e){cat("ERROR :",can,"  ",dir,"  ",i,"  ",colnames(clinic)[j],":",conditionMessage(e),"\n")})
      }
    }
  }
}
write.table(chiq,"plot/phenotype/chi-squareall.txt",sep = "\t",col.names = T,row.names = F,quote = F)

a <- merge(ratio,chiq,by.x = c("cancer","method","group"),by.y = c("cancer","method","groups"))
write.table(a,"all-data.txt",sep = "\t",col.names = T,row.names = F,quote = F)

a <- read.table("all-data.txt",sep = "\t",header = T,stringsAsFactors = F)
phe <- read.table("phenotype-numbersall.txt",sep = "\t",header = T,stringsAsFactors = F)
for (i in 1:nrow(a)){
  if(length(intersect(grep(paste0("^",a[i,"cancer"],"$"),phe[,"cancer"]),grep(paste0("^",a[i,"phenotype"],"$"),phe[,"phenotype1"]))) != 0){
    a[i,"phenotype1"] <- str_c(phe[intersect(grep(paste0("^",a[i,"cancer"],"$"),phe[,"cancer"]),grep(paste0("^",a[i,"phenotype"],"$"),phe[,"phenotype1"])),"phenotype2"],collapse = ";")
    a[i,"phenotypenumbers"] <- str_c(phe[intersect(grep(paste0("^",a[i,"cancer"],"$"),phe[,"cancer"]),grep(paste0("^",a[i,"phenotype"],"$"),phe[,"phenotype1"])),"Numbers"],collapse = ";")
  }
}
#bx <- read.table("表型英汉.txt",sep = "\t",header = T,stringsAsFactors = F)
#a <- merge(a,bx,all.x = T)
#write.table(a,"all-data.txt",sep = "\t",col.names = T,row.names = F,quote = F)




######################
# 免疫亚型的表达分布 #
######################
## 在immuno文章中5个基因聚类集合
rm(list = ls())
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(ggplot2)
library(reshape2)
ImmCharacteristics <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",sep = "\t",header = T,row.names = 1)
imm <- ImmCharacteristics[,c("Wound.Healing","Macrophage.Regulation","Lymphocyte.Infiltration.Signature.Score",
                             "IFN.gamma.Response","TGF.beta.Response")]

plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F,row.names = 1)
  imm1 <- imm
  imm1 <- sweep(imm1,2, apply(imm1,2,median,na.rm=T))
  #imm1 <- as.data.frame(scale(imm1))
  imm1[intersect(rownames(imm1),rownames(class)),"Group"] <- class[intersect(rownames(imm1),rownames(class)),"V2"]
  imm1 <- na.omit(imm1)
  imm1 <- melt(imm1,id.vars = "Group")
  imm1$Group <- factor(imm1$Group,labels = paste("Subtype",unique(sort(imm1$Group))))
  imm1$sp <- paste(imm1$Group,imm1$variable)
  immlist <- split(imm1,imm1$sp)
  for (j in names(immlist)){
    imm1[imm1$sp == j,"Avg"] <- mean(immlist[[j]]$value)
  }
  p <- ggplot(imm1,aes(x = value,..density..,fill = Avg,colours = Avg))
  p + geom_histogram(alpha = 0.7,bins = 30) +
    geom_density(alpha=0.4) +
    scale_fill_gradient(low = "#330867",high = "#fee140") +
    geom_vline(xintercept = 0,linetype="dashed") +
    facet_grid(Group ~ variable) +
    xlab("z score") +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          #strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  # ggsave(paste0(can,"/plot/",i,"-",dir,"-免疫亚型在5个基因集聚类分布.pdf"),width = 7,height = 7)
  
}
for (dir in setdiff(dir(),"plot")){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    pdf(paste0("plot/immunocharacter/",dir,"-免疫亚型在5个基因集聚类分布.pdf"),width = 30,height = 27)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}



## TCR BCR


ImmCharacteristics <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",sep = "\t",header = T)

plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
  imm <- merge(ImmCharacteristics[,c("TCGA.Participant.Barcode","BCR.Shannon","BCR.Richness","BCR.Evenness",
                                     "TCR.Shannon","TCR.Richness","TCR.Evenness")],
               class,by.x = "TCGA.Participant.Barcode",by.y = "V1")
  imm$BCR.Richness <- log10(imm$BCR.Richness + 1)
  imm$TCR.Richness <- log10(imm$TCR.Richness + 1)
  #imm$TCR.Evenness[imm$TCR.Evenness < 0.9] <- NA
  #imm[,2:7] <- scale(imm[,2:7])
  imm <- melt(imm[,2:8],id.vars = "V2")
  imm$facet <- as.factor(gsub("\\..*$","",imm$variable))
  imm$V2 <- factor(imm$V2,labels = paste("Subtype",unique(sort(imm$V2))))
  imm$variable <- as.factor(gsub("^.*\\.","",imm$variable))
  p <- ggplot(imm,aes(x = V2, y = value,fill = V2))
  p + geom_boxplot(outlier.size = 0.1,alpha = 0.9) +
    scale_fill_manual(values=c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
    #breaks=c("Evenness", "Richness", "Shannon"),)) +
    labs(x = c("Evenness", "log10(Richness+1)", "Entropy(Shannon)"),y = "score") +
    facet_wrap(facet ~ variable,scales="free_y") +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          legend.position = "top",
          legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          #strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  #ggsave(paste0(can,"/plot/",i,"-",dir,"-TCRBCR分布.pdf"),width = 7,height = 7)
  
}


for (dir in setdiff(dir(),"plot")){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    pdf(paste0("plot/immunocharacter/",dir,"-TCRBCR分布.pdf"),width = 33,height = 22)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}


## 亚型的显著性数值热图wilcoxon秩和检验
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(ggplot2)
library(reshape2)
library(easyGgplot2)
ImmCharacteristics <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",sep = "\t",header = T)
color <- data.frame(color = c("#CD2626","#DC6767","#EBA8A8","#EBD6D5"),
                    wil = c("<=0.001","<=0.01" ,"<=0.05",">0.05" ),stringsAsFactors = F)
wilcoxon <- data.frame()
plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
  imm <- merge(ImmCharacteristics[,c("TCGA.Participant.Barcode","BCR.Shannon","BCR.Richness","BCR.Evenness",
                                     "TCR.Shannon","TCR.Richness","TCR.Evenness")],
               class,by.x = "TCGA.Participant.Barcode",by.y = "V1")
  imm$BCR.Richness <- log10(imm$BCR.Richness + 1)
  imm$TCR.Richness <- log10(imm$TCR.Richness + 1)
  immlist <- split(imm[,2:7],imm$V2)
  exclist <- list()
  wil <- data.frame()
  for (j in colnames(imm)[2:7]){
    exclist[[j]] <- matrix("",nrow = i,ncol = i,dimnames = list(names(immlist),names(immlist)))
    for (group1 in names(immlist)[1:(length(names(immlist))-1)]){
      if (sum(length(na.omit(immlist[[group1]][,j]))) == 0){next}
      for (group2 in names(immlist)[(grep(group1,names(immlist))+1):length(names(immlist))]){
        if (sum(length(na.omit(immlist[[group2]][,j]))) == 0 | isTRUE(na.omit(immlist[[group1]][,j]) == na.omit(immlist[[group2]][,j]))){next}
        p.value <- wilcox.test(immlist[[group1]][,j],immlist[[group2]][,j])$p.value
        if (p.value <= 0.05){exclist[[j]][group1,group2] <- "*"}
        if (p.value <= 0.01){exclist[[j]][group1,group2] <- "**"}
        if (p.value <= 0.001){exclist[[j]][group1,group2] <- "***"}
        wil <- rbind(wil,data.frame(method = dir,Character = j, Group = i,
                                    Group1 = group1,Group2 = group2,Wilcoxon = p.value,
                                    wil = ifelse(p.value <= 0.05,ifelse(p.value <= 0.01,ifelse(p.value <= 0.001,"<=0.001","<=0.01"),"<=0.05"),">0.05")))
      }
    }
  }
  wil$Group1 <- factor(wil$Group1,levels = sort(levels(wil$Group1),decreasing = T))
  wil$wil <- factor(wil$wil,levels = sort(levels(wil$wil)))
  wil <- merge(wil,color)
  wil$color <- factor(wil$color,levels = sort(unique(wil$color)))
  p <- ggplot(wil, aes(Group2, Group1))
  p + geom_tile(aes(fill = wil),colour = "white") + 
    labs(title = paste(i,"groups",dir)) +
    scale_fill_manual(values = levels(wil$color)) +
    facet_wrap(~ Character,ncol = 2) +
    geom_text(aes(label = signif(Wilcoxon,2)),size = 0.8) +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_blank(),
          axis.title = element_blank(),
          strip.background = element_blank(),
          #strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  #ggsave(paste0("plot/",i,"-",dir,"-白细胞等分布wilcoxon.pdf"),width = 7,height = 10)
  
}
for (dir in setdiff(dir(),c(dir(pattern = ".pdf"),"plot"))){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    wilcoxon <- rbind(wilcoxon,p2$data,p3$data,p4$data,p5$data,p6$data,p7$data,p8$data,p9$data,p10$data)
    pdf(paste0("plot/immunocharacter/",dir,"-TCRBCR分布wilcoxon.pdf"),width = 12,height = 18)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}

write.table(wilcoxon,"plot/immunocharacter/TCRBCR分布秩和检验.txt",sep = "\t",quote = F,row.names = F,col.names = T)



#### -- 两个特征的timer -- ####
rm(list = ls())
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(ggplot2)
library(reshape2)
library(easyGgplot2)
imm <- read.table("f:/datahe/immuno/data/immuneEstimation.txt",sep = "\t",header = T,row.names = 1)
imm <- imm[apply(imm,1,sum) != 0,]        # ------ 去除在6个免疫中都不表达的样本
imm  <- imm[grep("-01",rownames(imm)),]
rownames(imm) <- gsub("-..$","",rownames(imm))

plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F,row.names = 1)
  #class$V2[class$V2 == 1 | class$V2 == 2] <- "Cold Tumors"
  #class$V2[class$V2 == 3 | class$V2 == 4 | class$V2 == 5] <- "Hot Tumors"
  imm1 <- imm
  imm1 <- sweep(imm1,2, apply(imm1,2,median,na.rm=T))
  imm1[intersect(rownames(imm1),rownames(class)),"Group"] <- class[intersect(rownames(imm1),rownames(class)),"V2"]
  imm1 <- na.omit(imm1)
  imm1 <- melt(imm1,id.vars = "Group")
  imm1$Group <- factor(imm1$Group,labels = paste("Subtype",unique(sort(imm1$Group))))
  imm1$sp <- paste(imm1$Group,imm1$variable)
  immlist <- split(imm1,imm1$sp)
  for (j in names(immlist)){
    imm1[imm1$sp == j,"Avg"] <- mean(immlist[[j]]$value)
  }
  p <- ggplot(imm1,aes(x = value,..density..,fill = Avg,colours = Avg))
  p + geom_histogram(alpha = 0.7,bins = 40) +
    geom_density(alpha=0.4) +
    scale_fill_gradient(low = "#330867",high = "#fee140") +
    geom_vline(aes(xintercept = Avg),linetype="dashed") +
    facet_grid(Group ~ variable) +
    xlab("z score") +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          #strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  #ggsave(paste0("plot/timer分布.pdf"),width = 15,height = 5)
  
}




for (dir in setdiff(dir(),"plot")){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    pdf(paste0("plot/immunocharacter/",dir,"-timer-免疫亚型在6个微环境中的分布.pdf"),width = 30,height = 27)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}


#### -- 两个特征的epic -- ####
rm(list = ls())
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(ggplot2)
library(reshape2)
library(easyGgplot2)
imm <- read.table("f:/datahe/immuno/EPIC/data/EPIC.txt",sep = "\t",header = T,row.names = 1)
imm <- imm[apply(imm,1,sum) != 0,]        # ------ 去除在6个免疫中都不表达的样本

plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F,row.names = 1)
  #class$V2[class$V2 == 1 | class$V2 == 2] <- "Cold Tumors"
  #class$V2[class$V2 == 3 | class$V2 == 4 | class$V2 == 5] <- "Hot Tumors"
  imm1 <- as.data.frame(scale(imm[,-7]))
  #imm1 <- sweep(imm[,-8],2, apply(imm[,-8],2,median,na.rm=T))
  imm1[intersect(rownames(imm1),rownames(class)),"Group"] <- class[intersect(rownames(imm1),rownames(class)),"V2"]
  imm1 <- na.omit(imm1)
  imm1 <- melt(imm1,id.vars = "Group")
  imm1$Group <- factor(imm1$Group,labels = paste("Subtype",unique(sort(imm1$Group))))
  imm1$sp <- paste(imm1$Group,imm1$variable)
  immlist <- split(imm1,imm1$sp)
  for (j in names(immlist)){
    imm1[imm1$sp == j,"Avg"] <- mean(immlist[[j]]$value)
  }
  p <- ggplot(imm1,aes(x = value,..density..,fill = Avg,colours = Avg))
  p + geom_histogram(alpha = 0.7,bins = 40) +
    geom_density(alpha=0.4) +
    scale_fill_gradient(low = "#330867",high = "#fee140") +
    geom_vline(aes(xintercept = Avg),linetype="dashed") +
    scale_y_continuous(limits = c(0,3)) +
    scale_x_continuous(limits = c(-3,15)) +
    facet_grid(Group ~ variable) +
    xlab("z score") +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          #strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  #ggsave(paste0("plot/immunocharacter/",i,"-",dir,"-免疫亚型在6个微环境中的分布.pdf"),width = 7,height = 7)
  
}




for (dir in setdiff(dir(),"plot")){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    pdf(paste0("plot/immunocharacter/",dir,"-epic-免疫亚型在6个微环境中的分布.pdf"),width = 18,height = 15)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}

## 在immuno文章中5个基因聚类集合
rm(list = ls())
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(ggplot2)
library(reshape2)
ImmCharacteristics <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",sep = "\t",header = T,row.names = 1)
imm <- ImmCharacteristics[,c("Wound.Healing","Macrophage.Regulation","Lymphocyte.Infiltration.Signature.Score",
                             "IFN.gamma.Response","TGF.beta.Response")]

plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F,row.names = 1)
  imm1 <- imm
  imm1 <- sweep(imm1,2, apply(imm1,2,median,na.rm=T))
  #imm1 <- as.data.frame(scale(imm1))
  imm1[intersect(rownames(imm1),rownames(class)),"Group"] <- class[intersect(rownames(imm1),rownames(class)),"V2"]
  imm1 <- na.omit(imm1)
  imm1 <- melt(imm1,id.vars = "Group")
  imm1$Group <- factor(imm1$Group,labels = paste("Subtype",unique(sort(imm1$Group))))
  imm1$sp <- paste(imm1$Group,imm1$variable)
  immlist <- split(imm1,imm1$sp)
  for (j in names(immlist)){
    imm1[imm1$sp == j,"Avg"] <- mean(immlist[[j]]$value)
  }
  p <- ggplot(imm1,aes(x = value,..density..,fill = Avg,colours = Avg))
  p + geom_histogram(alpha = 0.7,bins = 30) +
    geom_density(alpha=0.4) +
    scale_fill_gradient(low = "#330867",high = "#fee140") +
    geom_vline(xintercept = 0,linetype="dashed") +
    facet_grid(Group ~ variable) +
    xlab("z score") +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          #strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  # ggsave(paste0(can,"/plot/",i,"-",dir,"-免疫亚型在5个基因集聚类分布.pdf"),width = 7,height = 7)
  
}
for (dir in setdiff(dir(),"plot")){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    pdf(paste0("plot/immunocharacter/",dir,"-epic-免疫亚型在5个基因集聚类分布.pdf"),width = 18,height = 15)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}






ImmCharacteristics <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",sep = "\t",header = T)

plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
  imm <- merge(ImmCharacteristics[,c("TCGA.Participant.Barcode","BCR.Shannon","BCR.Richness","BCR.Evenness",
                                     "TCR.Shannon","TCR.Richness","TCR.Evenness")],
               class,by.x = "TCGA.Participant.Barcode",by.y = "V1")
  imm$BCR.Richness <- log10(imm$BCR.Richness + 1)
  imm$TCR.Richness <- log10(imm$TCR.Richness + 1)
  imm[,2:7] <- scale(imm[,2:7])
  imm <- melt(imm[,2:8],id.vars = "V2")
  imm$facet <- as.factor(gsub("\\..*$","",imm$variable))
  imm$V2 <- factor(imm$V2,labels = paste("Subtype",unique(sort(imm$V2))))
  imm$variable <- as.factor(gsub("^.*\\.","",imm$variable))
  p <- ggplot(imm,aes(x = V2, y = value,fill = variable))
  p + geom_boxplot(outlier.size = 0.1,alpha = 0.9) +
    scale_fill_manual(values=c("#FFBA5A","#FF7657","#665C84"),
                      #breaks=c("Evenness", "Richness", "Shannon"),
                      labels=c("Evenness", "log10(Richness+1)", "Entropy(Shannon)")) +
    labs(x = NULL,y = "score") +
    facet_grid(facet ~ .,scales="free_y") +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          legend.position = "top",
          legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          #strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  #ggsave(paste0(can,"/plot/",i,"-",dir,"-TCRBCR分布.pdf"),width = 7,height = 7)
  
}


for (dir in setdiff(dir(),"plot")){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    pdf(paste0("plot/immunocharacter/",dir,"-epic-TCRBCR分布.pdf"),width = 18,height = 15)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}


#### -- 两个特征的mcp -- ####
rm(list = ls())
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(ggplot2)
library(reshape2)
library(easyGgplot2)
imm <- read.table("f:/datahe/immuno/MCP/data/MCP.txt",sep = "\t",header = T,row.names = 1)
imm <- imm[apply(imm,1,sum) != 0,]        # ------ 去除在6个免疫中都不表达的样本


plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F,row.names = 1)
  imm1 <- imm
  imm1 <- sweep(imm1,2, apply(imm1,2,median,na.rm=T))
  imm1[intersect(rownames(imm1),rownames(class)),"Group"] <- class[intersect(rownames(imm1),rownames(class)),"V2"]
  imm1 <- na.omit(imm1)
  imm1 <- melt(imm1,id.vars = "Group")
  imm1$Group <- factor(imm1$Group,labels = paste("Subtype",unique(sort(imm1$Group))))
  imm1$sp <- paste(imm1$Group,imm1$variable)
  immlist <- split(imm1,imm1$sp)
  for (j in names(immlist)){
    imm1[imm1$sp == j,"Avg"] <- mean(immlist[[j]]$value)
  }
  p <- ggplot(imm1,aes(x = value,..density..,fill = Avg,colours = Avg))
  p + geom_histogram(alpha = 0.7,bins = 40) +
    geom_density(alpha=0.4) +
    scale_fill_gradient(low = "#330867",high = "#fee140") +
    geom_vline(aes(xintercept = Avg),linetype="dashed") +
    facet_grid(Group ~ variable) +
    xlab("z score") +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          #strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  #ggsave(paste0("plot/immunocharacter/",i,"-",dir,"-免疫亚型在6个微环境中的分布.pdf"),width = 7,height = 7)
  
}




for (dir in setdiff(dir(),"plot")){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    pdf(paste0("plot/immunocharacter/",dir,"-mcp-免疫亚型在6个微环境中的分布.pdf"),width = 18,height = 15)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}

## 在immuno文章中5个基因聚类集合
rm(list = ls())
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(ggplot2)
library(reshape2)
ImmCharacteristics <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",sep = "\t",header = T,row.names = 1)
imm <- ImmCharacteristics[,c("Wound.Healing","Macrophage.Regulation","Lymphocyte.Infiltration.Signature.Score",
                             "IFN.gamma.Response","TGF.beta.Response")]

plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F,row.names = 1)
  imm1 <- imm
  imm1 <- sweep(imm1,2, apply(imm1,2,median,na.rm=T))
  #imm1 <- as.data.frame(scale(imm1))
  imm1[intersect(rownames(imm1),rownames(class)),"Group"] <- class[intersect(rownames(imm1),rownames(class)),"V2"]
  imm1 <- na.omit(imm1)
  imm1 <- melt(imm1,id.vars = "Group")
  imm1$Group <- factor(imm1$Group,labels = paste("Subtype",unique(sort(imm1$Group))))
  imm1$sp <- paste(imm1$Group,imm1$variable)
  immlist <- split(imm1,imm1$sp)
  for (j in names(immlist)){
    imm1[imm1$sp == j,"Avg"] <- mean(immlist[[j]]$value)
  }
  p <- ggplot(imm1,aes(x = value,..density..,fill = Avg,colours = Avg))
  p + geom_histogram(alpha = 0.7,bins = 30) +
    geom_density(alpha=0.4) +
    scale_fill_gradient(low = "#330867",high = "#fee140") +
    geom_vline(xintercept = 0,linetype="dashed") +
    facet_grid(Group ~ variable) +
    xlab("z score") +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          #strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  # ggsave(paste0(can,"/plot/",i,"-",dir,"-免疫亚型在5个基因集聚类分布.pdf"),width = 7,height = 7)
  
}
for (dir in setdiff(dir(),"plot")){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    pdf(paste0("plot/immunocharacter/",dir,"-mcp-免疫亚型在5个基因集聚类分布.pdf"),width = 18,height = 15)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}






ImmCharacteristics <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",sep = "\t",header = T)

plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
  imm <- merge(ImmCharacteristics[,c("TCGA.Participant.Barcode","BCR.Shannon","BCR.Richness","BCR.Evenness",
                                     "TCR.Shannon","TCR.Richness","TCR.Evenness")],
               class,by.x = "TCGA.Participant.Barcode",by.y = "V1")
  imm$BCR.Richness <- log10(imm$BCR.Richness + 1)
  imm$TCR.Richness <- log10(imm$TCR.Richness + 1)
  imm[,2:7] <- scale(imm[,2:7])
  imm <- melt(imm[,2:8],id.vars = "V2")
  imm$facet <- as.factor(gsub("\\..*$","",imm$variable))
  imm$V2 <- factor(imm$V2,labels = paste("Subtype",unique(sort(imm$V2))))
  imm$variable <- as.factor(gsub("^.*\\.","",imm$variable))
  p <- ggplot(imm,aes(x = V2, y = value,fill = variable))
  p + geom_boxplot(outlier.size = 0.1,alpha = 0.9) +
    scale_fill_manual(values=c("#FFBA5A","#FF7657","#665C84"),
                      #breaks=c("Evenness", "Richness", "Shannon"),
                      labels=c("Evenness", "log10(Richness+1)", "Entropy(Shannon)")) +
    labs(x = NULL,y = "score") +
    facet_grid(facet ~ .,scales="free_y") +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          legend.position = "top",
          legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          #strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  #ggsave(paste0(can,"/plot/",i,"-",dir,"-TCRBCR分布.pdf"),width = 7,height = 7)
  
}


for (dir in setdiff(dir(),"plot")){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    pdf(paste0("plot/immunocharacter/",dir,"-mcp-TCRBCR分布.pdf"),width = 18,height = 15)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}



########################
# 免疫表型的预后相关性 # cox ggplot(pheatmap)
########################
## 单cox回归分析(Univariate Analysis)
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(pheatmap)
library(survival)
library(reshape2)
imm <- read.table("f:/datahe/immuno/data/immuneEstimation.txt",sep = "\t",header = T,row.names = 1)
colnames(imm) <- paste0("TIMER_",colnames(imm))
epic <- read.table("f:/datahe/immuno/EPIC/data/EPIC.txt",sep = "\t",header = T,row.names = 1)
colnames(epic) <- paste0("EPIC_",colnames(epic))
mcp <- read.table("f:/datahe/immuno/MCP/data/MCP.txt",sep = "\t",header = T,row.names = 1)
colnames(mcp) <- paste0("MCP_",colnames(mcp))
ImmCharacteristics <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",sep = "\t",header = T,row.names = 1)
imm <- imm[apply(imm,1,sum) != 0,]        # ------ 去除在6个免疫中都不表达的样本
imm  <- imm[grep("-01",rownames(imm)),]
rownames(imm) <- gsub("-..$","",rownames(imm))
sample <- intersect(rownames(ImmCharacteristics),intersect(rownames(imm),intersect(rownames(epic),rownames(mcp))))
imm <- imm[sample,]
epic <- epic[sample,]
mcp <- mcp[sample,]
imm <- cbind(imm,epic,mcp,ImmCharacteristics[sample,c("Wound.Healing","Macrophage.Regulation","Lymphocyte.Infiltration.Signature.Score",
                                                    "IFN.gamma.Response","TGF.beta.Response","Th1.Cells","Th2.Cells","Th17.Cells")])
## 提取癌症样本
cancer <- read.table("f:/datahe/immuno/data/Result2.txt",sep = "\t",header = T,stringsAsFactors = F)
cancerid <- levels(factor(cancer$project_id))
cancerid <- setdiff(cancerid,c("LAML"))
cancer$days_to_death.x[cancer$days_to_death.x == "NULL"] <- cancer$days_to_last_follow_up[cancer$days_to_death.x == "NULL"]
cancer$days_to_death.x[cancer$days_to_death.x == "NULL"] <- NA
cancer$days_to_death.x[cancer$days_to_death.x == ""] <- NA
cancer$days_to_death.x <- as.numeric(cancer$days_to_death.x)
cancer$vital_status.x[cancer$vital_status.x == "alive"] <- 0
cancer$vital_status.x[cancer$vital_status.x == "dead"] <- 1
cancer$vital_status.x[cancer$vital_status.x == "notreported"] <- NA
cancer$vital_status.x[cancer$vital_status.x == ""] <- NA
cancer$vital_status.x <- as.numeric(cancer$vital_status.x)

# 细胞
imm <- read.table("f:/datahe/immuno/3-co-consensus/imm.txt",sep = "\t",stringsAsFactors = F,header = T)
class <- read.csv("pam-manhattan/pam-manhattan.k=5.consensusClass.csv",header = F,stringsAsFactors = F,row.names = 1)
imm <- cbind(imm[intersect(intersect(rownames(imm),rownames(class)),rownames(ImmCharacteristics)),],
             ImmCharacteristics[intersect(intersect(rownames(imm),rownames(class)),rownames(ImmCharacteristics)),c("OS","OS.Time","PFI","PFI.Time")],
             class[intersect(intersect(rownames(imm),rownames(class)),rownames(ImmCharacteristics)),])
colnames(imm)[7] <- "class"
imm$mean <- apply(imm[,1:2],1,mean)
immlist <- split(imm,imm$class)
all <- data.frame()
for(i in names(immlist)){
  single_cox <- summary(coxph(Surv(PFI.Time, PFI) ~ mean,data = immlist[[i]]))
  s1 <- single_cox$coefficients
  s <- cbind(s1,single_cox$conf.int)
  all <- rbind(all,s)
}
cox <- summary(coxph(Surv(PFI.Time, PFI) ~ class,data = imm))
cox <- summary(coxph(Surv(OS.Time, OS) ~ class,data = imm))

#cox <- as.data.frame(cbind(cox$coefficients[cox$coefficients[,"Pr(>|z|)"] <= 0.05,],cox$conf.int[cox$coefficients[,"Pr(>|z|)"] <= 0.05,]))
cox <- as.data.frame(cbind(cox$coefficients,cox$conf.int))

cox$class <- factor(rownames(cox),levels = sort(rownames(cox),decreasing = T))

cox$HR[cox$coef < 1] <- "Low risk"
cox$HR[cox$coef >= 1] <- "High risk"
#cox$p_value[cox$p >= 0.05] <- ">= 0.05"
#cox$p_value[cox$p < 0.05] <- "< 0.05"
#cox$p_value[cox$p < 0.01] <- "< 0.01"
#cox$p_value[cox$p < 0.001] <- "< 0.001"
#cox$p_value <- factor(cox$p_value,labels = c(">= 0.05","< 0.05","< 0.01","< 0.001"))

colnames(cox)[c(8,9)] <- "CI"
cox <- rbind(cox[,c(1:8,10:11)],cox[,c(1:7,9:11)])



p <- ggplot(cox,aes(y = class,x = CI))
p + geom_line(aes(color = HR),size = 1) +
  geom_point(aes(x = exp(coef),fill = HR,color = HR),size = 3,shape = 22) +
  geom_vline(xintercept = 1,linetype="dashed",color = "grey30") +
  #scale_color_gradient(low = "white",high = "firebrick3",limits = c(0,round(max(na.omit(CI$CI)),1)),breaks = c(seq(0,round(max(na.omit(CI$CI)),1),0.1))) +
  scale_fill_manual(values = c("firebrick3","#40812C")) +
  scale_color_manual(values = c("firebrick3","#40812C")) +
  #facet_grid(. ~ Subgroup,scales = "free_x")+ 
  #scale_x_continuous(breaks  =  NULL) +
  
  theme(axis.text.x = element_text(size = 10,color = "black"),
        axis.text.y = element_text(size = 10),
        legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_text(size = 8,color = "black"),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
ggsave(paste0("plot/PFI.pdf"),width = 8,height = 5)





# 特征
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(pheatmap)
library(survival)
library(reshape2)
ImmCharacteristics <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",sep = "\t",header = T,row.names = 1)
imm <- ImmCharacteristics[,c("OS","OS.Time","PFI","PFI.Time","Wound.Healing","Macrophage.Regulation","Lymphocyte.Infiltration.Signature.Score",
                             "IFN.gamma.Response","TGF.beta.Response","Th1.Cells","Th2.Cells","Th17.Cells",
                             "Leukocyte.Fraction","SNV.Neoantigens","Indel.Neoantigens","Proliferation",
                             "Aneuploidy.Score","Intratumor.Heterogeneity","CTA.Score")]



for (dir in setdiff(dir(),"plot")){
  tryCatch({
    for (i in 2:10){
      class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F,row.names = 1)
      #cancerk <- merge(cancer,class,by.x = "submitter_id",by.y = "V1")
      #cancerk <- cancerk[c("submitter_id","vital_status.x","days_to_death.x","V2")]
      immk <- imm
      immk <- merge(class,immk,by = 0)
      rownames(immk) <- immk$Row.names
      immk <- immk[,-1]
      #immk$submitter_id <- rownames(immk)
      #immk <- merge(cancerk,immk)
      #rownames(immk) <- immk$submitter_id
      #immk <- immk[,-1]

      cat("immunocharacter","Subgroup","coef","exp(coef)","se(coef)","z","p","exp(coef)","exp(-coef)","lower .95","upper .95","\n",
          file = paste0("plot/immunocharacter/单coxPFI.txt"),sep = "\t",append = T)
      for (l in 1:length(immlist)){
        for (ll in 6:length(colnames(immlist[[l]]))){
          single_cox <- summary(coxph(Surv(PFI.Time, PFI) ~ immlist[[l]][,ll],data = immlist[[l]]))
          cat(colnames(immk)[ll],paste("Subtype",l),single_cox$coefficients[1,],single_cox$conf.int[1,],"\n",
              file = paste0("plot/immunocharacter/单coxPFI.txt"),sep = "\t",append = T)
        }
      }
      
      cox <- read.table("plot/immunocharacter/单coxPFI.txt",sep = "\t",header = T,stringsAsFactors = F)
      cox <- cox[cox$p <= 0.01,]
      cox$immunocharacter <- factor(cox$immunocharacter,levels = unique(cox$immunocharacter[order(cox$exp.coef.)]))
      
      cox$HR[cox$exp.coef. < 1] <- "Low risk"
      cox$HR[cox$exp.coef. >= 1] <- "High risk"
      #cox$p_value[cox$p >= 0.05] <- ">= 0.05"
      #cox$p_value[cox$p < 0.05] <- "< 0.05"
      #cox$p_value[cox$p < 0.01] <- "< 0.01"
      #cox$p_value[cox$p < 0.001] <- "< 0.001"
      #cox$p_value <- factor(cox$p_value,labels = c(">= 0.05","< 0.05","< 0.01","< 0.001"))
      
      colnames(cox)[c(10,11)] <- "CI"
      cox <- rbind(cox[,c(1:10,12:13)],cox[,c(1:9,11:13)])
      
      
      p <- ggplot(cox,aes(y = immunocharacter,x = log10(CI)))
      p + geom_line(aes(color = HR),size = 1) +
        geom_point(aes(x = log10(exp.coef.),fill = HR,color = HR),size = 3,shape = 22) +
        geom_vline(xintercept = 0,linetype="dashed",color = "grey30") +
        #scale_color_gradient(low = "white",high = "firebrick3",limits = c(0,round(max(na.omit(CI$CI)),1)),breaks = c(seq(0,round(max(na.omit(CI$CI)),1),0.1))) +
        scale_fill_manual(values = c("firebrick3","#40812C")) +
        scale_color_manual(values = c("firebrick3","#40812C")) +
        facet_grid(. ~ Subgroup,scales = "free_x")+ 
        #scale_x_continuous(breaks  =  NULL) +
        
        theme(axis.text.x = element_text(size = 10,angle = 90,color = "black"),
              axis.text.y = element_text(size = 10),
              legend.position = "top",
              #legend.background = element_rect(fill="transparent", size=.5),
              axis.line = element_line(size = 0.5, colour = "black"),
              axis.title = element_blank(),
              strip.background = element_blank(),
              strip.text = element_text(size = 8,color = "black"),
              panel.background = element_blank(),
              panel.border = element_blank(),
              panel.grid = element_blank())
      ggsave(paste0("plot/Immunocharacter/",i,"-",dir,"-HRPFI.pdf"),width = 8,height = 5)
      
      p <- ggplot(cox,aes(y = immunocharacter,x = log10(CI)))
      p + geom_line(aes(color = CI),size = 2) +
        geom_point(aes(x = HR,fill = HR1,size = p_value1),shape = 22) +
        geom_vline(xintercept = 1,linetype="dashed",color = "grey30") +
        scale_color_gradient(low = "white",high = "firebrick3",limits = c(0,round(max(na.omit(CI$CI)),1)),breaks = c(seq(0,round(max(na.omit(CI$CI)),1),0.1))) +
        scale_fill_manual(values = c("firebrick3","steelblue")) +
        facet_grid(. ~ Var2,scales = "free_x")+ 
        #scale_x_continuous(breaks  =  NULL) +
        scale_x_continuous(limits = c(0,10)) +
        
        theme(axis.text.x = element_text(size = 10,angle = 90),
              axis.text.y = element_text(size = 10),
              legend.position = "top",
              #legend.background = element_rect(fill="transparent", size=.5),
              axis.line = element_line(size = 0.5, colour = "black"),
              axis.title = element_blank(),
              strip.background = element_blank(),
              strip.text = element_text(angle = 45),
              panel.background = element_blank(),
              panel.border = element_blank(),
              panel.grid = element_blank())
      ggsave(paste0("plot/Immunocharacter/",i,"-",dir,"-CI.pdf"),width = 10,height = 10)
      
    
    }
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}





HR[1:6,] <- scale(log10(HR[1:6,]),center = rep(0,i))
HR[7:14,] <- scale(log10(HR[7:14,]),center = rep(0,i))
HR[14:24,] <- scale(log10(HR[14:24,]),center = rep(0,i))
HR[25:29,] <- scale(log10(HR[25:29,]),center = rep(0,i))
HR[30:32,] <- scale(log10(HR[30:32,]),center = rep(0,i))

HR[1:6,] <- log10(HR[1:6,])/max(abs(log10(HR[1:6,])))
HR[7:14,] <- log10(HR[7:14,])/max(abs(log10(HR[7:14,][!is.infinite(HR[7:14,])])))
HR[15:24,] <- log10(HR[15:24,])/max(abs(log10(HR[15:24,])))
HR[25:29,] <- log10(HR[25:29,])/max(abs(log10(HR[25:29,])))
HR[30:32,] <- log10(HR[30:32,])/max(abs(log10(HR[30:32,])))


#dir.create(paste0(getwd(),"/",can,"/plot"))
pheatmap(CI,fontsize=9, fontsize_row=6,gaps_row = c(6,14,24,29),
         colorRampPalette(c("white", "firebrick3"))(length(seq(0,round(max(CI),1),0.1))),
         cluster_cols = F,cluster_rows = F, cellwidth = 50, cellheight = 30,
         border_color = "white",
         display_numbers = T,main = paste(i,dir,"CI"),
         breaks = seq(0,round(max(CI),1),0.1),
         legend_break = seq(0,round(max(CI),1),0.1),
         filename = paste0("plot/Immunocharacter/",i,"-",dir,"-CI.pdf"))

pheatmap(HR,fontsize=9, fontsize_row=6,gaps_row = c(6,14,24,29),
         colorRampPalette(c("steelblue","white","firebrick3"))(length(seq(-ceiling(max(HR[!is.na(HR) & !is.infinite(HR)])),
                                                                          ceiling(max(HR[!is.na(HR) & !is.infinite(HR)])),0.1))),
         cluster_cols = F,cluster_rows = F, cellwidth = 50, cellheight = 30,
         display_numbers = T,main = paste(i,dir,"scale(log10(HR))"),
         breaks = seq(-ceiling(max(HR[!is.na(HR) & !is.infinite(HR)])),
                      ceiling(max(HR[!is.na(HR) & !is.infinite(HR)])),0.1),
         legend_break = seq(-ceiling(max(HR[!is.na(HR) & !is.infinite(HR)])),
                            ceiling(max(HR[!is.na(HR) & !is.infinite(HR)])),0.1),
         filename = paste0("plot/Immunocharacter/",i,"-",dir,"-HR.pdf"))


pheatmap(HR,fontsize=9, fontsize_row=6,gaps_row = c(6,14,24,29),
         colorRampPalette(c("steelblue","white","firebrick3"))(length(seq(-ceiling(max(abs(scale(log10(HR),center = rep(0,i)))[!is.na(scale(log10(HR),center = rep(0,i)))])),
                                                                          ceiling(max(abs(scale(log10(HR),center = rep(0,i)))[!is.na(scale(log10(HR),center = rep(0,i)))])),0.5))),
         cluster_cols = F,cluster_rows = F, cellwidth = 50, cellheight = 30,
         display_numbers = T,main = paste(i,dir,"scale(log10(HR))"),
         breaks = seq(-ceiling(max(abs(scale(log10(HR),center = rep(0,i)))[!is.na(scale(log10(HR),center = rep(0,i)))])),
                      ceiling(max(abs(scale(log10(HR),center = rep(0,i)))[!is.na(scale(log10(HR),center = rep(0,i)))])),0.5),
         legend_break = seq(-ceiling(max(abs(scale(log10(HR),center = rep(0,i)))[!is.na(scale(log10(HR),center = rep(0,i)))])),
                            ceiling(max(abs(scale(log10(HR),center = rep(0,i)))[!is.na(scale(log10(HR),center = rep(0,i)))])),0.5),
         filename = paste0("plot/Immunocharacter/",i,"-",dir,"-HR.pdf"))
##################################
# 白细胞分数等在免疫亚型中的分布 # boxplot facet !!
##################################
# Timer 中的含免疫分数的样本在immuno文章中的白细胞分数
## 亚型的boxplot 
rm(list = ls())
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(ggplot2)
library(reshape2)
library(easyGgplot2)
ImmCharacteristics <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",sep = "\t",header = T)
plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
  imm <- merge(ImmCharacteristics[,c("TCGA.Participant.Barcode","Leukocyte.Fraction","Th1.Cells","Th2.Cells",
                                     "Th17.Cells","SNV.Neoantigens","Indel.Neoantigens","Proliferation",
                                     "Aneuploidy.Score","Intratumor.Heterogeneity",
                                     "CTA.Score")],class,by.x = "TCGA.Participant.Barcode",by.y = "V1")
  imm$SNV.Neoantigens <- log10(imm$SNV.Neoantigens + 1)
  imm$Indel.Neoantigens <- log10(imm$Indel.Neoantigens + 1)
  #imm$TCR.Evenness <- exp(imm$TCR.Evenness)
  #imm$BCR.Evenness <- exp(imm$BCR.Evenness)
  
  immlist <- split(imm[,2:11],imm$V2)
  imm <- melt(imm[,2:12],id.vars = "V2")
  imm$V2 <- factor(imm$V2,labels = paste("Subtype",unique(sort(imm$V2))))
  p <- ggplot(imm,aes(x = V2, y = value,fill = V2))
  p + geom_violin(color = "grey50",color = "grey30") +
    geom_boxplot(aes(color = V2),outlier.size = 0.1,alpha = 0.7,fill = "white") +
    #geom_jitter(aes(color = V2),alpha = 0.01) +
    scale_fill_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
    scale_color_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
    facet_wrap(~variable,scales="free_y",ncol = 2) +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          #strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  #ggsave(paste0("plot/immunocharacter/",i,"-",dir,"-白细胞等分布.pdf"),width = 7,height = 10)
}
for (dir in setdiff(dir(),c(dir(pattern = ".pdf"),"plot"))){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    pdf(paste0("plot/immunocharacter/",dir,"-白细胞等分布.pdf"),width = 30,height = 30)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}

## 亚型的显著性数值热图wilcoxon秩和检验
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(ggplot2)
library(reshape2)
library(easyGgplot2)
ImmCharacteristics <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",sep = "\t",header = T)
color <- data.frame(color = c("#CD2626","#DC6767","#EBA8A8","#EBD6D5"),
                    wil = c("<=0.001","<=0.01" ,"<=0.05",">0.05" ),stringsAsFactors = F)
wilcoxon <- data.frame()
plo <- function(i){
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
  imm <- merge(ImmCharacteristics[,c("TCGA.Participant.Barcode","Leukocyte.Fraction","Th1.Cells","Th2.Cells",
                                     "Th17.Cells","SNV.Neoantigens","Indel.Neoantigens","Proliferation",
                                     "Aneuploidy.Score","Intratumor.Heterogeneity",
                                     "CTA.Score")],class,by.x = "TCGA.Participant.Barcode",by.y = "V1")
  imm$SNV.Neoantigens <- log(imm$SNV.Neoantigens + 1)
  imm$Indel.Neoantigens <- log(imm$Indel.Neoantigens + 1)
  immlist <- split(imm[,2:11],imm$V2)
  exclist <- list()
  wil <- data.frame()
  for (j in colnames(imm)[2:11]){
    exclist[[j]] <- matrix("",nrow = i,ncol = i,dimnames = list(names(immlist),names(immlist)))
    for (group1 in names(immlist)[1:(length(names(immlist))-1)]){
      if (sum(length(na.omit(immlist[[group1]][,j]))) == 0){next}
      for (group2 in names(immlist)[(grep(group1,names(immlist))+1):length(names(immlist))]){
        if (sum(length(na.omit(immlist[[group2]][,j]))) == 0 | isTRUE(na.omit(immlist[[group1]][,j]) == na.omit(immlist[[group2]][,j]))){next}
        p.value <- wilcox.test(immlist[[group1]][,j],immlist[[group2]][,j])$p.value
        if (p.value <= 0.05){exclist[[j]][group1,group2] <- "*"}
        if (p.value <= 0.01){exclist[[j]][group1,group2] <- "**"}
        if (p.value <= 0.001){exclist[[j]][group1,group2] <- "***"}
        wil <- rbind(wil,data.frame(method = dir,Character = j, Group = i,
                                    Group1 = group1,Group2 = group2,Wilcoxon = p.value,
                                    wil = ifelse(p.value <= 0.05,ifelse(p.value <= 0.01,ifelse(p.value <= 0.001,"<=0.001","<=0.01"),"<=0.05"),">0.05")))
      }
    }
  }
  wil$Group1 <- factor(wil$Group1,levels = sort(levels(wil$Group1),decreasing = T))
  wil$wil <- factor(wil$wil,levels = sort(levels(wil$wil)))
  wil <- merge(wil,color)
  wil$color <- factor(wil$color,levels = sort(unique(wil$color)))
  p <- ggplot(wil, aes(Group2, Group1))
  p + geom_tile(aes(fill = wil),colour = "white") + 
    labs(title = paste(i,"groups",dir)) +
    scale_fill_manual(values = levels(wil$color)) +
    facet_wrap(~ Character,ncol = 2) +
    geom_text(aes(label = signif(Wilcoxon,2)),size = 0.8) +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_blank(),
          axis.title = element_blank(),
          strip.background = element_blank(),
          #strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  #ggsave(paste0("plot/",i,"-",dir,"-白细胞等分布wilcoxon.pdf"),width = 7,height = 10)
  
}
for (dir in setdiff(dir(),c(dir(pattern = ".pdf"),"plot"))){
  tryCatch({
    # i=2:10    
    p2 <- plo(2)
    p3 <- plo(3)
    p4 <- plo(4)
    p5 <- plo(5)
    p6 <- plo(6)
    p7 <- plo(7)
    p8 <- plo(8)
    p9 <- plo(9)
    p10 <- plo(10)
    wilcoxon <- rbind(wilcoxon,p2$data,p3$data,p4$data,p5$data,p6$data,p7$data,p8$data,p9$data,p10$data)
    pdf(paste0("plot/immunocharacter/",dir,"-白细胞等分布wilcoxon.pdf"),width = 12,height = 18)
    ggplot2.multiplot(p2,p3,p4,p5,p6,p7,p8,p9,p10,cols = 3)
    dev.off()
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
}

write.table(wilcoxon,"plot/immunocharacter/白细胞等在亚型中的分布秩和检验.txt",sep = "\t",quote = F,row.names = F,col.names = T)


# 肿瘤浸润度immuno文章中的
rm(list = ls())
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(ggplot2)
ImmCharacteristics <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",sep = "\t",header = T)
ImmCharacteristics <- ImmCharacteristics[,c("TCGA.Participant.Barcode","TCGA.Study","Leukocyte.Fraction" ,"Stromal.Fraction")]
ImmCharacteristics$Tumor.Infiltrate <- ImmCharacteristics$Leukocyte.Fraction/ImmCharacteristics$Stromal.Fraction
ImmCharacteristics <- ImmCharacteristics[!is.na(ImmCharacteristics$Tumor.Infiltrate) & ImmCharacteristics$Tumor.Infiltrate != Inf,]

  for (i in 2:10){
    for (dir in setdiff(dir(),"plot")){
      tryCatch({
      
        class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
        class$V2 <- factor(class$V2,labels = paste("Subtype",unique(sort(class$V2))))
        imm <- merge(ImmCharacteristics,class,by.x = "TCGA.Participant.Barcode",by.y = "V1")
        
        
        ## 白细胞/基质细胞 = 肿瘤浸润度
        p <- ggplot(imm,aes(V2, Tumor.Infiltrate ,fill = V2))
        p + #geom_jitter(aes(color = V2),alpha = 0.1) +
          geom_violin(alpha = 1,color = "grey50",color = "grey30") +
          geom_boxplot(aes(color = V2),outlier.size = 0.1,alpha = 0.5,fill = "white") +
          
          scale_fill_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
          scale_color_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
          scale_y_continuous(limits = c(0,5)) +
          labs(x = dir,title = paste(i,"groups",dir)) +
          theme(axis.text.x = element_text(size = 10),
                axis.text.y = element_text(size = 10),
                #legend.position = "top",
                #legend.background = element_rect(fill="transparent", size=.5),
                axis.line = element_line(),
                axis.title = element_blank(),
                strip.background = element_blank(),
                #strip.text = element_blank(),
                panel.background = element_blank(),
                panel.border = element_blank(),
                panel.grid = element_blank())
        ggsave(paste0("plot/immunocharacter/",i,"-",dir,"-肿瘤浸润度.pdf"),width = 10,height = 10)
        
        
        ##亚型在白细胞分数的占比
        
        #泛癌之间亚型的相关性
        immlist <- split(imm,imm$V2)
        cor <- c()
        for (j in names(immlist)){
          cor <- c(cor,cor(na.omit(immlist[[j]])[,3],na.omit(immlist[[j]])[,4],method = "spearman"))
        }
        p <- ggplot(imm,aes(Leukocyte.Fraction, Stromal.Fraction ))
        p + geom_abline(slope = 1,linetype = "dashed") +
          geom_point(aes(color = V2)) +
          stat_smooth(method="glm") +
          scale_color_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i],
                             labels = paste(levels(imm$V2),"=",signif(cor,3))) +
          #scale_y_continuous(limits = c(0,5)) +
          labs(title = paste(i,"groups",dir)) +
          facet_wrap(~V2) +
          theme(axis.text.x = element_text(size = 20),
                axis.text.y = element_text(size = 20),
                legend.title = element_blank(),
                legend.justification = c(1,0),
                legend.position = c(1,0),
                legend.background = element_rect(),
                axis.line = element_line(),
                #axis.title = element_blank(),
                strip.background = element_blank(),
                strip.text = element_text(size = 20),
                panel.background = element_blank(),
                panel.border = element_blank(),
                panel.grid = element_blank())
        ggsave(paste0("plot/immunocharacter/",i,"-",dir,"-白细胞-基质.pdf"),width = 10,height = 10)
        
        ## 癌症在白细胞中的占比
        p <- ggplot(imm,aes(Leukocyte.Fraction, Stromal.Fraction ))
        p + geom_abline(slope = 1,linetype = "dashed") +
          geom_point(aes(color = V2)) +
          stat_smooth(method="glm") +
          scale_color_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
          #scale_y_continuous(limits = c(0,5)) +
          labs(title = paste(i,"groups",dir)) +
          facet_wrap(~TCGA.Study) +
          theme(axis.text.x = element_text(size = 40),
                axis.text.y = element_text(size = 40),
                #legend.position = "top",
                #legend.background = element_rect(fill="transparent", size=.5),
                axis.line = element_line(),
                #axis.title = element_blank(),
                #strip.background = element_blank(),
                strip.text = element_text(size = 40),
                panel.background = element_blank(),
                #panel.border = element_blank(),
                panel.grid = element_blank())
        ggsave(paste0("plot/immunocharacter/",i,"-",dir,"-白细胞-基质-单癌.pdf"),height = 20,width = 20)
        
        
        ## 求相关性
        #单癌之间亚型的相关性
        immlist <- split(imm,paste(imm$TCGA.Study,imm$V2))
        cor_data <- data.frame(cancer = imm$TCGA.Study,Subtype = imm$V2)
        cor_data <- cor_data[!duplicated(cor_data),]
        rownames(cor_data) <- paste(cor_data$cancer,cor_data$Subtype)
        
        for (j in names(immlist)){
          cor_data[j,"cor"] <- cor(na.omit(immlist[[j]])[,3],na.omit(immlist[[j]])[,4],method = "spearman")
        }
        
        cor_data <- read.table("plot/immunocharacter/5-pam-manhattan-白细胞-基质-单癌-cor.txt",sep = "\t",header = T)
        
        cor_data$corr[cor_data$cor >= -1 & cor_data$cor < -0.8] <- "1.-1~-0.8"
        cor_data$corr[cor_data$cor >= -0.8 & cor_data$cor < -0.5] <- "2.-0.8~-0.5"
        cor_data$corr[cor_data$cor >= -0.5 & cor_data$cor < -0.3] <- "3.-0.5~-0.3"
        cor_data$corr[cor_data$cor >= -0.3 & cor_data$cor < 0] <- "4.-0.3~0"
        cor_data$corr[cor_data$cor >= 0 & cor_data$cor < 0.3] <- "5.0~0.3"
        cor_data$corr[cor_data$cor >= 0.3 & cor_data$cor < 0.5] <- "6.0.3~0.5"
        cor_data$corr[cor_data$cor >= 0.5 & cor_data$cor < 0.8] <- "7.0.5~0.8"
        cor_data$corr[cor_data$cor >= 0.8 & cor_data$cor < 1] <- "8.0.8~1"
        
        color <- data.frame(color = c("#36648B", "#4F94CD", "#5CACEE", "#63B8FF",
                                      "#EBD6D5","#EBA8A8","#DC6767","#CD2626"),
                            corr = c("1.-1~-0.8","2.-0.8~-0.5" ,"3.-0.5~-0.3","4.-0.3~0",
                                     "5.0~0.3", "6.0.3~0.5", "7.0.5~0.8", "8.0.8~1"),stringsAsFactors = F)
        
        cor_data <- merge(cor_data,color)
        cor_data$color <- factor(cor_data$color,levels = unique(cor_data$color))
        
        p <- ggplot(cor_data,aes(cancer, Subtype,fill = corr))
        p + geom_tile() +
          #scale_fill_gradient2(low = "steelblue",mid = "white",high = "firebrick3",
           #                    breaks = c(-1,-0.5,0,0.5,1),
           #                    limits = c(-1,1)) +
          scale_fill_manual(values = levels(cor_data$color)) +
          #scale_y_continuous(limits = c(0,5)) +
          labs(title = paste(i,"groups",dir)) +
          geom_text(aes(label = signif(cor,3)),size = 4) +
          #facet_wrap(~TCGA.Study) +
          theme(axis.text.x = element_text(size = 10),
                axis.text.y = element_text(size = 10),
                #legend.position = "top",
                #legend.background = element_rect(fill="transparent", size=.5),
                axis.line = element_line(),
                #axis.title = element_blank(),
                #strip.background = element_blank(),
                #strip.text = element_blank(),
                panel.background = element_blank(),
                #panel.border = element_blank(),
                panel.grid = element_blank())
        ggsave(paste0("plot/immunocharacter/",i,"-",dir,"-白细胞-基质-单癌-cor.pdf"),height = i-1,width = 22)
        
        write.table(cor_data,paste0("plot/immunocharacter/",i,"-",dir,"-白细胞-基质-单癌-cor.txt"),quote = F,sep = "\t",row.names = F,col.names = T)
        
      },
      error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
    }  
  }    


# 肿瘤浸润度immuno文章中的wilcoxon秩和检验
rm(list = ls())
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(ggplot2)
library(reshape2)
ImmCharacteristics <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",sep = "\t",header = T)
ImmCharacteristics <- ImmCharacteristics[,c("TCGA.Participant.Barcode","Leukocyte.Fraction" ,"Stromal.Fraction")]
ImmCharacteristics$Tumor.Infiltrate <- ImmCharacteristics$Leukocyte.Fraction/ImmCharacteristics$Stromal.Fraction
ImmCharacteristics <- ImmCharacteristics[!is.na(ImmCharacteristics$Tumor.Infiltrate) & ImmCharacteristics$Tumor.Infiltrate != Inf,]


color <- data.frame(color = c("#CD2626","#DC6767","#EBA8A8","#EBD6D5"),
                    wil = c("<=0.001","<=0.01" ,"<=0.05",">0.05" ),stringsAsFactors = F)
wilcoxon <- data.frame()

  for (i in 2:10){
    for (dir in setdiff(dir(),"plot")){
      tryCatch({
        
        class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
        imm <- merge(ImmCharacteristics[,c(1,4)],class,by.x = "TCGA.Participant.Barcode",by.y = "V1")
        immlist <- split(imm[,2],imm$V2)
        exclist <- matrix("",nrow = i,ncol = i,dimnames = list(names(immlist),names(immlist)))
        wil <- data.frame()
        for (group1 in names(immlist)[1:(length(names(immlist))-1)]){
          if (sum(length(na.omit(immlist[[group1]]))) == 0){next}
          for (group2 in names(immlist)[(grep(group1,names(immlist))+1):length(names(immlist))]){
            if (sum(length(na.omit(immlist[[group2]]))) == 0 | isTRUE(na.omit(immlist[[group1]]) == na.omit(immlist[[group2]]))){next}
            p.value <- wilcox.test(immlist[[group1]],immlist[[group2]])$p.value
            if (p.value <= 0.05){exclist[group1,group2] <- "*"}
            if (p.value <= 0.01){exclist[group1,group2] <- "**"}
            if (p.value <= 0.001){exclist[group1,group2] <- "***"}
            wil <- rbind(wil,data.frame(method = dir, Group = i,
                                        Group1 = group1,Group2 = group2,Wilcoxon = p.value,
                                        wil = ifelse(p.value <= 0.05,ifelse(p.value <= 0.01,ifelse(p.value <= 0.001,"<=0.001","<=0.01"),"<=0.05"),">0.05")))
          }
        }
        wil$Group1 <- factor(wil$Group1,levels = sort(levels(wil$Group1),decreasing = T))
        wil$wil <- factor(wil$wil,levels = sort(levels(wil$wil)))
        wilcoxon <- rbind(wilcoxon,wil)
        wil <- merge(wil,color)
        wil$color <- factor(wil$color,levels = sort(unique(wil$color)))
        p <- ggplot(wil, aes(Group2, Group1)) 
        p + geom_tile(aes(fill = wil),colour = "white") + 
          labs(title = paste(i,"group",dir)) +
          scale_fill_manual(values = levels(wil$color)) +
          geom_text(aes(label = signif(Wilcoxon,2)),size = 1) +
          theme(axis.text.x = element_text(size = 10),axis.text.y = element_text(size = 10),
                legend.title=element_blank(),
                strip.background = element_rect(colour = "transparent",fill = "transparent"),
                panel.background = element_blank())
        ggsave(paste0("plot/immunocharacter/",i,"-",dir,"-肿瘤浸润度wilcoxon.pdf"))
        
      },
      error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
    }
    
  }    
write.table(wilcoxon,"plot/immunocharacter/肿瘤浸润度wilcoxon.txt",sep = "\t",quote = F,row.names = F,col.names = T)

#########################################
# 利用H&E肿瘤浸润数据在免疫亚型中的分布 # boxplot 13个癌型
#########################################
# Timer 中的含免疫分数的样本在immuno文章中的白细胞分数
## 合起画
rm(list = ls())
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(ggplot2)
library(easyGgplot2)
ImmCharacteristics <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",sep = "\t",header = T)
cancerid <- as.character(unique(na.omit(ImmCharacteristics[,c("TCGA.Study","TIL.Regional.Fraction")])[,1]))
p <- function(m){
  ggplot(imm,aes(imm[,m], TIL.Regional.Fraction ,fill = imm[,m])) +
    geom_violin(alpha = 0.6,color = "grey50",color = "grey30") +
    geom_boxplot(aes(color = imm[,m]),outlier.size = 0.1,alpha = 0.5,fill = "white") +
    geom_jitter(aes(color = imm[,m]),alpha = 0.01) +
    scale_fill_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
    scale_color_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
    labs(x = m,title = paste(i,"groups of",dir)) +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
}
for (i in 2:10){
  tryCatch({
    
    imm <- ImmCharacteristics[,c("TCGA.Participant.Barcode","TIL.Regional.Fraction")]
    l <- list()
    for (dir in setdiff(dir(),"plot")){
      class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
      class$V2 <- factor(class$V2,labels = paste("Subtype",unique(sort(class$V2))))
      imm <- merge(imm,class,by.x = "TCGA.Participant.Barcode",by.y = "V1")
      colnames(imm)[ncol(imm)] <- dir
      l[[dir]] <- p(dir)
    }
    pdf(paste0("plot/immunocharacter/",i,"-H&E肿瘤浸润.pdf"),width = 18,height = 25)
    ggplot2.multiplot(plotlist=l,cols = 4)
    dev.off()
    
    
  },
  error = function(e){cat("ERROR :",dir,"  ",conditionMessage(e),"\n")})
  
}

## 分开画
rm(list = ls())
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(ggplot2)
ImmCharacteristics <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",sep = "\t",header = T)
cancerid <- as.character(unique(na.omit(ImmCharacteristics[,c("TCGA.Study","TIL.Regional.Fraction")])[,1]))
ImmCharacteristics <- ImmCharacteristics[,c("TCGA.Participant.Barcode","TIL.Regional.Fraction")]
ImmCharacteristics <- ImmCharacteristics[!is.na(ImmCharacteristics$TIL.Regional.Fraction) ,]
for(can in cancerid){
  for (i in 2:10){
    for (dir in setdiff(dir(can),c(dir(can,pattern = ".pdf"),"plot","silhouette","boxplot","consensus"))){
      tryCatch({
        imm <- ImmCharacteristics
        class <- read.csv(paste0(can,"/",dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
        class$V2 <- factor(class$V2,labels = paste("Subtype",unique(sort(class$V2))))
        imm <- merge(imm,class,by.x = "TCGA.Participant.Barcode",by.y = "V1")
        p <- ggplot(imm,aes(V2, TIL.Regional.Fraction ,fill = V2))
        p + geom_violin(alpha = 0.6,color = "grey50",color = "grey30") +
          geom_boxplot(aes(color = V2),outlier.size = 0.1,alpha = 0.5,fill = "white") +
          geom_jitter(aes(color = V2),alpha = 0.3) +
          scale_fill_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
          scale_color_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
          labs(x = dir,title = paste(i,"groups of",can)) +
          theme(axis.text.x = element_text(size = 5),axis.text.y = element_text(size = 10),
                legend.position = "none",
                panel.background = NULL)
        ggsave(paste0(can,"/plot/",i,"-",dir,"-H&E肿瘤浸润度.pdf"))
        
        
        
      },
      error = function(e){cat("ERROR :",can,dir,"  ",conditionMessage(e),"\n")})
    }
  }    
}



## 秩和检验
rm(list = ls())
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(ggplot2)
ImmCharacteristics <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",sep = "\t",header = T)
ImmCharacteristics <- ImmCharacteristics[,c("TCGA.Participant.Barcode","TIL.Regional.Fraction")]
ImmCharacteristics <- ImmCharacteristics[!is.na(ImmCharacteristics$TIL.Regional.Fraction) ,]
color <- data.frame(color = c("#CD2626","#DC6767","#EBA8A8","#EBD6D5"),
                    wil = c("<=0.001","<=0.01" ,"<=0.05",">0.05" ),stringsAsFactors = F)
wilcoxon <- data.frame()
p <- function(dir){
  
  class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
  class$V2 <- factor(class$V2,labels = paste("Subtype",unique(sort(class$V2))))
  imm <- merge(ImmCharacteristics,class,by.x = "TCGA.Participant.Barcode",by.y = "V1")
  #colnames(imm)[ncol(imm)] <- dir
  #imm <- merge(ImmCharacteristics,class,by.x = "TCGA.Participant.Barcode",by.y = "V1")
  immlist <- split(imm[,2],imm$V2)
  exclist <- matrix("",nrow = i,ncol = i,dimnames = list(names(immlist),names(immlist)))
  wil <- data.frame()
  for (group1 in names(immlist)[1:(length(names(immlist))-1)]){
    if (sum(length(na.omit(immlist[[group1]]))) == 0){next}
    for (group2 in names(immlist)[(grep(group1,names(immlist))+1):length(names(immlist))]){
      if (sum(length(na.omit(immlist[[group2]]))) == 0 | isTRUE(na.omit(immlist[[group1]]) == na.omit(immlist[[group2]]))){next}
      p.value <- wilcox.test(immlist[[group1]],immlist[[group2]])$p.value
      if (p.value <= 0.05){exclist[group1,group2] <- "*"}
      if (p.value <= 0.01){exclist[group1,group2] <- "**"}
      if (p.value <= 0.001){exclist[group1,group2] <- "***"}
      wil <- rbind(wil,data.frame(method = dir, Group = i,
                                  Group1 = group1,Group2 = group2,Wilcoxon = p.value,
                                  wil = ifelse(p.value <= 0.05,ifelse(p.value <= 0.01,ifelse(p.value <= 0.001,"<=0.001","<=0.01"),"<=0.05"),">0.05")))
    }
  }
  if(is.null(wil[1,1])){
    wil <- rbind(wil,data.frame(method = dir, Group = i,
                                Group1 = group1,Group2 = group2,Wilcoxon = 10,wil = ">0.05"))
  }
  wil$Group1 <- factor(wil$Group1,levels = sort(levels(wil$Group1),decreasing = T))
  wil$wil <- factor(wil$wil,levels = sort(levels(wil$wil)))
  #wilcoxon <- rbind(wilcoxon,wil)
  wil <- merge(wil,color)
  wil$color <- factor(wil$color,levels = sort(unique(wil$color)))
  p <- ggplot(wil, aes(Group2, Group1)) 
  p + geom_tile(aes(fill = wil),colour = "white") + 
    labs(title = paste(i,"group",dir)) +
    scale_fill_manual(values = levels(wil$color)) +
    geom_text(aes(label = signif(Wilcoxon,2)),size = 1) +
    theme(axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_blank(),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  #ggsave(paste0(can,"/plot/",i,"-",dir,"-H&E肿瘤浸润度wilcoxon.pdf"))
  
}
for (i in 2:10){
  imm <- ImmCharacteristics
  l <- list()
  tryCatch({
    for (dir in setdiff(dir(),"plot")){
      l[[dir]] <- p(dir)
      wilcoxon <- rbind(wilcoxon,l[[dir]]$data)
    }
    pdf(paste0("plot/immunocharacter/",i,"-H&E肿瘤浸润wilcoxon.pdf"),width = 18,height = 25)
    ggplot2.multiplot(plotlist=l,cols = 4)
    dev.off()
  },
  error = function(e){cat("ERROR :",i,dir,"  ",conditionMessage(e),"\n")})
}
write.table(wilcoxon,"plot/immunocharacter/H&E肿瘤浸润度wilcoxon.txt",sep = "\t",quote = F,row.names = F,col.names = T)

###########################
# DNA损伤和免疫亚型的关系 # spearman ggplot(pheatmap)
###########################
rm(list = ls())
setwd("f:/datahe/immuno/3-co-consensus/avg")
library(pheatmap)
library(ggplot2)
library(ggcorrplot)
library(reshape2)
ImmCharacteristics <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",sep = "\t",header = T)

for (dir in setdiff(dir(),"plot")){
  tryCatch({
    for (i in 2:10){
      class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
      imm <- merge(ImmCharacteristics[,c("TCGA.Participant.Barcode","Leukocyte.Fraction","Nonsilent.Mutation.Rate",
                                         "SNV.Neoantigens","Intratumor.Heterogeneity","Number.of.Segments",
                                         "Fraction.Altered","Aneuploidy.Score","Homologous.Recombination.Defects")],class,
                   by.x = "TCGA.Participant.Barcode",by.y = "V1")
      immlist <- split(imm[,2:9],imm$V2)
      corr <- matrix(NA,7,i, dimnames = list(colnames(imm)[3:9], paste("Subtype",c(1:i))))
      for (j in 1:i){
        corr[,j] <- cor(na.omit(immlist[[j]])[,1],na.omit(immlist[[j]])[,2:8],method = "spearman")
      }
      
      corr <- t(corr)
      
      corr <- melt(corr)
      p <- ggplot(corr,aes(x = Var1,y = Var2,fill = value,size = abs(value)))
      p + geom_point(color = "grey30",shape = 21) +
        scale_size(range = c(6, 12)) +
        scale_fill_gradient2(low = "steelblue",mid = "white",high = "firebrick3",
                             breaks = c(-0.4,-0.3,-0.2,-0.1,0,0.1,0.2,0.3,0.4),
                             limits = c(-(round(max(abs(na.omit(corr$value))),2)+0.01),round(max(abs(na.omit(corr$value))),2)+0.01)) +
        theme(axis.text.x = element_text(size = 10,angle = 60),
              axis.text.y = element_text(size = 10),
              #legend.position = "top",
              legend.background = element_rect(fill="transparent", size=.5),
              axis.line = element_blank(),
              axis.title = element_blank(),
              axis.ticks = element_blank(),
              #strip.background = element_blank(),
              #strip.text = element_blank(),
              panel.background = element_blank(),
              panel.border = element_blank(),
              panel.grid = element_line(colour = "grey90",linetype = 2))
      
      ggsave(paste0("plot/immunocharacter/",i,"-",dir,"-corr.pdf"),width = 7,height = 7)
     
    }
    
  },
  error = function(e){cat("ERROR :",i,dir,"  ",conditionMessage(e),"\n")})
}

 
      pheatmap(corr,fontsize=9, fontsize_row=6,
               colorRampPalette(c("steelblue","white","firebrick3"))(21),
               cluster_cols = F,cluster_rows = F,cellwidth = 50, cellheight = 50,
               legend_break = seq(-round(max(abs(corr)[!is.na(corr)]),1),
                                  round(max(abs(corr)[!is.na(corr)]),1),0.1),
               border_color = "white",display_numbers = T,main = paste(i,dir,"Spearman Correlation"),
               filename = paste0("plot/immunocharacter/",i,"-",dir,"-corr.pdf"))

#####################################
# 对突变数据,cnv,甲基化数据进行处理 #
#####################################

# 对突变数据进行处理
# 超几何检验
rm(list = ls())
library(reshape2)
library(stringr)
setwd("/pub6/siyu")
cancer <- read.table("data/Result2.txt",sep = "\t",header = T,stringsAsFactors = F)
cancerid <- levels(factor(cancer$project_id))
cancerid <- setdiff(cancerid,c("LAML"))
mutationall <- data.frame(Sample = NA)
for(can in cancerid){
  mutation <- read.table(paste0("mutation/TCGA-",can,"/TCGA-",can,".txt"),sep = "\t",header = T,row.names = 1)
  colnames(mutation) <- gsub("\\.","-",substr(colnames(mutation),1,15))
  mutation <- mutation[,intersect(cancer$submitter_id,colnames(mutation))]
  mutation$Sample <- rownames(mutation)
  mutationall <- merge(mutationall,mutation,all = T)
  
}
mutationall[is.na(mutationall)] <- 0
mutationall <- mutationall[-nrow(mutationall),]
for (i in 1:10){
  write.table(mutationall[((i-1)*ceiling(nrow(mutationall)/10)+1):
                            ifelse(((i-1)*ceiling(nrow(mutationall)/10) + ceiling(nrow(mutationall)/10)) > nrow(mutationall),
                                   nrow(mutationall),
                                   ((i-1)*ceiling(nrow(mutationall)/10) + ceiling(nrow(mutationall)/10))),],
              file = paste0("mutation/pancancer-",i,".txt"),sep = "\t",col.names = T,row.names = F,quote = F)
}

setwd("/pub6/siyu/big")
library(reshape2)
library(stringr)
for (mu in 1:10){
  mutationselect <- data.frame()
  mutationall <- data.frame()
  mutation <- read.table(paste0("/pub6/siyu/mutation/pancancer-",mu,".txt"),header = T,row.names = 1)
  colnames(mutation) <- gsub("\\.","-",colnames(mutation))
  for (dir in setdiff(dir(),"plot","data")){
    tryCatch({
      for (i in 2:10){
        class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
        mutation1 <- mutation[,intersect(colnames(mutation),class$V1)]
        class <- class[class$V1 %in% colnames(mutation1),]
        classlist <- split(class$V1,class$V2)
        test <- matrix(NA,nrow = nrow(mutation1),ncol = i*2,dimnames = list(rownames(mutation1),c(paste("Subtype",c(1:i)),paste("Sample",c(1:i)))))
        for (subtype in names(classlist)){
          test[,paste("Subtype",subtype)] <- apply(mutation1,1,function(x){phyper(as.numeric(table(as.character(x[classlist[[subtype]]]))["1"]),
                                                                                  length(classlist[[subtype]]),
                                                                                  length(x)-length(classlist[[subtype]]),
                                                                                  as.numeric(table(as.character(x))["1"]),lower.tail = FALSE)})
          test[,paste("Sample",subtype)] <- apply(mutation1,1,function(x){paste(ifelse(is.na(as.numeric(table(as.character(x[classlist[[subtype]]]))["1"])),
                                                                                       0,as.numeric(table(as.character(x[classlist[[subtype]]]))["1"])),
                                                                                length(classlist[[subtype]]),
                                                                                length(x)-length(classlist[[subtype]]),
                                                                                ifelse(is.na(as.numeric(table(as.character(x))["1"])),
                                                                                       0,as.numeric(table(as.character(x))["1"])),
                                                                                sep = ";")})
        }
        test <- as.data.frame(test,stringsAsFactors = F)
        test[,grep("^Subtype",colnames(test))] <- apply(test[,grep("^Subtype",colnames(test))],2,as.numeric)
        test$Gene <- rownames(test)
        test$Method <- dir
        test$Group <- as.character(i)
        test <- melt(test,variable.name = "Subgroup",value.name = "phyper_pvalue")
        test1 <- test
        test$Sample <- apply(test1,1,function(x){as.character(x[grep(paste0(str_sub(x[grep("Subgroup",colnames(test1))],-1,-1),"$"),colnames(test1))])})
        test <- test[,-grep("Sample ",colnames(test))]
        test <- na.omit(test)
        test$ratio <- unlist(lapply(str_split(test$Sample,";"),function(x){ifelse(as.numeric(x[2]) >= 10 & as.numeric(x[3]) >= 10,
                                                                                  as.numeric(x[1])/as.numeric(x[2]),
                                                                                  NA)}))
        test <- na.omit(test)
        mutationselect <- rbind(mutationselect,test[test$ratio >= 0.1 & test$phyper_pvalue <= 0.05,])
        mutationall <- rbind(mutationall,test)
      }
      
    },
    error = function(e){cat("ERROR :",i,dir,"  ",conditionMessage(e),"\n")})
  }
  write.table(mutationall,file = paste0("plot/molecular/mutation/mutation-phyperall-",mu,".txt"),col.names = T,row.names = F,quote = F,sep = "\t")
  write.table(mutationselect,file = paste0("plot/molecular/mutation/mutation-phyper10-",mu,".txt"),col.names = T,row.names = F,quote = F,sep = "\t")
  
}

# 突变数据筛选
library(stringr)
setwd("f:/datahe/immuno/molecular-level/mutation")
gene <- data.frame()

mutation <- read.table("plot/molecular/mutation/mutation-phyper10.txt",sep = "\t",header = T)
samplenum <- unlist(lapply(lapply(strsplit(as.character(mutation$Sample),";"),as.numeric),
                           function(x){ifelse(x[[1]] >= 10 & x[[2]] >= 10 & x[[3]] >= 10 & x[[4]] >= 10,1,0)}))
mutation <- mutation[samplenum == 1,]
gene <- rbind(gene,data.frame(Cancer = can,as.data.frame(table(as.character(mutation$Gene))),Numbers = length(table(as.character(mutation$Gene)))))

colnames(gene)[2] <- "Gene"
write.table(gene,"MutationSample10.txt",col.names = T,row.names = F,quote = F,sep = "\t")
# 对拷贝数变异数据进行处理

setwd("/pub6/siyu")
cancer <- read.table("immuno/data/Result2.txt",sep = "\t",header = T,stringsAsFactors = F)
cancerid <- levels(factor(cancer$project_id))
cancerid <- setdiff(cancerid,c("LAML"))
mutationall <- data.frame(Sample = NA)
for(can in cancerid){
  mutation <- read.table(paste0("cnv/",can,"_Gistic2_CopyNumber_Gistic2_all_thresholded.by_genes/Gistic2_CopyNumber_Gistic2_all_thresholded.by_genes"),sep = "\t",header = T,row.names = 1)
  colnames(mutation) <- gsub("\\.","-",substr(colnames(mutation),1,12))
  mutation <- mutation[,intersect(cancer$submitter_id,colnames(mutation))]
  mutation$Sample <- rownames(mutation)
  mutationall <- merge(mutationall,mutation,all = T)
  
}
mutationall[is.na(mutationall)] <- 0
mutationall <- mutationall[-nrow(mutationall),]
for (i in 1:10){
  write.table(mutationall[((i-1)*ceiling(nrow(mutationall)/10)+1):
                            ifelse(((i-1)*ceiling(nrow(mutationall)/10) + ceiling(nrow(mutationall)/10)) > nrow(mutationall),
                                   nrow(mutationall),
                                   ((i-1)*ceiling(nrow(mutationall)/10) + ceiling(nrow(mutationall)/10))),],
              file = paste0("cnv/pancancer-",i,".txt"),sep = "\t",col.names = T,row.names = F,quote = F)
}


# 超几何检验
rm(list = ls())
setwd("/pub6/siyu/big")
mutationselect30 <- data.frame()
mutationselect40 <- data.frame()
mutationselect50 <- data.frame()
mutationall <- data.frame()
for(mu in 1:10){
  mutation <- read.table(paste0("/pub6/siyu/cnv/","pancancer-",mu,".txt"),row.names = 1,sep = "\t",header = T)
  colnames(mutation) <- gsub("\\.","-",colnames(mutation))
  for (dir in setdiff(dir(),c("plot","data"))){
    tryCatch({
      for (i in 2:10){
        class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
        mutation1 <- mutation[,intersect(colnames(mutation),class$V1)]
        mutation1[mutation1 != 0] <- 1
        class <- class[class$V1 %in% colnames(mutation1),]
        classlist <- split(class$V1,class$V2)
        test <- matrix(NA,nrow = nrow(mutation1),ncol = i*2,dimnames = list(rownames(mutation1),c(paste("Subtype",c(1:i)),paste("Sample",c(1:i)))))
        for (subtype in names(classlist)){
          test[,paste("Subtype",subtype)] <- apply(mutation1,1,function(x){phyper(as.numeric(table(as.character(x[classlist[[subtype]]]))["1"]),
                                                                                  length(classlist[[subtype]]),
                                                                                  length(x)-length(classlist[[subtype]]),
                                                                                  as.numeric(table(as.character(x))["1"]),lower.tail = FALSE)})
          test[,paste("Sample",subtype)] <- apply(mutation1,1,function(x){paste(ifelse(is.na(as.numeric(table(as.character(x[classlist[[subtype]]]))["1"])),
                                                                                       0,as.numeric(table(as.character(x[classlist[[subtype]]]))["1"])),
                                                                                length(classlist[[subtype]]),
                                                                                length(x)-length(classlist[[subtype]]),
                                                                                ifelse(is.na(as.numeric(table(as.character(x))["1"])),
                                                                                       0,as.numeric(table(as.character(x))["1"])),
                                                                                sep = ";")})
        }
        test <- as.data.frame(test,stringsAsFactors = F)
        test[,grep("^Subtype",colnames(test))] <- apply(test[,grep("^Subtype",colnames(test))],2,as.numeric)
        test$Gene <- rownames(test)
        test$Method <- dir
        test$Group <- as.character(i)
        test <- melt(test,variable.name = "Subgroup",value.name = "phyper_pvalue")
        test1 <- test
        test$Sample <- apply(test1,1,function(x){as.character(x[grep(paste0(str_sub(x[grep("Subgroup",colnames(test1))],-1,-1),"$"),colnames(test1))])})
        test <- test[,-grep("Sample ",colnames(test))]
        test <- na.omit(test)
        test$ratio <- unlist(lapply(str_split(test$Sample,";"),function(x){ifelse(as.numeric(x[2]) >= 10 & as.numeric(x[3]) >= 10,
                                                                                  as.numeric(x[1])/as.numeric(x[2]),
                                                                                  NA)}))
        test <- na.omit(test)
        
        mutationselect30 <- rbind(mutationselect30,mutation[mutation$ratio >= 0.3 & mutation$phyper_pvalue <= 0.05,])
        mutationselect40 <- rbind(mutationselect40,mutation[mutation$ratio >= 0.4 & mutation$phyper_pvalue <= 0.05,])
        mutationselect50 <- rbind(mutationselect50,mutation[mutation$ratio >= 0.5 & mutation$phyper_pvalue <= 0.05,])
        mutationall <- rbind(mutationall,mutation)
      }
      
    },
    error = function(e){cat("ERROR :",i,dir,"  ",conditionMessage(e),"\n")})
  }
  write.table(mutationall,file = paste0("plot/molecular/cnv/CNV-phyperall-",mu,".txt"),col.names = T,row.names = F,quote = F,sep = "\t")
  write.table(mutationselect30,file = paste0("plot/molecular/cnv/CNV-phyper30-",mu,".txt"),col.names = T,row.names = F,quote = F,sep = "\t")
  write.table(mutationselect40,file = paste0("plot/molecular/cnv/CNV-phyper40-",mu,".txt"),col.names = T,row.names = F,quote = F,sep = "\t")
  write.table(mutationselect50,file = paste0("plot/molecular/cnv/CNV-phyper50-",mu,".txt"),col.names = T,row.names = F,quote = F,sep = "\t")
  
}





## 对mRNA- miRNA lncRNA 数据合并处理
setwd("/pub6/siyu")
cancer <- read.table("big/data/Result2.txt",sep = "\t",header = T,stringsAsFactors = F)
cancerid <- levels(factor(cancer$project_id))
cancerid <- setdiff(cancerid,c("LAML"))
mutationall <- data.frame(Sample = NA)
for(can in cancerid){
  mutation <- read.table(paste0("ucsc-mRNA-FPKM-UQ/TCGA-",can,".htseq_fpkm-uq.tsv"),sep = "\t",header = T,row.names = 1)
  colnames(mutation) <- gsub("\\.","-",substr(colnames(mutation),1,12))
  mutation <- mutation[,intersect(cancer$submitter_id,colnames(mutation))]
  mutation$Sample <- rownames(mutation)
  mutationall <- merge(mutationall,mutation,all = T)
  
}
mutationall[is.na(mutationall)] <- 0
mutationall <- mutationall[-nrow(mutationall),]
for (i in 1:20){
  write.table(mutationall[((i-1)*ceiling(nrow(mutationall)/20)+1):
                            ifelse(((i-1)*ceiling(nrow(mutationall)/20) + ceiling(nrow(mutationall)/20)) > nrow(mutationall),
                                   nrow(mutationall),
                                   ((i-1)*ceiling(nrow(mutationall)/20) + ceiling(nrow(mutationall)/20))),],
              file = paste0("ucsc-mRNA-FPKM-UQ/pancancer-",i,".txt"),sep = "\t",col.names = T,row.names = F,quote = F)
}

setwd("/pub6/siyu")
cancer <- read.table("big/data/Result2.txt",sep = "\t",header = T,stringsAsFactors = F)
cancerid <- levels(factor(cancer$project_id))
cancerid <- setdiff(cancerid,c("LAML"))
mutationall <- data.frame(Sample = NA)
for(can in cancerid){
  mutation <- read.table(paste0("ucsc-miRNA-RPM/TCGA-",can,".mirna.tsv"),sep = "\t",header = T,row.names = 1)
  colnames(mutation) <- gsub("\\.","-",substr(colnames(mutation),1,12))
  mutation <- mutation[,intersect(cancer$submitter_id,colnames(mutation))]
  mutation$Sample <- rownames(mutation)
  mutationall <- merge(mutationall,mutation,all = T)
  
}
mutationall[is.na(mutationall)] <- 0
mutationall <- mutationall[-nrow(mutationall),]
write.table(mutationall,file = paste0("ucsc-miRNA-RPM/pancancer.txt"),sep = "\t",col.names = T,row.names = F,quote = F)


setwd("/pub6/siyu")
cancer <- read.table("big/data/Result2.txt",sep = "\t",header = T,stringsAsFactors = F)
cancerid <- levels(factor(cancer$project_id))
cancerid <- setdiff(cancerid,c("LAML"))
mutationall <- data.frame(Sample = NA)
for(can in c("BLCA","BRCA","CESC","COAD","GBM","HNSC","KICH","KIRC","KIRP","LGG","LIHC","LUAD","LUSC","OV","PRAD","READ")){
  mutation <- read.table(paste0("TANRIC-lncRNA/TCGA-",can,"-rnaexpr.tsv"),sep = "\t",header = T,row.names = 1)
  colnames(mutation) <- gsub("\\.","-",gsub("^.*TCGA","TCGA",colnames(mutation)))
  mutation <- mutation[,intersect(cancer$submitter_id,colnames(mutation))]
  mutation$Sample <- rownames(mutation)
  mutationall <- merge(mutationall,mutation,all = T)
  
}
mutationall[is.na(mutationall)] <- 0
mutationall <- mutationall[-nrow(mutationall),]
for (i in 1:10){
  write.table(mutationall[((i-1)*ceiling(nrow(mutationall)/10)+1):
                            ifelse(((i-1)*ceiling(nrow(mutationall)/10) + ceiling(nrow(mutationall)/10)) > nrow(mutationall),
                                   nrow(mutationall),
                                   ((i-1)*ceiling(nrow(mutationall)/10) + ceiling(nrow(mutationall)/10))),],
              file = paste0("TANRIC-lncRNA/pancancer-",i,".txt"),sep = "\t",col.names = T,row.names = F,quote = F)
}

# wilcoxon test && fold change
# wilcoxon p value < 0.01;fold change > 1 & < -1
# mRNA数据筛选
# 每组分类都大于10个样本
rm(list = ls())
library(reshape2)
library(stringr)
setwd("/pub6/siyu/big")
cancer <- read.table("/data/Result2.txt",sep = "\t",header = T,stringsAsFactors = F)
cancerid <- levels(factor(cancer$project_id))
cancerid <- setdiff(cancerid,c("LAML"))
for (mu in 1:20){
  gene <- read.table(paste0("/pub6/siyu/ucsc-mRNA-FPKM-UQ/pancancer-",mu,".txt"),row.names = 1,sep = "\t",header = T)
  colnames(gene) <- gsub("\\.","-",substr(colnames(gene),1,12))
  gene <- gene[rowSums(gene) > 0,]
  testall <- data.frame()
  for(method in setdiff(dir(),c("plot","data"))){
    
    for (i in 2:10){
      tryCatch({
        class <- read.csv(paste0(method,"/",method,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
        colnames(class) <- c("gene","method")
        class <- class[class$gene %in% intersect(colnames(gene),class$gene),]
        gene1 <- gene[,intersect(colnames(gene),class$gene)]
        classlist <- split(class$gene,class$method)
        if(any(unlist(lapply(classlist,length)) < 10)){next}
        
        
        
        test <- matrix(NA,nrow = nrow(gene1),ncol = i*2,dimnames = list(rownames(gene1),c(paste("Wilcoxon",c(1:i)),paste("FC",c(1:i)))))
        for (subtype in names(classlist)){
          test[,paste("Wilcoxon",subtype)] <- apply(gene1,1,function(x){wilcox.test(x[factor(classlist[[subtype]],levels = colnames(gene1))],x[factor(setdiff(colnames(gene1),classlist[[subtype]]),levels = colnames(gene1))])$p.value})
          test[,paste("FC",subtype)] <- apply(gene1,1,function(x){mean(x[factor(classlist[[subtype]],levels = colnames(gene1))])/mean(x[factor(setdiff(colnames(gene1),classlist[[subtype]]),levels = colnames(gene1))])})
        }
        test <- data.frame(Gene = rownames(test),test)
        testwilcoxon <- melt(test[,c("Gene",paste("Wilcoxon",c(1:i),sep = "."))],variable.name = "Wilcoxon",value.name = "Wilpvalue")
        testwilcoxon$Subgroup <- paste("Subtype",gsub("^[A-Za-z\\.]+","",as.character(testwilcoxon$Wilcoxon)))
        testfc <- melt(test[,c("Gene",paste("FC",c(1:i),sep = "."))],variable.name = "FC",value.name = "FCp")
        testfc$Subgroup <- paste("Subtype",gsub("^[A-Za-z\\.]+","",as.character(testfc$FC)))
        test <- merge(testwilcoxon[,c(1,3,4)],testfc[,c(1,3,4)],by = c("Gene","Subgroup"),all = T)
        
        test$Method <- method
        test$Group <- i
        test$Sample <- str_c(unlist(lapply(classlist,length)),collapse = ";")
        # 条件
        test <- test[!is.nan(test$Wilpvalue) & !is.nan(test$FCp) & test$Wilpvalue < 0.01,]
        test$FCp[is.infinite(test$FCp)] <- 10
        test <- test[test$FCp > 2 | test$FCp < 0.5,]
        testall <- rbind(testall,test)
        
      },
      error = function(e){cat("ERROR :",i,method,"  ",conditionMessage(e),"\n")})
    } 
  }
  write.table(testall,file = paste0("plot/mRNA-Wil-FC-",mu,".txt"),col.names = T,row.names = F,quote = F,sep = "\t")
}


## 对miRNA-RPM进行处理
# wilcoxon test && fold change
# wilcoxon p value < 0.01;fold change > 1 & < -1
rm(list = ls())
library(reshape2)
library(stringr)
setwd("/pub6/siyu/3-co-consensus/avg")
gene <- read.table(paste0("/pub6/siyu/ucsc-miRNA-RPM/pancancer.txt"),row.names = 1,sep = "\t",header = T)
colnames(gene) <- gsub("\\.","-",substr(colnames(gene),1,12))
gene <- gene[rowSums(gene) > 0,]
testall <- data.frame()
for(method in setdiff(dir(),c("plot"))){
  
  for (i in 2:10){
    tryCatch({
      class <- read.csv(paste0(method ,"/",method ,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
      colnames(class) <- c("gene","method")
      class <- class[class$gene %in% intersect(colnames(gene),class$gene),]
      gene1 <- gene[,intersect(colnames(gene),class$gene)]
      classlist <- split(class$gene,class$method)
      if(any(unlist(lapply(classlist,length)) < 10)){next}
      
      
      
      test <- matrix(NA,nrow = nrow(gene1),ncol = i*2,dimnames = list(rownames(gene1),c(paste("Wilcoxon",c(1:i)),paste("FC",c(1:i)))))
      for (subtype in names(classlist)){
        test[,paste("Wilcoxon",subtype)] <- apply(gene1,1,function(x){wilcox.test(x[factor(classlist[[subtype]],levels = colnames(gene1))],x[factor(setdiff(colnames(gene1),classlist[[subtype]]),levels = colnames(gene1))])$p.value})
        test[,paste("FC",subtype)] <- apply(gene1,1,function(x){mean(x[factor(classlist[[subtype]],levels = colnames(gene1))])/mean(x[factor(setdiff(colnames(gene1),classlist[[subtype]]),levels = colnames(gene1))])})
      }
      test <- data.frame(Gene = rownames(test),test)
      testwilcoxon <- melt(test[,c("Gene",paste("Wilcoxon",c(1:i),sep = "."))],variable.name = "Wilcoxon",value.name = "Wilpvalue")
      testwilcoxon$Subgroup <- paste("Subtype",gsub("^[A-Za-z\\.]+","",as.character(testwilcoxon$Wilcoxon)))
      testfc <- melt(test[,c("Gene",paste("FC",c(1:i),sep = "."))],variable.name = "FC",value.name = "FCp")
      testfc$Subgroup <- paste("Subtype",gsub("^[A-Za-z\\.]+","",as.character(testfc$FC)))
      test <- merge(testwilcoxon[,c(1,3,4)],testfc[,c(1,3,4)],by = c("Gene","Subgroup"),all = T)
      
      test$Method <- method
      test$Group <- i
      test$Sample <- str_c(unlist(lapply(classlist,length)),collapse = ";")
      # 条件
      test <- test[!is.nan(test$Wilpvalue) & !is.nan(test$FCp) & test$Wilpvalue < 0.01,]
      test$FCp[is.infinite(test$FCp)] <- 10
      test <- test[test$FCp > 2 | test$FCp < 0.5,]
      testall <- rbind(testall,test)
      
    },
    error = function(e){cat("ERROR :",i,method,"  ",conditionMessage(e),"\n")})
  }
}
write.table(testall,file =  paste0("plot/molecular/miRNA/miRNA-Wil-FC.txt"),col.names = T,row.names = F,quote = F,sep = "\t")



## 对lncRNA-RPkM进行处理
# wilcoxon test && fold change
# wilcoxon p value < 0.01;fold change > 1 & < -1
rm(list = ls())
setwd("/pub6/siyu/big")
library(reshape2)
library(stringr)
cancer <- read.table("data/Result2.txt",sep = "\t",header = T,stringsAsFactors = F)
cancerid <- levels(factor(cancer$project_id))
cancerid <- setdiff(cancerid,c("LAML"))
for (mu in 1:10){
  gene <- read.table(paste0("/pub6/siyu/TANRIC-lncRNA/pancancer-",mu,".txt"),row.names = 1,sep = "\t",header = T)
  colnames(gene) <- gsub("\\.","-",substr(colnames(gene),1,12))
  gene <- gene[rowSums(gene) > 0,]
  testall <- data.frame()
  for(method in setdiff(dir(),c("plot","data"))){
    
    for (i in 2:10){
      tryCatch({
        class <- read.csv(paste0(method ,"/",method ,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
        colnames(class) <- c("gene","method")
        class <- class[class$gene %in% intersect(colnames(gene),class$gene),]
        gene1 <- gene[,intersect(colnames(gene),class$gene)]
        classlist <- split(class$gene,class$method)
        if(any(unlist(lapply(classlist,length)) < 10)){next}
        
        
        
        test <- matrix(NA,nrow = nrow(gene1),ncol = i*2,dimnames = list(rownames(gene1),c(paste("Wilcoxon",c(1:i)),paste("FC",c(1:i)))))
        for (subtype in names(classlist)){
          test[,paste("Wilcoxon",subtype)] <- apply(gene1,1,function(x){wilcox.test(x[factor(classlist[[subtype]],levels = colnames(gene1))],x[factor(setdiff(colnames(gene1),classlist[[subtype]]),levels = colnames(gene1))])$p.value})
          test[,paste("FC",subtype)] <- apply(gene1,1,function(x){mean(x[factor(classlist[[subtype]],levels = colnames(gene1))])/mean(x[factor(setdiff(colnames(gene1),classlist[[subtype]]),levels = colnames(gene1))])})
        }
        test <- data.frame(Gene = rownames(test),test)
        testwilcoxon <- melt(test[,c("Gene",paste("Wilcoxon",c(1:i),sep = "."))],variable.name = "Wilcoxon",value.name = "Wilpvalue")
        testwilcoxon$Subgroup <- paste("Subtype",gsub("^[A-Za-z\\.]+","",as.character(testwilcoxon$Wilcoxon)))
        testfc <- melt(test[,c("Gene",paste("FC",c(1:i),sep = "."))],variable.name = "FC",value.name = "FCp")
        testfc$Subgroup <- paste("Subtype",gsub("^[A-Za-z\\.]+","",as.character(testfc$FC)))
        test <- merge(testwilcoxon[,c(1,3,4)],testfc[,c(1,3,4)],by = c("Gene","Subgroup"),all = T)
        
        test$Method <- method
        test$Group <- i
        test$Sample <- str_c(unlist(lapply(classlist,length)),collapse = ";")
        # 条件
        test <- test[!is.nan(test$Wilpvalue) & !is.nan(test$FCp) & test$Wilpvalue < 0.01,]
        test$FCp[is.infinite(test$FCp)] <- 10
        test <- test[test$FCp > 2 | test$FCp < 0.5,]
        testall <- rbind(testall,test)
        
      },
      error = function(e){cat("ERROR :",i,method,"  ",conditionMessage(e),"\n")})
    }
  }
  write.table(testall,file =  paste0("plot/lncRNA-Wil-FC-",mu,".txt"),col.names = T,row.names = F,quote = F,sep = "\t")
  
}


###################
# 提取normal 样本 #
###################
####----------------------  mutation -------------------------####
rm(list = ls())
library(reshape2)
library(stringr)
setwd("/pub6/siyu")
cancer <- read.table("data/Result2.txt",sep = "\t",header = T,stringsAsFactors = F)
cancerid <- levels(factor(cancer$project_id))
cancerid <- setdiff(cancerid,c("LAML"))
mutationall <- data.frame(Sample = NA)
for(can in cancerid){
  mutation <- read.table(paste0("mutation/TCGA-",can,"/TCGA-",can,".txt"),sep = "\t",header = T,row.names = 1)
  colnames(mutation) <- gsub("\\.","-",substr(colnames(mutation),1,15))
  mutation <- mutation[,grep("-11$",colnames(mutation))]
  mutation$Sample <- rownames(mutation)
  mutationall <- merge(mutationall,mutation,all = T)
  
}
mutationall[is.na(mutationall)] <- 0
mutationall <- mutationall[-nrow(mutationall),]
write.table(mutationall,file = paste0("mutation/pancancer-normal.txt"),sep = "\t",col.names = T,row.names = F,quote = F)

for (i in 1:10){
  write.table(mutationall[((i-1)*ceiling(nrow(mutationall)/10)+1):
                            ifelse(((i-1)*ceiling(nrow(mutationall)/10) + ceiling(nrow(mutationall)/10)) > nrow(mutationall),
                                   nrow(mutationall),
                                   ((i-1)*ceiling(nrow(mutationall)/10) + ceiling(nrow(mutationall)/10))),],
              file = paste0("mutation/pancancer-normal-",i,".txt"),sep = "\t",col.names = T,row.names = F,quote = F)
}

####----------------------  cnv -------------------------####
mutationall <- data.frame(Sample = NA)
for(can in cancerid){
  mutation <- read.table(paste0("cnv/",can,"_Gistic2_CopyNumber_Gistic2_all_thresholded.by_genes/Gistic2_CopyNumber_Gistic2_all_thresholded.by_genes"),sep = "\t",header = T,row.names = 1)
  colnames(mutation) <- gsub("\\.","-",substr(colnames(mutation),1,15))
  mutation <- mutation[,grep("-11$",colnames(mutation))]
  mutation$Sample <- rownames(mutation)
  mutationall <- merge(mutationall,mutation,all = T)
  
}
mutationall[is.na(mutationall)] <- 0
mutationall <- mutationall[-nrow(mutationall),]
write.table(mutationall,file = paste0("cnv/pancancer-normal.txt"),sep = "\t",col.names = T,row.names = F,quote = F)

for (i in 1:10){
  write.table(mutationall[((i-1)*ceiling(nrow(mutationall)/10)+1):
                            ifelse(((i-1)*ceiling(nrow(mutationall)/10) + ceiling(nrow(mutationall)/10)) > nrow(mutationall),
                                   nrow(mutationall),
                                   ((i-1)*ceiling(nrow(mutationall)/10) + ceiling(nrow(mutationall)/10))),],
              file = paste0("cnv/pancancer-normal-",i,".txt"),sep = "\t",col.names = T,row.names = F,quote = F)
}



####----------------------  mRNA -------------------------####
setwd("/pub6/siyu")
cancer <- read.table("big/data/Result2.txt",sep = "\t",header = T,stringsAsFactors = F)
cancerid <- levels(factor(cancer$project_id))
cancerid <- setdiff(cancerid,c("LAML"))
mutationall <- data.frame(Sample = NA)
for(can in cancerid){
  mutation <- read.table(paste0("ucsc-mRNA-FPKM-UQ/TCGA-",can,".htseq_fpkm-uq.tsv"),sep = "\t",header = T,row.names = 1)
  colnames(mutation) <- gsub("\\.","-",substr(colnames(mutation),1,15))
  mutation <- mutation[,grep("-11$",colnames(mutation))]
  mutation$Sample <- rownames(mutation)
  mutationall <- merge(mutationall,mutation,all = T)
  
}
mutationall[is.na(mutationall)] <- 0
mutationall <- mutationall[-nrow(mutationall),]
for (i in 1:20){
  write.table(mutationall[((i-1)*ceiling(nrow(mutationall)/20)+1):
                            ifelse(((i-1)*ceiling(nrow(mutationall)/20) + ceiling(nrow(mutationall)/20)) > nrow(mutationall),
                                   nrow(mutationall),
                                   ((i-1)*ceiling(nrow(mutationall)/20) + ceiling(nrow(mutationall)/20))),],
              file = paste0("ucsc-mRNA-FPKM-UQ/pancancer-normal-",i,".txt"),sep = "\t",col.names = T,row.names = F,quote = F)
}

setwd("/pub6/siyu")
cancer <- read.table("big/data/Result2.txt",sep = "\t",header = T,stringsAsFactors = F)
cancerid <- levels(factor(cancer$project_id))
cancerid <- setdiff(cancerid,c("LAML"))
mutationall <- data.frame(Sample = NA)
for(can in cancerid){
  mutation <- read.table(paste0("ucsc-miRNA-RPM/TCGA-",can,".mirna.tsv"),sep = "\t",header = T,row.names = 1)
  colnames(mutation) <- gsub("\\.","-",substr(colnames(mutation),1,15))
  mutation <- mutation[,grep("-11$",colnames(mutation))]
  mutation$Sample <- rownames(mutation)
  mutationall <- merge(mutationall,mutation,all = T)
  
}
mutationall[is.na(mutationall)] <- 0
mutationall <- mutationall[-nrow(mutationall),]
write.table(mutationall,file = paste0("ucsc-miRNA-RPM/pancancer-normal.txt"),sep = "\t",col.names = T,row.names = F,quote = F)


setwd("/pub6/siyu")

mutationall <- data.frame(Sample = NA)
for(can in c("BLCA","BRCA","CESC","COAD","GBM","HNSC","KICH","KIRC","KIRP","LGG","LIHC","LUAD","LUSC","OV","PRAD","READ")){
  mutation <- read.table(paste0("TANRIC-lncRNA/TCGA-",can,"-rnaexpr.tsv"),sep = "\t",header = T,row.names = 1)
  colnames(mutation) <- gsub("\\.","-",gsub("^.*TCGA","TCGA",colnames(mutation)))
  mutation <- mutation[,intersect(cancer$submitter_id,colnames(mutation))]
  mutation$Sample <- rownames(mutation)
  mutationall <- merge(mutationall,mutation,all = T)
  
}
mutationall[is.na(mutationall)] <- 0
mutationall <- mutationall[-nrow(mutationall),]
for (i in 1:10){
  write.table(mutationall[((i-1)*ceiling(nrow(mutationall)/10)+1):
                            ifelse(((i-1)*ceiling(nrow(mutationall)/10) + ceiling(nrow(mutationall)/10)) > nrow(mutationall),
                                   nrow(mutationall),
                                   ((i-1)*ceiling(nrow(mutationall)/10) + ceiling(nrow(mutationall)/10))),],
              file = paste0("TANRIC-lncRNA/pancancer-normal-",i,".txt"),sep = "\t",col.names = T,row.names = F,quote = F)
}







####################
# 免疫亚型相关基因 #
####################
## mutataion
## 引用分组时每组样本个数大于5，秩和检验<0.01基因
## 频率为这个基因在此亚型中突变的频率
genes <- data.frame()
for(i in 1:10){
  mutation <- read.table(paste0("/pub6/siyu/mutation/pancancer-",i,".txt"),sep = "\t",header = T)
  genes <- rbind(genes,data.frame(gene = mutation$Sample,location = i))
}
write.table(genes,"/pub6/siyu/mutation/gene_location.txt",sep = "\t",quote = F,col.names = T,row.names = F)


rm(list = ls())
library(ggplot2)
library(grid)
setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/mutation")
gene <- data.frame()
for (i in 1:10){
  gene1 <- read.table(paste0("mutation-phyper10-",i,".txt"),sep = "\t",header = T,stringsAsFactors = F)
  gene1 <- gene1[unlist(lapply(lapply(lapply(strsplit(as.character(gene1$Sample),";"),as.numeric),function(i){i >= 10}),all)),]
  gene1 <- gene1[complete.cases(gene1),]
  gene <- rbind(gene,gene1)
} 

genelocation <- read.table("/pub6/siyu/mutation/gene_location.txt",sep = "\t",header = T,row.names = 1)

print(c(length(unique(gene$Gene))))
genelist <- split(gene,paste(gene$Method,gene$Group,sep = "."))
for (i in names(genelist)){
  mutation <- data.frame()
  for(j in unique(genelocation[genelist[[i]]$Gene,])){
    ## 构建突变矩阵
    mutation1 <- read.table(paste0("/pub6/siyu/mutation/pancancer-",j,".txt"),sep = "\t",header = T,row.names = 1)
    mutation1 <- mutation1[genelist[[i]]$Gene[genelocation[genelist[[i]]$Gene,] == j],]
    mutation <- rbind(mutation,mutation1)
  }
  ## 导入免疫亚型分类文件
  class <- read.csv(paste0("/pub6/siyu/3-co-consensus/avg/",gsub("\\..*","",i),"/",gsub("\\..*","",i),".k=",gsub("^.*\\.","",i),".consensusClass.csv"),header = T,row.names = 1)
  rownames(class) <- gsub("-","\\.",rownames(class))
  genelist1 <- split(genelist[[i]],genelist[[i]]$Subgroup)
  gene1 <- lapply(genelist1,function(x){x$Gene})
  sample <- lapply(genelist1,function(x){rownames(class)[class$X2 %in% gsub("Subtype ","",unique(x$Subgroup))]})
  for(j in names(genelist1)){
    genelist1[[j]]$Freq <- apply(mutation[gene1[[j]],intersect(sample[[j]],colnames(mutation))],1,sum)/length(mutation[gene1[[j]],intersect(sample[[j]],colnames(mutation))])
  }
  genelist[[i]] <- unsplit(genelist1,genelist[[i]]$Subgroup)
  
  chr <- read.table("gene-chr.txt",sep = "\t",header = T,stringsAsFactors = F)
  chr <- chr[chr$Chromosome.scaffold.name %in% c(1:22,"X","Y"),]
  genelist[[i]] <- merge(genelist[[i]],chr,by.x = "Gene",by.y = "Gene.name")
  genelist[[i]]$Chromosome.scaffold.name <- factor(genelist[[i]]$Chromosome.scaffold.name,levels = c(1:22,"X","Y"))
  
  p1 <- ggplot(data = genelist[[i]],aes(x = Gene,y = Freq)) +
    geom_bar(fill = "steelblue",stat = "identity") +
    geom_bar(color = "steelblue",fill = "transparent",stat = "identity",position = "fill",size = 1) +
    coord_flip()  +
    scale_y_continuous(labels = scales::percent) +
    #geom_text(aes(label = paste0(signif(Freq,2)*100,"%")), position = position_fill(vjust = 0.5)) +
    facet_grid(Chromosome.scaffold.name~Subgroup,space = "free_y",scale = "free_y") + 
    #labs(title = i) +
    theme(#legend.position = "top",
      legend.background=element_blank(),
      axis.text.x=element_text(size=rel(1.1),face="bold"),
      axis.text.y = element_text(size = 5),
      axis.line.x = element_line(size = 0.5, colour = "black"),
      axis.line.y = element_line(size = 0.5, colour = "black"),
      strip.background = element_blank(),
      panel.background = element_blank(),
      panel.border = element_blank(),
      panel.grid = element_blank())
  
  
  p2 <- ggplot(data = genelist[[i]],aes(x = Freq)) +
    geom_density(aes(fill = Subgroup),alpha = 0.8)+
    facet_grid(~Subgroup) + 
    scale_fill_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:length(unique(genelist[[i]]$Subgroup))]) +
    scale_x_continuous(limits = c(0,1)) +
    labs(title = i) +
    theme(legend.background = element_blank(),
          legend.position = "none",
          axis.text.x = element_blank(),
          axis.line.x = element_blank(),
          axis.title = element_blank(),
          axis.ticks.x = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  
  
  ########新建画图页面###########
  #grid.newpage()  ##新建页面
  pdf(paste0(i,".pdf"),width = 15,height = 15)
  pushViewport(viewport(layout = grid.layout(9,1))) ####将页面分成2*2矩阵
  vplayout <- function(x,y){
    viewport(layout.pos.row = x, layout.pos.col = y)
  }
  print(p1, vp = vplayout(2:9,1))   ###将（1,1)和(1,2)的位置画图c
  print(p2, vp = vplayout(1,1))   ###将(2,1)的位置画图b
  dev.off() ##画下一幅图，记得关闭窗口
}
gene <- unsplit(genelist,paste(gene$Method,gene$Group,sep = "."))
write.table(gene,paste0("mutation-phyper10.txt"),col.names = T,row.names = T,sep = "\t")

library(ggplot2)
library(reshape2)
setwd("/pub6/siyu/3-consensus/epic")
gene <- read.table(paste0("plot/molecular/mutation/mutation-phyper10.txt"),sep = "\t",header = T,stringsAsFactors = F)
gene <- gene[unlist(lapply(lapply(lapply(strsplit(as.character(gene$Sample),";"),as.numeric),function(i){i >= 10}),all)),]
gene <- gene[complete.cases(gene),]
gene1 <- gene[,1:3]
gene1 <- gene1[!duplicated(gene1),]
gene1 <- data.frame(table(gene1$Gene))
gene1 <- gene1[gene1$Freq>1,]
write.table(gene1,"plot/molecular/mutation/mutation.txt",sep = "\t",quote = F,col.names = T,row.names = F)

## CNV
## 引用分组时每组样本个数大于5，秩和检验<0.01基因
## 频率为这个基因在此亚型中突变的频率
rm(list = ls())
library(ggplot2)
library(grid)
library(reshape2) 
setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/cnv")
#genes <- data.frame()
#for(i in 1:10){
#  mutation <- read.table(paste0("e:/siyu/cnv/pancancer-",i,".txt"),sep = "\t",header = T)
#  genes <- rbind(genes,data.frame(gene = mutation$Sample,location = i))
#}
#write.table(genes,"e:/siyu/cnv/gene_location.txt",sep = "\t",quote = F,col.names = T,row.names = F)

genelocation <- read.table("/pub6/siyu/cnv/gene_location.txt",sep = "\t",header = T,row.names = 1)
color <- data.frame(row.names = c("Censored2","Censored1","nomutate","Amplification1","Amplification2","Censored","Amplification"),color = c("#45315D","#665C84","#FaF9F9","#FF9280","#FF2400","#45315D","#FF2400"),stringsAsFactors = F)

gene <- data.frame()
for (i in 1:10){
  gene1 <- read.table(paste0("CNV-phyper30-",i,".txt"),sep = "\t",header = T,stringsAsFactors = F)
  gene1 <- gene1[unlist(lapply(lapply(lapply(strsplit(as.character(gene1$Sample),";"),as.numeric),function(i){i >= 10}),all)),]
  gene1 <- gene1[complete.cases(gene1),]
  gene <- rbind(gene,gene1)
} 
print(length(unique(gene$Gene)))
genelist <- split(gene,paste(gene$Method,gene$Group,sep = "."))

for (i in names(genelist)){
  tryCatch({
    mutation <- data.frame()
    for(j in unique(genelocation[genelist[[i]]$Gene,])){
      ## 构建突变矩阵
      mutation1 <- read.table(paste0("/pub6/siyu/cnv/pancancer-",j,".txt"),sep = "\t",header = T,row.names = 1)
      mutation1 <- mutation1[genelist[[i]]$Gene[genelocation[genelist[[i]]$Gene,] == j],]
      mutation <- rbind(mutation,mutation1)
    }
    ## 导入免疫亚型分类文件
    class <- read.csv(paste0("/pub6/siyu/3-co-consensus/avg/",gsub("\\..*","",i),"/",gsub("\\..*","",i),".k=",gsub("^.*\\.","",i),".consensusClass.csv"),header = T,row.names = 1)
    rownames(class) <- gsub("-","\\.",rownames(class))
    genelist1 <- split(genelist[[i]],genelist[[i]]$Subgroup)
    gene1 <- lapply(genelist1,function(x){x$Gene})
    sample <- lapply(genelist1,function(x){rownames(class)[class$X1 %in% gsub("Subtype ","",unique(x$Subgroup))]})
    for(j in names(genelist1)){
      genelist1[[j]]$Censored2 <- apply(mutation[gene1[[j]],intersect(colnames(mutation),sample[[j]])],1,function(x){length(which((x == -2)))})/length(intersect(colnames(mutation),sample[[j]]))
      genelist1[[j]]$Censored1 <- apply(mutation[gene1[[j]],intersect(colnames(mutation),sample[[j]])],1,function(x){length(which((x == -1)))})/length(intersect(colnames(mutation),sample[[j]]))
      genelist1[[j]]$nomutate <- apply(mutation[gene1[[j]],intersect(colnames(mutation),sample[[j]])],1,function(x){length(which((x == 0)))})/length(intersect(colnames(mutation),sample[[j]]))
      genelist1[[j]]$Amplification1 <- apply(mutation[gene1[[j]],intersect(colnames(mutation),sample[[j]])],1,function(x){length(which((x == 1)))})/length(intersect(colnames(mutation),sample[[j]]))
      genelist1[[j]]$Amplification2 <- apply(mutation[gene1[[j]],intersect(colnames(mutation),sample[[j]])],1,function(x){length(which((x == 2)))})/length(intersect(colnames(mutation),sample[[j]]))
    }
    genelist[[i]] <- unsplit(genelist1,genelist[[i]]$Subgroup)
    genelist[[i]] <- melt(genelist[[i]],id.vars = c("Gene","Method","Group","Subgroup","phyper_pvalue","Sample","ratio"),value.name = "mutation_ratio",variable.name = "mutation_method")
    genelist[[i]]$mutation_method1 <- gsub("[0-9]","",genelist[[i]]$mutation_method)
    genelist[[i]]$mutation_method1[genelist[[i]]$mutation_method1 == "nomutate"] <- NA
    genelist[[i]]$mutation_method1 <- factor(genelist[[i]]$mutation_method1,levels = unique(genelist[[i]]$mutation_method1))
    #write.table(genelist[[i]],paste0(i,".txt"),sep = "\t",col.names = T,row.names = F,quote = F)
    
    p1 <- ggplot(data = genelist[[i]],aes(x = Gene,y = mutation_ratio)) +
      #geom_bar(color = "grey30",fill = "transparent",stat = "identity",position = "fill") +
      geom_bar(aes(fill = mutation_method),stat = "identity") +
      scale_fill_manual(values = color[levels(genelist[[i]]$mutation_method),]) +
      coord_flip()  +
      scale_y_continuous(labels = scales::percent) +
      #geom_text(aes(label = paste0(signif(Freq,2)*100,"%")), position = position_fill(vjust = 0.5)) +
      facet_wrap(~Subgroup,scales = "free_x",nrow = 1) + 
      labs(title = i,x = paste0("Gene = ",length(unique(genelist[[i]]$Gene)))) +
      theme(#legend.position = "top",
        legend.background=element_blank(),
        axis.text.x=element_text(size=0.1,face="bold"),
        axis.text.y = element_text(size = 5),
        axis.line.x = element_line(size = 0.5, colour = "black"),
        axis.line.y = element_line(size = 0.5, colour = "black"),
        strip.background = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
    
    
    p2 <- ggplot(data = genelist[[i]],aes(x = mutation_ratio)) +
      geom_density(aes(color = mutation_method1))+
      facet_wrap(~Subgroup,scales = "free_y",nrow = 1) + 
      scale_color_manual(values = color[levels(genelist[[i]]$mutation_method1),]) +
      scale_x_continuous(limits = c(0,1)) +
      labs(title = i) +
      theme(legend.background = element_blank(),
            legend.position = "none",
            axis.text.x = element_blank(),
            axis.line.x = element_blank(),
            axis.title = element_blank(),
            axis.ticks.x = element_blank(),
            strip.background = element_blank(),
            strip.text = element_blank(),
            panel.background = element_blank(),
            panel.border = element_blank(),
            panel.grid = element_blank())
    
    ########新建画图页面###########
    #grid.newpage()  ##新建页面
    pdf(paste0(i,".pdf"),width = 15,height = 15)
    pushViewport(viewport(layout = grid.layout(9,1))) ####将页面分成2*2矩阵
    vplayout <- function(x,y){
      viewport(layout.pos.row = x, layout.pos.col = y)
    }
    print(p1, vp = vplayout(2:9,1))   ###将（1,1)和(1,2)的位置画图c
    print(p2, vp = vplayout(1,1))   ###将(2,1)的位置画图b
    dev.off() ##画下一幅图，记得关闭窗口
  },
  error = function(e){cat("ERROR :",conditionMessage(e),"\n")})
}
gene <- unsplit(genelist,paste(gene$Method,gene$Group,sep = "."))
write.table(gene,paste0("cnv-phyper30.txt"),col.names = T,row.names = T,sep = "\t")


library(ggplot2)
library(reshape2)
setwd("/pub6/siyu/3-co-consensus/avg/")
#gene <- read.table(paste0("plot/molecular/cnv/CNV-phyper30.txt"),sep = "\t",header = T,stringsAsFactors = F)
gene <- gene[unlist(lapply(lapply(lapply(strsplit(as.character(gene$Sample),";"),as.numeric),function(i){i >= 10}),all)),]
gene <- gene[complete.cases(gene),]
gene1 <- gene[,1:3]
gene1 <- gene1[!duplicated(gene1),]
gene1 <- data.frame(table(gene1$Gene))
gene1 <- gene1[gene1$Freq>1,]
write.table(gene1,"plot/molecular/cnv/sig-CNV.txt",sep = "\t",quote = F,col.names = T,row.names = F)

## miRNA
library(ggplot2)
library(reshape2)
setwd("/pub6/siyu/3-co-consensus/avg/")

gene <- read.table(paste0("plot/molecular/miRNA/miRNA-Wil-FC.txt"),sep = "\t",header = T,stringsAsFactors = F)
gene <- gene[unlist(lapply(lapply(lapply(strsplit(as.character(gene$Sample),";"),as.numeric),function(i){i >= 10}),all)),]
gene <- gene[complete.cases(gene),]
genelist <- split(gene,paste(gene$Method,gene$Group,sep = "."))
for (i in names(genelist)){
  a <- genelist[[i]]
  a$FCp <- log2(a$FCp)
  a$FCp[a$FCp == -Inf] <- -max(abs(a$FCp[a$FCp != -Inf]))
  dis <- dcast(a[,c(1,2,4)],Gene ~ Subgroup,value.var = "FCp")
  dis[is.na(dis)] <- 0
  hc <- hclust(dist(dis[,-1]),method = "average")
  dis <- dis[hc$order,]
  geneclust <- unique(dis$Gene)
  dis <- melt(dis,id.vars = "Gene",variable.name = "Subgroup",value.name = "log2(FC)")
  a <- merge(dis,a,all.x = T)
  a$Wilpvalue[is.na(a$Wilpvalue)] <- 0
  a$Gene <- factor(a$Gene,levels = geneclust)
  p <- ggplot(a,aes(Gene,-log10(Wilpvalue)))
  p + #geom_tile(aes(fill = FCp)) +
    #geom_bar(color = "grey30",fill = "transparent",stat = "identity",position = "fill") +
    geom_bar(aes(fill = `log2(FC)`),stat = "identity") +
    scale_fill_gradient2(low = "#05004E",high = "#FF0000",mid = "#F9F9F9") +
    #coord_flip()  +
    labs(title = i) +
    facet_grid(Subgroup~.,scales = "free_x") + 
    #labs(title = i) +
    theme(#legend.position = "top",
      legend.background = element_blank(),
      axis.text.x=element_text(size=10,angle = 90),
      axis.text.y = element_text(size = 8),
      axis.line.x = element_line(size = 0.5, colour = "black"),
      axis.line.y = element_line(size = 0.5, colour = "black"),
      strip.background = element_blank(),
      panel.background = element_blank(),
      panel.border = element_blank(),
      panel.grid = element_blank())
  ggsave(paste0("plot/molecular/miRNA/",i,".pdf"),width = 10,height = 10)
}



## 统计差异miRNA在各种方法中出现差异的频率（个数）
library(ggplot2)
library(reshape2)
setwd("/pub6/siyu/3-co-consensus/avg/")
gene <- read.table(paste0("plot/molecular/miRNA/miRNA-Wil-FC.txt"),sep = "\t",header = T,stringsAsFactors = F)
gene <- gene[unlist(lapply(lapply(lapply(strsplit(as.character(gene$Sample),";"),as.numeric),function(i){i >= 10}),all)),]
gene <- gene[complete.cases(gene),]
gene1 <- gene[,c(1,5,6)]
gene1 <- gene1[!duplicated(gene1),]
gene1 <- data.frame(table(gene1$Gene))
gene1 <- gene1[gene1$Freq>1,]
write.table(gene1,"plot/molecular/miRNA/sig-miRNA.txt",sep = "\t",quote = F,col.names = T,row.names = F)

## mRNA
#基因的表达值在所有样本中<1视为无意义基因
samples <- data.frame()
for (i in 1:20){
  mRNA <- read.table(paste0("pancancer-",i,".txt"),sep = "\t",header = T,row.names = 1)
  sample <- rownames(mRNA)[apply(mRNA,1,function(x){!all(x < 1)})]
  samples <- rbind(samples,as.data.frame(sample))
}
write.table(samples,"meaningful-gene.txt",sep = "\t",col.names = T,row.names = F,quote = F)





library(ggplot2)
library(reshape2)
setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/mRNA")
gene <- data.frame()
for (i in 1:20){
  gene1 <- read.table(paste0("mRNA-Wil-FC-",i,".txt"),sep = "\t",header = T,stringsAsFactors = F)
  gene1 <- gene1[unlist(lapply(lapply(lapply(strsplit(as.character(gene1$Sample),";"),as.numeric),function(i){i >= 10}),all)),]
  gene1 <- gene1[complete.cases(gene1),]
  gene <- rbind(gene,gene1)
} 
write.table(gene,"mRNA-Wil-FC.txt",sep = "\t",row.names = F,col.names = T,quote = F)
print(length(unique(gene$Gene)))
genelist <- split(gene,paste(gene$Method,gene$Group,sep = "."))
for (i in names(genelist)){
  a <- genelist[[i]]
  a$FCp <- log2(a$FCp)
  a$FCp[a$FCp == -Inf] <- -max(abs(a$FCp[a$FCp != -Inf]))
  dis <- dcast(a[,c(1,2,4)],Gene ~ Subgroup,value.var = "FCp")
  dis[is.na(dis)] <- 0
  hc <- hclust(dist(dis[,-1]),method = "average")
  dis <- dis[hc$order,]
  geneclust <- unique(dis$Gene)
  dis <- melt(dis,id.vars = "Gene",variable.name = "Subgroup",value.name = "log2(FC)")
  a <- merge(dis,a,all.x = T)
  a$Wilpvalue[is.na(a$Wilpvalue)] <- 0
  a$Gene <- factor(a$Gene,levels = geneclust)
  p <- ggplot(a,aes(Gene,-log10(Wilpvalue)))
  p + #geom_tile(aes(fill = FCp)) +
    #geom_bar(color = "grey30",fill = "transparent",stat = "identity",position = "fill") +
    geom_bar(aes(fill = `log2(FC)`),stat = "identity") +
    scale_fill_gradient2(low = "#05004E",high = "#FF0000",mid = "#F9F9F9") +
    #coord_flip()  +
    facet_grid(Subgroup~.,scales = "free_y") + 
    labs(title = i,x = paste0("Gene = ",length(unique(a$Gene)))) +
    theme(#legend.position = "top",
      legend.background=element_blank(),
      axis.text.x=element_text(size=1,angle = 90),
      axis.text.y = element_text(size = 10),
      axis.line.x = element_line(size = 0.5, colour = "black"),
      axis.line.y = element_line(size = 0.5, colour = "black"),
      strip.background = element_blank(),
      panel.background = element_blank(),
      panel.border = element_blank(),
      panel.grid = element_blank())
  ggsave(paste0(i,".pdf"),width = 10,height = 10)
}

## 统计差异mRNA在各种方法中出现差异的频率（个数）
library(ggplot2)
library(reshape2)
setwd("/pub6/siyu/3-co-consensus/avg")

gene <- read.table(paste0("plot/molecular/mRNA/mRNA-Wil-FC.txt"),sep = "\t",header = T,stringsAsFactors = F)

gene <- gene[unlist(lapply(lapply(lapply(strsplit(as.character(gene$Sample),";"),as.numeric),function(i){i >= 10}),all)),]
gene <- gene[complete.cases(gene),]
gene1 <- gene[,c(1,5,6)]
gene1 <- gene1[!duplicated(gene1),]
gene1 <- data.frame(table(gene1$Gene))
gene1 <- gene1[gene1$Freq>1,]
write.table(gene1,"plot/molecular/mRNA/sig-mRNA.txt",sep = "\t",quote = F,col.names = T,row.names = F)


## lncRNA
library(ggplot2)
library(reshape2)
setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/lncRNA")
gene <- data.frame()
for (i in 1:10){
  gene1 <- read.table(paste0("lncRNA-Wil-FC-",i,".txt"),sep = "\t",header = T,stringsAsFactors = F)
  gene1 <- gene1[unlist(lapply(lapply(lapply(strsplit(as.character(gene1$Sample),";"),as.numeric),function(i){i >= 10}),all)),]
  gene1 <- gene1[complete.cases(gene1),]
  gene <- rbind(gene,gene1)
} 

print(c(length(unique(gene$Gene))))
genelist <- split(gene,paste(gene$Method,gene$Group,sep = "."))
for (i in names(genelist)){
  a <- genelist[[i]]
  a$FCp <- log2(a$FCp)
  a$FCp[a$FCp == -Inf] <- -max(abs(a$FCp[a$FCp != -Inf]))
  dis <- dcast(a[,c(1,2,4)],Gene ~ Subgroup,value.var = "FCp")
  dis[is.na(dis)] <- 0
  hc <- hclust(dist(dis[,-1]),method = "average")
  dis <- dis[hc$order,]
  geneclust <- unique(dis$Gene)
  dis <- melt(dis,id.vars = "Gene",variable.name = "Subgroup",value.name = "log2(FC)")
  a <- merge(dis,a,all.x = T)
  a$Wilpvalue[is.na(a$Wilpvalue)] <- 0
  a$Gene <- factor(a$Gene,levels = geneclust)
  p <- ggplot(a,aes(Gene,-log10(Wilpvalue)))
  p + #geom_tile(aes(fill = FCp)) +
    #geom_bar(color = "grey30",fill = "transparent",stat = "identity",position = "fill") +
    geom_bar(aes(fill = `log2(FC)`),stat = "identity") +
    scale_fill_gradient2(low = "#05004E",high = "#FF0000",mid = "#F9F9F9") +
    #coord_flip()  +
    facet_grid(Subgroup~.,scales = "free_x") + 
    #labs(title = i) +
    theme(#legend.position = "top",
      legend.background=element_blank(),
      axis.text.x=element_text(size=1,angle = 90),
      axis.text.y = element_text(size = 10),
      axis.line.x = element_line(size = 0.5, colour = "black"),
      axis.line.y = element_line(size = 0.5, colour = "black"),
      strip.background = element_blank(),
      panel.background = element_blank(),
      panel.border = element_blank(),
      panel.grid = element_blank())
  ggsave(paste0(i,".pdf"),width = 10,height = 10)
}


## 统计差异lncRNA在各种方法中出现差异的频率（个数）
library(ggplot2)
library(reshape2)
setwd("/pub6/siyu/3-co-consensus/avg")

#gene <- read.table(paste0("plot/molecular/lncRNA/lncRNA-Wil-FC.txt"),sep = "\t",header = T,stringsAsFactors = F)

gene <- gene[unlist(lapply(lapply(lapply(strsplit(as.character(gene$Sample),";"),as.numeric),function(i){i >= 10}),all)),]
gene <- gene[complete.cases(gene),]
gene1 <- gene[,c(1,5,6)]
gene1 <- gene1[!duplicated(gene1),]
gene1 <- data.frame(table(gene1$Gene))
gene1 <- gene1[gene1$Freq>1,]
write.table(gene1,"plot/molecular/lncRNA/sig-lncRNA.txt",sep = "\t",quote = F,col.names = T,row.names = F)



##########################
# 亚型中突变基因的复杂度 #  -- 突变
##########################
library(ggplot2)
library(ggpubr) #组间差异，默认wilcoxon秩和检验
setwd("e:/siyu/mutation")

## 统计每个样本中基因的突变个数（样本的突变复杂度）
mutation_plot <- data.frame()
for (i in 1:10){
  mutation <- read.table(paste0("pancancer-",i,".txt"),header = T,stringsAsFactors = F,sep = "\t",row.names = 1)
  mutation_plot <- rbind(mutation_plot,as.data.frame(t(data.frame(apply(mutation,2,sum)))))
}
mutation_num <- data.frame(apply(mutation_plot,2,sum))
colnames(mutation_num) <- "Mutate_Numbers"
write.table(mutation_num,"mutation_numbers.txt",sep = "\t",quote = F)

setwd("f:/datahe/immuno/3-co-consensus/avg")
#mutation_num <- read.table("e:/siyu/mutation/mutation_numbers.txt",sep = "\t",stringsAsFactors = F,row.names = 1)
mutation_num$V1 <- gsub("\\.","-",rownames(mutation_num))
for (dir in setdiff(dir(),"plot")){
  for (i in 2:10){
    # 整理数据
    class <- read.csv(paste0(dir,"/",dir,".k=",i,".consensusClass.csv"),header = F,stringsAsFactors = F)
    class <- merge(mutation_num,class)
    class$V2 <- factor(paste("Subtype",class$V2))
    
    # 比较组间差异
    compare_means(Mutate_Numbers ~ V2,data = class)
    my_comparisons <- list(c("Subtype 1", "Subtype 2"), c("Subtype 2", "Subtype 3"), c("Subtype 3", "Subtype 4"),c("Subtype 4", "Subtype 5"),
                           c("Subtype 1", "Subtype 3"), c("Subtype 3", "Subtype 5"), c("Subtype 2", "Subtype 4"),
                           c("Subtype 1", "Subtype 4"), c("Subtype 2", "Subtype 5"), c("Subtype 1","Subtype 5"))
    
    
    
    # 画图
    p <- ggplot(class,aes(V2,log10(Mutate_Numbers),fill = V2))
    p +  geom_violin(alpha = 0.6,color = "grey30") +
      geom_boxplot(aes(color = V2),outlier.size = 0.1,alpha = 0.5,fill = "white") +
      #geom_jitter(aes(color = V2),alpha = 0.01) +
      scale_fill_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
      scale_color_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[1:i]) +
      stat_compare_means(comparisons=my_comparisons) +
      theme(axis.text.x = element_text(size = 10),
            axis.text.y = element_text(size = 10),
            #legend.position = "top",
            #legend.background = element_rect(fill="transparent", size=.5),
            axis.line = element_line(size = 0.5, colour = "black"),
            axis.title.x = element_blank(),
            strip.background = element_blank(),
            #strip.text = element_blank(),
            panel.background = element_blank(),
            panel.border = element_blank(),
            panel.grid = element_blank())
    ggsave(paste0("plot/molecular/mutation/",dir,".",i,"-mutation_complexity.pdf"),width = 10,height = 10)
    
  }
}

#### 冷热肿瘤中共有的突变基因
setwd("f:/datahe/immuno/3-co-consensus/avg/plot/molecular/mutation/")
library(ggplot2)
library(grid)

# 在亚型中表达显著的基因 -- pam-manhattan 5
sig_mu <- read.table("mutation-phyper10.txt",sep = "\t",stringsAsFactors = F)
sig_mu <- sig_mu[sig_mu$Method == "pam-manhattan" & sig_mu$Group == 5,] #提出pam-manhattan5 方法
sig_mu$H_C[sig_mu$Subgroup == "Subtype 1" | sig_mu$Subgroup == "Subtype 2"] <- "Cold" #分出冷热肿瘤
sig_mu$H_C[sig_mu$Subgroup == "Subtype 3" | sig_mu$Subgroup == "Subtype 4" | sig_mu$Subgroup == "Subtype 5"] <- "Hot"

## 冷肿瘤中共有突变基因以及热肿瘤中的共有突变基因
gene_C <- names(table(sig_mu$Gene[sig_mu$H_C == "Cold"]))[table(sig_mu$Gene[sig_mu$H_C == "Cold"]) == 2]
gene_H <- names(table(sig_mu$Gene[sig_mu$H_C == "Hot"]))[table(sig_mu$Gene[sig_mu$H_C == "Hot"]) == 3]
sig_mu_co <- sig_mu[sig_mu$Gene %in% gene_H,]
sig_mu_co$H_C <- factor(sig_mu_co$H_C,levels = c("Hot","Cold"))
sig_mu_co$Subgroup <- factor(sig_mu_co$Subgroup,levels = paste("Subtype",1:5))

p1 <- ggplot(data = sig_mu_co,aes(x = Gene,y = Freq)) +
  geom_bar(aes(fill = Subgroup),stat = "identity") +
  #geom_bar(fill = "steelblue",stat = "identity") +
  geom_bar(color = "steelblue",fill = "transparent",stat = "identity",position = "fill",size = 1) +
  scale_fill_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","#9D5F74","#ECC9C9","#E88080","#E8D380","#D87A80")[3:5]) +
  coord_flip()  +
  scale_y_continuous(labels = scales::percent) +
  geom_text(aes(label = paste0(signif(Freq,2)*100,"%")), position = position_fill(vjust = 0.5)) +
  facet_wrap(~H_C,nrow = 1) + 
  #labs(title = i) +
  theme(#legend.position = "top",
    legend.background=element_blank(),
    axis.text.x=element_text(size=rel(1.1),face="bold"),
    axis.text.y = element_text(size = 5),
    axis.line.x = element_line(size = 0.5, colour = "black"),
    axis.line.y = element_line(size = 0.5, colour = "black"),
    strip.background = element_blank(),
    panel.background = element_blank(),
    panel.border = element_blank(),
    panel.grid = element_blank())


p2 <- ggplot(data = sig_mu_co,aes(x = Freq)) +
  geom_density(aes(fill = H_C),alpha = 0.8)+
  facet_grid(~H_C) + 
  scale_fill_manual(values = c("#DA4934")) +
  scale_x_continuous(limits = c(0,1)) +
  #labs(title = i) +
  theme(legend.background = element_blank(),
        legend.position = "none",
        #axis.text.x = element_blank(),
        axis.line.x = element_blank(),
        axis.title = element_blank(),
        axis.ticks.x = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


## 新建画图页面
#grid.newpage()  ##新建页面
pdf(paste0("f:/datahe/immuno/3-co-consensus/avg/plot/H_C_sig-co-mutation.pdf"),width = 15,height = 15)
pushViewport(viewport(layout = grid.layout(9,1))) ####将页面分成2*2矩阵
vplayout <- function(x,y){
  viewport(layout.pos.row = x, layout.pos.col = y)
}
print(p1, vp = vplayout(2:9,1))   ###将（1,1)和(1,2)的位置画图c
print(p2, vp = vplayout(1,1))   ###将(2,1)的位置画图b
dev.off() ##画下一幅图，记得关闭窗口




########
# 突变 #
########
rm(list = ls())
library(ggplot2)
library(grid)
library(pheatmap)
setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/mutation")
setwd("f:/datahe/immuno/3-co-consensus/avg/plot/molecular/mutation")
#gene <- read.table("mutation-phyper10.txt",sep = "\t",header = T,stringsAsFactors = F)
gene <- data.frame()
for (i in 1:10){
  gene1 <- read.table(paste0("mutation-phyper10-",i,".txt"),sep = "\t",header = T,stringsAsFactors = F)
  gene1 <- gene1[unlist(lapply(lapply(lapply(strsplit(as.character(gene1$Sample),";"),as.numeric),function(i){i >= 10}),all)),]
  gene1 <- gene1[complete.cases(gene1),]
  gene <- rbind(gene,gene1)
} 

genelocation <- read.table("e:/siyu/mutation/gene_location.txt",sep = "\t",header = T,row.names = 1)

print(c(length(unique(gene$Gene))))
genelist <- split(gene,paste(gene$Method,gene$Group,sep = "."))
for (i in names(genelist)){
  mutation <- data.frame()
  for(j in unique(genelocation[genelist[[i]]$Gene,])){
    ## 构建突变矩阵
    mutation1 <- read.table(paste0("e:/siyu/mutation/pancancer-",j,".txt"),sep = "\t",header = T,row.names = 1)
    
    #mutation1 <- read.table(paste0("/pub6/siyu/mutation/pancancer-",j,".txt"),sep = "\t",header = T,row.names = 1)
    mutation1 <- mutation1[genelist[[i]]$Gene[genelocation[genelist[[i]]$Gene,] == j],]
    mutation <- rbind(mutation,mutation1)
  }
  write.table(mutation,"sig_mutation.txt",sep = "\t",col.names = T,row.names = T,quote = F)
  ## 导入免疫亚型分类文件
  ## 构建表达谱标签 annotation_col
  #class <- read.csv(paste0("/pub6/siyu/3-co-consensus/avg/",gsub("\\..*","",i),"/",gsub("\\..*","",i),".k=",gsub("^.*\\.","",i),".consensusClass.csv"),header = T,row.names = 1)
  class <- read.csv(paste0("f:/datahe/immuno/3-co-consensus/avg/",gsub("\\..*","",i),"/",gsub("\\..*","",i),".k=",gsub("^.*\\.","",i),".consensusClass.csv"),header = T,row.names = 1)
  
  rownames(class) <- gsub("-","\\.",rownames(class))
  colnames(class) <- "Subtypes"
  class$Subtypes <- paste("Subtype",class$Subtypes)
  class$Subtypes <- factor(class$Subtypes)
  
  
  ann_colors = list(Subtypes = c(`Subtype 1` = "#3A94BB", 
                                 `Subtype 2` = "#30B89D",
                                 `Subtype 3` = "#A7C46A",
                                 `Subtype 4` = "#F9B042",
                                 `Subtype 5` = "#E05B3E"))
  #"#015890","#DA4934"
  #83个mutation排序
  s <- as.data.frame(apply(mutation,2,sum))
  colnames(s) <- "freq"
  sample <- merge(s,class,by = 0)
  sample <- sample[order(sample$freq,decreasing = T),]
  sample <- sample[order(sample$Subtype),]
  mutation <- mutation[,sample$Row.names]
  
  #8个mutation排序
  mutation1 <- mutation[c("AHNAK2", "APOB", "CSMD3", "LRP1B", "SPTA1", "USH2A", "XIRP2", "IDH1"),]
  s <- as.data.frame(apply(mutation1,2,sum))
  colnames(s) <- "freq"
  sample <- merge(s,class,by = 0)
  sample <- sample[order(sample$freq,decreasing = T),]
  sample <- sample[order(sample$Subtype),]
  mutation1 <- mutation1[,sample$Row.names]
  
  #idh1
  mutation2 <- mutation["IDH1",]
  s <- as.data.frame(apply(mutation2,2,sum))
  colnames(s) <- "freq"
  sample <- merge(s,class,by = 0)
  sample <- sample[order(sample$freq,decreasing = T),]
  sample <- sample[order(sample$Subtype),]
  mutation2 <- mutation2[,sample$Row.names]
  
  
  
  list <- pheatmap(mutation2, 
                   color = c("white","firebrick3"),
                   annotation_col = class, cluster_cols = FALSE,
                   #cluster_rows = FALSE,
                   #gaps_col = gaps,
                   #cutree_rows =3,
                   #show_rownames=F,
                   show_colnames=F,
                   #clustering_distance_cols = dcol,
                   #scale="row",
                   annotation_colors = ann_colors,size = 0.5,
                   filename = paste0("mutation2.pdf")) 
  
  write.table(sample,"mutataion_freq.txt",sep = "\t",col.names = T,row.names = F,quote = F)
  
  
  


####-- IDH1等gene相关预后 --####
setwd("f:/datahe/immuno/3-co-consensus/avg/")
library(survival)
#install.packages("survminer")
library("survminer")


# 提取临床数据
cancer <- read.table("f:/datahe/immuno/data/Result2.txt",sep = "\t",header = T,stringsAsFactors = F)
cancer$days_to_death.x[cancer$days_to_death.x == "NULL"] <- cancer$days_to_last_follow_up[cancer$days_to_death.x == "NULL"]
cancer$days_to_death.x[cancer$days_to_death.x == "NULL"] <- NA
cancer$days_to_death.x[cancer$days_to_death.x == ""] <- NA
cancer$days_to_death.x <- as.numeric(cancer$days_to_death.x)
cancer$vital_status.x[cancer$vital_status.x == "alive"] <- 0
cancer$vital_status.x[cancer$vital_status.x == "dead"] <- 1
cancer$vital_status.x[cancer$vital_status.x == "notreported"] <- NA
cancer$vital_status.x[cancer$vital_status.x == ""] <- NA
cancer$vital_status.x <- as.numeric(cancer$vital_status.x)


sur <- function(survival,p,j){
  plot(survival, lty = 1:1, col = c("#0099F7", "#e53935"), 
       xlab = "Time", ylab="Survival Probability",
       main = paste0(i," in ",colnames(cancerk)[j]),axes = F,mark.time = T,lwd = 2)
  legend(5000,0.8, num,
  #legend(5000,0.8, paste(names(table(cancerk[,j])),":",table(cancerk[,j])),
         cex=0.8,bty="n",lty = 1:1,col = c("#0099F7", "#e53935")) 
  axis(1,c(0,2000,4000,6000,8000,10000))
  axis(2,c(0,0.2,0.4,0.6,0.8,1))
  text(5000,0.5,paste("p =",signif(p,3)))
  
}

genesymbol <- read.table("plot/molecular/mutation/pam-manhattan5sig.txt",sep = "\t",header = F)
genesymbol <- as.character(genesymbol$V1)
#genesymbol <- "IDH1"
#genesymbol <- c("AHNAK2","APOB","CSMD3","LRP1B","SPTA1","USH2A","XIRP2")
pdf(paste0("plot/gene/gene.pdf"),width = 9,height = 3)
##-- 亚型2中的样本
for(i in genesymbol){
  geneloc <- read.table("e:/siyu/mutation/gene_location.txt",sep = "\t",header = T, stringsAsFactors = F)
  gene <- geneloc$location[geneloc$gene == i]
  mutation <- read.table(paste0("e:/siyu/mutation/pancancer-",gene,".txt"),sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
  gene_mu <- as.data.frame(t(mutation[i,]))
  gene_mu$submitter_id <- gsub("\\.","-",rownames(gene_mu))
  
  colnames(gene_mu)[1] <- "gene"
  
# 提取亚型中的样本
sample <- read.csv("pam-manhattan/pam-manhattan.k=5.consensusClass.csv",header = F,row.names = 1)

sample_c <- rownames(sample)[sample$V2 %in% c(1,2)]
sample_h <- rownames(sample)[sample$V2 %in% c(3,4,5)]

rownames(gene_mu) <- gsub("\\.","-",rownames(gene_mu))
gene_mu$gene <- ifelse(gene_mu$submitter_id %in% rownames(sample),gene_mu$gene,NA)
gene_mu$gene_cold <- ifelse(gene_mu$submitter_id %in% sample_c,gene_mu$gene,NA)
gene_mu$gene_hot <- ifelse(gene_mu$submitter_id %in% sample_h,gene_mu$gene,NA)
#gene_mu$IDH1_C1 <- ifelse(gene_mu$submitter_id %in% sample,gene_mu$IDH1,gene_mu$IDH1 + 2)


## 生存分析
cancerk <- merge(cancer,gene_mu)
#all
kmsurvival <- survfit(Surv(cancerk$days_to_death.x, cancerk$vital_status.x) ~ cancerk$gene)
dif <- survdiff(Surv(cancerk$days_to_death.x, cancerk$vital_status.x) ~ cancerk$gene)#求生存时间
p_value <- pchisq(dif$chisq,1,lower.tail=F)
#cold
kmsurvival_c <- survfit(Surv(cancerk$days_to_death.x, cancerk$vital_status.x) ~ cancerk$gene_cold)
dif_c <- survdiff(Surv(cancerk$days_to_death.x, cancerk$vital_status.x) ~ cancerk$gene_cold)#求生存时间
p_value_c <- pchisq(dif_c$chisq,1,lower.tail=F)
#hot
kmsurvival_h <- survfit(Surv(cancerk$days_to_death.x, cancerk$vital_status.x) ~ cancerk$gene_hot)
dif_h <- survdiff(Surv(cancerk$days_to_death.x, cancerk$vital_status.x) ~ cancerk$gene_hot)#求生存时间
p_value_h <- pchisq(dif_h$chisq,1,lower.tail=F)


#pdf(paste0("plot/gene/",i,".pdf"),width = 9,height = 3)
par(mfrow = c(1,3))
sur(kmsurvival,p_value,17)
sur(kmsurvival_c,p_value_c,18)
sur(kmsurvival_h,p_value_h,19)
#dev.off()

}
dev.off()

cancer$submitter_id <- gsub("-","\\.",cancer$submitter_id)
cancerk <- merge(cancer,sample,by.x = "submitter_id",by.y = "Row.names")
cancerk$mu[cancerk$freq != 0] <- 1
cancerk$mu[cancerk$freq == 0] <- 0
cancerlist <- split(cancerk,cancerk$Subtypes)
#all
pdf("f:/datahe/immuno/3-co-consensus/avg/plot/molecular/mutation/gene/83geneall.pdf",width = 6,height = 6)
kmsurvival <- survfit(Surv(days_to_death.x, vital_status.x) ~ mu,data = cancerk)
dif <- survdiff(Surv(days_to_death.x, vital_status.x) ~ mu,data = cancerk)#求生存时间
p_value <- pchisq(dif$chisq,1,lower.tail=F)
num <- paste(names(table(cancerk$mu)),":",table(cancerk$mu))
sur(kmsurvival,p_value,19)
dev.off()
#亚型
pdf("f:/datahe/immuno/3-co-consensus/avg/plot/gene/83gene.pdf",width = 15,height = 3)
par(mfrow = c(1,5)) 
for(i in names(cancerlist)){
  kmsurvival <- survfit(Surv(days_to_death.x, vital_status.x) ~ mu,data = cancerlist[[i]])
  dif <- survdiff(Surv(days_to_death.x, vital_status.x) ~ mu,data = cancerlist[[i]])#求生存时间
  p_value <- pchisq(dif$chisq,1,lower.tail=F)
  
  num <- paste(names(table(cancerlist[[i]]$mu)),":",table(cancerlist[[i]]$mu))
  sur(kmsurvival,p_value,19)
  
}
dev.off()
###############
##  mRNA表达 ##
###############
genes <- data.frame()
for(i in 1:20){
  mutation <- read.table(paste0("/pub6/siyu/ucsc-mRNA-FPKM-UQ/pancancer-",i,".txt"),sep = "\t",header = T)
  genes <- rbind(genes,data.frame(gene = mutation$Sample,location = i))
}
write.table(genes,"/pub6/siyu/ucsc-mRNA-FPKM-UQ/gene_location.txt",sep = "\t",quote = F,col.names = T,row.names = F)


## 构建表达谱
# 在方法得到的显著基因个数出现频率高于3的基因

# 所有显著性的基因
gene <- read.table("sig-mRNA.txt",sep = "\t",header = T,row.names = 1)
gene_loc <- read.table("/pub6/siyu/ucsc-mRNA-FPKM-UQ/gene_location.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
loc <- unique(gene_loc[rownames(gene),])

mRNA_all <- data.frame()
for(i in loc){
  mRNA <- read.table(paste0("/pub6/siyu/ucsc-mRNA-FPKM-UQ/pancancer-",i,".txt"),sep = "\t",header = T,row.names = 1)
  mRNA <- mRNA[intersect(rownames(mRNA),rownames(gene)),]
  mRNA_all <- rbind(mRNA_all,mRNA)
}
write.table(mRNA_all,"mRNA_sig_all.txt",sep = "\t",row.names = T,col.names = T,quote = F)

# 在pam-manhattan 5类方法中出现的显著基因
gene <- read.table("mRNA-pam5-Wil-FC.txt",sep = "\t",header = T,stringsAsFactors = F)
gene <- unique(gene[gene$Method == "pam-manhattan" & gene$Group == 5,"Gene"])
gene_loc <- read.table("/pub6/siyu/ucsc-mRNA-FPKM-UQ/gene_location.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
loc <- unique(gene_loc[gene,])

mRNA_p <- data.frame()
for(i in loc){
  mRNA <- read.table(paste0("/pub6/siyu/ucsc-mRNA-FPKM-UQ/pancancer-",i,".txt"),sep = "\t",header = T,row.names = 1)
  mRNA <- mRNA[intersect(rownames(mRNA),gene),]
  mRNA_p <- rbind(mRNA_p,mRNA)
}
write.table(mRNA_p,"mRNA_sig_pamman5.txt",sep = "\t",row.names = T,col.names = T,quote = F)


## start
library(pheatmap)
library(RColorBrewer)
setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/mRNA")

mRNA_all <- read.table("mRNA_sig_all.txt",sep = "\t",row.names = 1,header = T)
mRNA_all <- scale(mRNA_all)

mRNA_p <- read.table("mRNA_sig_pamman5.txt",sep = "\t",row.names = 1,header = T)
#mRNA_p <- scale(mRNA_p)
mRNA_p <- mRNA_p[,intersect(rownames(class)[order(class$Subtypes)],colnames(mRNA_p))]


## 画图
class <- read.csv("/pub6/siyu/3-co-consensus/avg/pam-manhattan/pam-manhattan.k=5.consensusClass.csv",header = F,stringsAsFactors = F)
cancer <- read.table("/pub6/siyu/data/immuno-feature.txt",header = T,sep = "\t",stringsAsFactors = F)
cancer <- merge(cancer[,c(1,2)],class,by.x = "TCGA.Participant.Barcode",by.y = "V1")
cancer$class[cancer$V2 == 1 | cancer$V2 == 2] <- "Cold Tumors"
cancer$class[cancer$V2 == 3 | cancer$V2 == 4 | cancer$V2 == 5] <- "Hot Tumors"
cancer$V2 <- paste("Subtype",cancer$V2)
cancer <- cancer[order(cancer$TCGA.Study,cancer$V2),]
rownames(cancer) <- gsub("-","\\.",cancer$TCGA.Participant.Barcode)
cancer <- cancer[,-1]
colnames(cancer) <- c("Cancer","Subtypes","Class")

ann_colors = list(Subtypes = c(`Subtype 1` = "#3A94BB", 
                               `Subtype 2` = "#30B89D",
                               `Subtype 3` = "#A7C46A",
                               `Subtype 4` = "#F9B042",
                               `Subtype 5` = "#E05B3E"),
                  Cancer = c(brewer.pal(12, "Set3"),
                             brewer.pal(4, "Pastel1"),
                             brewer.pal(8, "Paired"),
                             brewer.pal(8, "Set2")),
                  Class = c(`Cold Tumors` = "#015890",
                            `Hot Tumors` = "#DA4934"))
#"#015890","#DA4934"
names(ann_colors$Cancer) <- unique(cancer$Cancer)

## 构建表达谱标签 annotation_col
class <- read.csv("/pub6/siyu/3-co-consensus/avg/pam-manhattan/pam-manhattan.k=5.consensusClass.csv",header = F,row.names = 1)
colnames(class) <- "Subtypes"
class$Subtypes <- paste("Subtype",class$Subtypes)
class$Subtypes <- factor(class$Subtypes)
rownames(class) <- gsub("-","\\.",rownames(class))


gap <- 0
gaps <- c()
for(i in as.numeric(table(class[intersect(rownames(class),colnames(mRNA_p)),]))){
  gap <- i + gap
  gaps <- c(gaps,gap)
}



list <- pheatmap(mRNA_p, 
                 color = colorRampPalette(c("white","firebrick3"))(100),
                 annotation_col = cancer, cluster_cols = FALSE,
                 gaps_col = gaps,
                 cutree_rows =3,
                 show_rownames=F,show_colnames=F,
                 #clustering_distance_cols = dcol,
                 #scale="row",
                 annotation_colors = ann_colors,size = 1,
                 filename = paste0("expression/mRNA-p.png"))
row_cluster <- as.data.frame(cutree(list$tree_row,k=3))
colnames(row_cluster) <- "clust"
row_cluster$clust <- as.character(row_cluster$clust)

write.table(row_cluster,"row_cluster.txt",sep = "\t",quote = F,col.names = T,row.names = T)

# 画出2-3类(显著区分)
mRNA_psig <- mRNA_p[rownames(row_cluster)[row_cluster$clust != 1],]

list1 <- pheatmap(mRNA_psig, 
                 color = colorRampPalette(c("white","firebrick3"))(100),
                 annotation_col = cancer, cluster_cols = FALSE,
                 gaps_col = gaps,
                 #cutree_rows =8,
                 show_rownames=F,show_colnames=F,
                 #legend_breaks = c(0,1:ceiling(max(mRNA_p))),
                 
                 #clustering_distance_cols = dcol,
                 #scale="row",
                 annotation_colors = ann_colors,size = 1,
                 filename = paste0("expression/mRNA-p-2-3.png"))

newOrder <- mRNA_psig[list1$tree_row$order,]
write.table(newOrder,"expression/sig-mRNA-matrix.txt",sep = "\t",col.names = T,row.names = T,quote = F)

## 用fc画显著基因
library(ggplot2)
setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/mRNA")

newOrder <- read.table("expression/sig-mRNA-matrix.txt",sep = "\t",header = T,stringsAsFactors = F)
row_cluster <- read.table("expression/row_cluster.txt",sep = "\t",header = T,stringsAsFactors = F)
gene <- read.table("mRNA-pam5-Wil-FC.txt",sep = "\t",header = T,stringsAsFactors = F)

a <- gene[gene$Method == "pam-manhattan" & gene$Group == 5 & gene$Gene %in% rownames(newOrder),]
a <- merge(a,row_cluster,by.x = "Gene",by.y = "row.names")
a$FCp <- log2(a$FCp)
a$FCp[a$FCp == -Inf] <- -max(abs(a$FCp[a$FCp != -Inf]))
a$Wilpvalue[is.na(a$Wilpvalue)] <- 0
a$Gene <- factor(a$Gene,levels = rev(rownames(newOrder)))
a$clust <- factor(a$clust,levels = c(3,2))
p <- ggplot(a,aes(Gene,-log10(Wilpvalue)))
p + #geom_tile(aes(fill = FCp)) +
  #geom_bar(color = "grey30",fill = "transparent",stat = "identity",position = "fill") +
  geom_bar(aes(fill = FCp),stat = "identity") +
  scale_fill_gradient2(low = "#05004E",high = "#FF0000",mid = "#F9F9F9") +
  coord_flip()  +
  facet_grid(clust~Subgroup,scales = "free",space = "free_y") + 
  labs(title = i,x = paste0("Gene = ",length(unique(a$Gene)))) +
  theme(#legend.position = "top",
    legend.background=element_blank(),
    axis.text.x=element_text(size=10),
    axis.text.y = element_text(size = 0.5),
    axis.line.x = element_line(size = 0.5, colour = "black"),
    axis.line.y = element_line(size = 0.5, colour = "black"),
    strip.background = element_blank(),
    panel.background = element_blank(),
    panel.border = element_blank(),
    panel.grid = element_blank())
ggsave(paste0("expression/",i,"-sig.pdf"),width = 10,height = 10)


## gene中mRNA lncRNA miRNA的含量
setwd("f:/datahe/immuno/3-co-consensus/avg/plot/molecular/mRNA/expression/")
gene_id <- read.table("gene-id.txt",sep = "\t",header = T,stringsAsFactors = F)
row_cluster <- read.table("row_cluster.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
row_cluster$Gene.stable.ID <- gsub("\\..*$","",rownames(row_cluster))
row_clust_new <- merge(row_cluster,gene_id)

row_clust_sig <- row_clust_new[row_clust_new$clust == 2 | row_clust_new$clust == 3,]
a <- as.data.frame(table(row_clust_sig$Gene.type,row_clust_sig$clust))

write.table(row_clust_sig,"row_clust_sig.txt",sep = "\t",col.names = T,row.names = F,quote = F)



#######################
##  显著mRNA cox模型 ##
#######################
#setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/mRNA")
setwd("f:/datahe/immuno/3-co-consensus/avg/plot/molecular/mRNA")
library(survival)

gene <- read.table("mRNA_sig_pamman5.txt",sep = "\t",header = T,row.names = 1)
immuno <- read.table("f:/datahe/immuno/data/免疫特征的免疫免疫特征矩阵.txt",header = T,sep = "\t",row.names = 1)
immuno  <- immuno[,c("OS","OS.Time","PFI","PFI.Time")]


gene <- as.data.frame(t(gene))
rownames(gene) <- gsub("\\.","-",rownames(gene))
gene <- merge(gene,immuno,by = 0)
gene <- gene[,-1]

##--> 单cox
cat("gene","coef","exp(coef)","se(coef)","z","p","exp(coef)","exp(-coef)","lower .95","upper .95","\n",
    file = paste0("sig/单cox.txt"),sep = "\t",append = T)
for (i in 1:(ncol(gene)-4)){
  single_cox <- summary(coxph(Surv(OS.Time,OS) ~ gene[,i],data = gene))
  cat(colnames(gene)[i],c(single_cox$coefficients[1,],single_cox$conf.int[1,]),"\n",
      file = paste0("sig/单cox.txt"),sep = "\t",append = T)
}


##--> 多cox
genecox <- read.table("sig/单cox.txt",sep = "\t",header = T)
genesig <- as.character(genecox[genecox$p <= 0.01,"gene"])

## 计算
gene <- gene[,c(genesig,"OS","OS.Time")]
cox <- summary(coxph(Surv(OS.Time,OS) ~ .,data = gene))
genecox <- cbind(data.frame(cox$coefficients),data.frame(cox$conf.int))
write.table(genecox,file = "sig/多cox.txt",sep = "\t",quote = F)

## 处理
genecox <- read.table("sig/多cox.txt",sep = "\t",header = T)
genesig <- genecox[genecox$Pr...z.. <= 0.01,]
gene <- gene[,c(rownames(genesig),"OS","OS.Time","PFI","PFI.Time")]
genehr <- genesig$coef
names(genehr) <- rownames(genesig)
gene$risk <- apply(gene[,1:44],1,function(x){sum(x * genehr)})
gene$class <- ifelse(gene$risk <= median(gene$risk),0,1)



geneid <- read.table("expression/gene-id.txt",sep = "\t",header = T)
genename <- data.frame(Gene.stable.ID = gsub("\\..*$","",colnames(gene)[1:44]))
genename <- merge(genename,geneid)

write.table(gene,file = "sig/genesig44.txt",sep = "\t",quote = F,col.names = T,row.names = T)

gene1 <- as.data.frame(t(gene))
gene1$Gene.stable.ID <-  gsub("\\..*$","",rownames(gene1))
gene1 <- merge(geneid,gene1,all.y = T)
gene1 <- gene1[-c(grep("pseudogene",gene1$Gene.type),43,48),]
gene1$Gene.name <- as.character(gene1$Gene.name)
gene1$Gene.name[35:40] <- c("OS","OS.Time","PFI","PFI.Time","class", "risk")
rownames(gene1) <- gene1$Gene.name
gene1 <- gene1[,-c(1:3)]
gene1 <- as.data.frame(t(gene1))

rownames(genesig) <- gsub("\\..*$","",rownames(genesig))
genesig <- merge(genesig,geneid,by.x = 0,by.y = "Gene.stable.ID")
genesig <- genesig[-grep("pseudogene",genesig$Gene.type),]
genehr <- genesig$coef
names(genehr) <- genesig$Gene.name
gene1$risk <- apply(gene1[,1:34],1,function(x){sum(x * genehr)})
gene1$class <- ifelse(gene1$risk <= median(gene1$risk),0,1)
write.table(gene1,file = "sig/genesig34.txt",sep = "\t",quote = F,col.names = T,row.names = F)


## 生存曲线
kmsurvival <- survfit(Surv(OS.Time, OS) ~ class, data = gene1)
dif <- survdiff(Surv(OS.Time, OS) ~ class, data = gene1)#求生存时间
p_value <- pchisq(dif$chisq,1,lower.tail=F)


pdf("sig/survival34.pdf",width = 10,height = 10)
plot(kmsurvival, lty = 1:1, col = c("#2F7336","#AA3A38"), 
     xlab = "Time", ylab="Survival Probability",
     main = "High risk and Low risk",axes = F,mark.time = T,lwd = 2)
legend(8000,0.8, paste(names(table(gene1$class)),":",table(gene1$class)),
       cex=0.8,bty="n",lty = 1:1,col = c("#2F7336","#AA3A38")) 
axis(1,c(0,2000,4000,6000,8000,10000))
axis(2,c(0,0.2,0.4,0.6,0.8,1))
text(8000,0.5,paste("p =",signif(p_value,3)))
dev.off()

####-- 随机森林train -- ####
setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/mRNA/sig")
library(randomForest)
library(ggplot2)
library(cowplot)
library(caret)

## 原始数据
matrix <- read.table("genesig34.txt",sep = "\t",header = T)
matrix <- matrix[,c(1:34,39)]
colnames(matrix)[35] <- "V2"
matrix$V2 <- factor(matrix$V2) 

## 构建测试集，训练集
ind <- sample(2,nrow(matrix),replace = TRUE, prob = c(0.7,0.3))
set.seed(100)
train <- matrix[ind == 1,]
test <- matrix[ind == 2,]

#colnames(train) <- gsub("-","\\.",colnames(train))
#colnames(test) <- gsub("-","\\.",colnames(test))

#data.imputed <- rfImpute(V2 ~ ., data = train, iter = 6) # 有NA
## 选取误差最小的节点数mtry
n <- length(names(train))
set.seed(100)
err <- c()
for(i in 1:(n-1)){
  mtry_fit <- randomForest(V2 ~ ., data = train,mtry = i)
  err <- c(err,mean(mtry_fit$err.rate))
}
mtry <- which.min(err) #3

#t <- tuneRF(train[,-126],train[,126],
#            stepFactor = 0.5,
#            plot = TRUE,
#            ntreeTry = 1000,
#            trace = TRUE,
#           improve = 0.05)

#hist(treesize(rf),
#     main = "No. of Nodes for the Trees",
#     col = "green")

## 选择ntree数目，默认500
set.seed(222)
ntree_fit <- randomForest(V2 ~ ., data = train,mtry = mtry,ntree = 1000)

oob_error.data <- data.frame(
  Trees = rep(1:nrow(ntree_fit$err.rate),times = 3),
  Type = rep(c("0","1","OOB"),each = nrow(ntree_fit$err.rate)),
  Error = c(ntree_fit$err.rate[,"0"],
            ntree_fit$err.rate[,"1"],
            ntree_fit$err.rate[,"OOB"]))

p <- ggplot(data = oob_error.data,aes(x = Trees, y = Error))
p + geom_line(aes(color = Type)) +
  scale_color_manual(values = c("#AA3A38", "#2F7336","black")) +
  theme(axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        #axis.title = element_blank(),
        #strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
ggsave("1-genesig-34.pdf")





## 结果
set.seed(200)
rf <- randomForest(V2 ~ ., data = train,mtry = mtry,ntree = 1000,importance = TRUE,proximity=TRUE)


## 重要性
# gini指数表示节点的纯度，gini指数越大纯度越低。
# gini值平均降低量表示所有树的变量分割节点平均减小的不纯度。
# 对于变量重要度衡量，步骤如同前面介绍，将变量数据打乱，
# gini指数变化的均值作为变量的重要程度度量。
importance <- importance(x = rf)
write.table(importance,"importance-genesig-34.txt",sep = "\t",quote = F)
importance <- read.table("importance-genesig-34.txt",sep = "\t",header = T)
varUsed(rf) # 按重要性排列

## 精确度，基尼系数
pdf("importance-genesig-34.pdf")
varImpPlot(rf,sort = T)
dev.off()

## prediction % confusion matrix - train data
p1 <- predict(rf,train,type = "prob")
confusionMatrix(p1,train$V2)


p1 <- apply(p1,1,max)
## prediction % confusion matrix - test data
p2 <- predict(rf,test)
confusionMatrix(p2,test$V2)


## ROC
library(pROC)
pdf("roc-train-genesig-34.pdf")
#par(mfrow = c(2,3),pty = "s")
par(pty = "s")
roc(train$V2,rf$votes[,1],plot = TRUE,
               legacy.axes=TRUE, #percent=TRUE, 
               xlab="False Positive Percentage", 
               ylab="True Postive Percentage", 
               col="#377eb8", lwd=4, print.auc=TRUE)
dev.off()
## 最后验证并预测
pred1<-predict(rf,newdata=test)
Freq1<-table(pred1,test$V2)
tp<-as.data.frame(Freq1)[4,3]
tn<-as.data.frame(Freq1)[1,3]
fn<-as.data.frame(Freq1)[2,3]
fp<-as.data.frame(Freq1)[3,3]
p<-tp/(tp+fp)
r<-tp/(tp+fn)
f<-2/(1/p+1/r)


sum(diag(Freq1))/sum(Freq1)
pdf("2-genesig34.pdf")
plot(margin(rf$votes,test$V2),main = "观测值被判断正确的概率图")
dev.off()


## MDS plot - Multi-dimensional Scaling Plot of Proximity Matrix
MDSplot(rf,fac = train$V2,palette = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E"))
distance.matrix <- dist(1-rf$proximity)
mds.stuff <- cmdscale(distance.matrix, eig = TRUE, x.ret =  TRUE)
mds.var.per <- round(mds.stuff$eig/sum(mds.stuff$eig)*100, 1)
mds.values <- mds.stuff$points
mds.data <- data.frame(Sample = rownames(mds.values),
                       X = mds.values[,1],
                       Y = mds.values[,2],
                       Status = train$V2)
p <- ggplot(data = mds.data, aes(x = X, y = Y, label = Sample))
p + geom_point(aes(color = Status)) +
  xlab(paste0("MDS1 - ", mds.var.per[1], "%")) +
  ylab(paste0("MDS2 - ", mds.var.per[2], "%")) +
  ggtitle("MDS plot using (1 - Random Forest Proximities)") +
  scale_color_manual(values = c("#015890","#DA4934","black")) +
  
  #scale_color_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","black")) +
  theme(axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        #axis.title = element_blank(),
        #strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
ggsave("MDS1-genesig-34.pdf")


####-- geo -- ####
##
setwd("f:/datahe/immuno/3-co-consensus/avg/plot/test")




##############
## 随机森林 ##
##############
####-- 五类随机森林132+83 --####
setwd("f:/datahe/immuno/3-co-consensus/avg/plot/molecular/mRNA/expression/")
setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/mRNA/expression")
library(randomForest)
library(ggplot2)
library(cowplot)
library(caret)

## 原始数据
# 显著基因
gene <- read.table("row_clust_sig.txt",sep = "\t",header = T,stringsAsFactors = F)
gene <- gene[-grep("pseudogene",gene$Gene.type),]
# 样本亚型数据
class <- read.csv("/pub6/siyu/3-co-consensus/avg/pam-manhattan/pam-manhattan.k=5.consensusClass.csv",header = F,row.names = 1)
# 基因表达谱
matrix <- read.table("sig-mRNA-matrix.txt",sep = "\t",header = T,row.names = 1)
rownames(matrix) <- gsub("\\..*$","",rownames(matrix))
colnames(matrix) <- gsub("\\.","-",colnames(matrix))
matrix <- merge(matrix,gene[,c(1,3)],by.x = 0,by.y = "Gene.stable.ID")
rownames(matrix) <- matrix[,8824]
matrix <- matrix[,-c(1,8824)]
matrix <- as.data.frame(t(matrix))
matrix <- merge(matrix,class,by = 0)
rownames(matrix) <- matrix$Row.names
matrix <- matrix[,-1]
matrix$V2 <- factor(matrix$V2)

## 构建测试集，训练集
ind <- sample(2,nrow(matrix),replace = TRUE, prob = c(0.7,0.3))
set.seed(100)
train <- matrix[ind == 1,]
test <- matrix[ind == 2,]

colnames(train) <- gsub("-","\\.",colnames(train))
colnames(test) <- gsub("-","\\.",colnames(test))

#data.imputed <- rfImpute(V2 ~ ., data = train, iter = 6) # 有NA
## 选取误差最小的节点数mtry
n <- length(names(train))
set.seed(100)
err <- c()
for(i in 1:(n-1)){
  mtry_fit <- randomForest(V2 ~ ., data = train,mtry = i)
  err <- c(err,mean(mtry_fit$err.rate))
}
mtry <- which.min(err) #64

#t <- tuneRF(train[,-126],train[,126],
#            stepFactor = 0.5,
#            plot = TRUE,
#            ntreeTry = 1000,
#            trace = TRUE,
 #           improve = 0.05)

hist(treesize(rf),
     main = "No. of Nodes for the Trees",
     col = "green")

## 选择ntree数目，默认500
set.seed(222)
ntree_fit <- randomForest(V2 ~ ., data = train,mtry = mtry,ntree = 1500)

oob_error.data <- data.frame(
  Trees = rep(1:nrow(ntree_fit$err.rate),times = 6),
  Type = rep(c(1:5,"OOB"),each = nrow(ntree_fit$err.rate)),
  Error = c(ntree_fit$err.rate[,"1"],
            ntree_fit$err.rate[,"2"],
            ntree_fit$err.rate[,"3"],
            ntree_fit$err.rate[,"4"],
            ntree_fit$err.rate[,"5"],
            ntree_fit$err.rate[,"OOB"]))

p <- ggplot(data = oob_error.data,aes(x = Trees, y = Error))
p + geom_line(aes(color = Type)) +
  scale_color_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","black")) +
  theme(axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        #axis.title = element_blank(),
        #strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
ggsave("1.pdf")


## 结果
set.seed(200)
rf <- randomForest(V2 ~ ., data = train,mtry = mtry,ntree = 1300,importance = TRUE,proximity=TRUE)


## 重要性
# gini指数表示节点的纯度，gini指数越大纯度越低。
# gini值平均降低量表示所有树的变量分割节点平均减小的不纯度。
# 对于变量重要度衡量，步骤如同前面介绍，将变量数据打乱，
# gini指数变化的均值作为变量的重要程度度量。
importance <- importance(x = rf)
importance <- read.table("importance.txt",sep = "\t",header = T)
varUsed(rf) # 按重要性排列

## 精确度，基尼系数
pdf("importance.pdf")
varImpPlot(rf,sort = T)
dev.off()

## prediction % confusion matrix - train data
p1 <- predict(rf,train,type = "prob")
confusionMatrix(p1,train$V2)


p1 <- apply(p1,1,max)
## prediction % confusion matrix - test data
p2 <- predict(rf,test)
confusionMatrix(p2,test$V2)


## ROC
library(pROC)
pdf("roc-train.pdf")
par(mfrow = c(2,3),pty = "s")
par(pty = "s")
multiclass.roc(train$V2,as.numeric(p1),plot = TRUE,
    legacy.axes=TRUE, #percent=TRUE, 
    xlab="False Positive Percentage", 
    ylab="True Postive Percentage", 
    col="#377eb8", lwd=4, print.auc=TRUE)
dev.off()
## 最后验证并预测
pred1<-predict(rf,newdata=test)
Freq1<-table(pred1,test$V2)
tp<-as.data.frame(Freq1)[4,3]
tn<-as.data.frame(Freq1)[1,3]
fn<-as.data.frame(Freq1)[2,3]
fp<-as.data.frame(Freq1)[3,3]
p<-tp/(tp+fp)
r<-tp/(tp+fn)
f<-2/(1/p+1/r)


sum(diag(Freq1))/sum(Freq1)
pdf("2.pdf")
plot(margin(rf,as.character(test$V2)),main = "观测值被判断正确的概率图")
dev.off()


## MDS plot - Multi-dimensional Scaling Plot of Proximity Matrix
MDSplot(rf,fac = train$V2,palette = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E"))
distance.matrix <- dist(1-rf$proximity)
mds.stuff <- cmdscale(distance.matrix, eig = TRUE, x.ret =  TRUE)
mds.var.per <- round(mds.stuff$eig/sum(mds.stuff$eig)*100, 1)
mds.values <- mds.stuff$points
mds.data <- data.frame(Sample = rownames(mds.values),
                       X = mds.values[,1],
                       Y = mds.values[,2],
                       Status = train$V2)
p <- ggplot(data = mds.data, aes(x = X, y = Y, label = Sample))
p + geom_point(aes(color = Status)) +
  xlab(paste0("MDS1 - ", mds.var.per[1], "%")) +
  ylab(paste0("MDS2 - ", mds.var.per[2], "%")) +
  ggtitle("MDS plot using (1 - Random Forest Proximities)") +
  scale_color_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","black")) +
  theme(axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        #axis.title = element_blank(),
        #strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
ggsave("MDS1.pdf")



####-- 两类随机森林132+83 --####
setwd("f:/datahe/immuno/3-co-consensus/avg/plot/molecular/mRNA/expression/")
setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/mRNA/expression")
library(randomForest)
library(ggplot2)
library(cowplot)
library(caret)

## 原始数据
# 显著基因
gene <- read.table("row_clust_sig.txt",sep = "\t",header = T,stringsAsFactors = F)
gene <- gene[-grep("pseudogene",gene$Gene.type),]
# 样本亚型数据
class <- read.csv("/pub6/siyu/3-co-consensus/avg/pam-manhattan/pam-manhattan.k=5.consensusClass.csv",header = F,row.names = 1)
class$V2[class$V2 == 1 | class$V2 == 2] <- "Cold_Tumors"
class$V2[class$V2 == 3 | class$V2 == 4 | class$V2 == 5] <- "Hot_Tumors"
# 基因表达谱
matrix <- read.table("sig-mRNA-matrix.txt",sep = "\t",header = T,row.names = 1)
rownames(matrix) <- gsub("\\..*$","",rownames(matrix))
colnames(matrix) <- gsub("\\.","-",colnames(matrix))
matrix <- merge(matrix,gene[,c(1,3)],by.x = 0,by.y = "Gene.stable.ID")
rownames(matrix) <- matrix[,8824]
matrix <- matrix[,-c(1,8824)]
matrix <- as.data.frame(t(matrix))
matrix <- merge(matrix,class,by = 0)
rownames(matrix) <- matrix$Row.names
matrix <- matrix[,-1]
matrix$V2 <- factor(matrix$V2)

## 构建测试集，训练集
ind <- sample(2,nrow(matrix),replace = TRUE, prob = c(0.7,0.3))
set.seed(100)
train <- matrix[ind == 1,]
test <- matrix[ind == 2,]

colnames(train) <- gsub("-","\\.",colnames(train))
colnames(test) <- gsub("-","\\.",colnames(test))

#data.imputed <- rfImpute(V2 ~ ., data = train, iter = 6) # 有NA
## 选取误差最小的节点数mtry
n <- length(names(train))
set.seed(100)
err <- c()
for(i in 1:(n-1)){
  mtry_fit <- randomForest(V2 ~ ., data = train,mtry = i)
  err <- c(err,mean(mtry_fit$err.rate))
}
mtry <- which.min(err) #64

#t <- tuneRF(train[,-126],train[,126],
#            stepFactor = 0.5,
#            plot = TRUE,
#            ntreeTry = 1000,
#            trace = TRUE,
#           improve = 0.05)

hist(treesize(rf),
     main = "No. of Nodes for the Trees",
     col = "green")

## 选择ntree数目，默认500
set.seed(222)
ntree_fit <- randomForest(V2 ~ ., data = train,mtry = mtry,ntree = 1500)

oob_error.data <- data.frame(
  Trees = rep(1:nrow(ntree_fit$err.rate),times = 3),
  Type = rep(c("Cold_Tumors","Hot_Tumors","OOB"),each = nrow(ntree_fit$err.rate)),
  Error = c(ntree_fit$err.rate[,"Cold_Tumors"],
            ntree_fit$err.rate[,"Hot_Tumors"],
            ntree_fit$err.rate[,"OOB"]))

p <- ggplot(data = oob_error.data,aes(x = Trees, y = Error))
p + geom_line(aes(color = Type)) +
  scale_color_manual(values = c("#015890","#DA4934","black")) +
  theme(axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        #axis.title = element_blank(),
        #strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
ggsave("1-hc.pdf")





## 结果
set.seed(200)
rf <- randomForest(V2 ~ ., data = train,mtry = mtry,ntree = 1300,importance = TRUE,proximity=TRUE)


## 重要性
# gini指数表示节点的纯度，gini指数越大纯度越低。
# gini值平均降低量表示所有树的变量分割节点平均减小的不纯度。
# 对于变量重要度衡量，步骤如同前面介绍，将变量数据打乱，
# gini指数变化的均值作为变量的重要程度度量。
importance <- importance(x = rf)
write.table(importance,"importance-hc.txt",sep = "\t",quote = F)
importance <- read.table("importance.txt",sep = "\t",header = T)
varUsed(rf) # 按重要性排列

## 精确度，基尼系数
pdf("importance-hc.pdf")
varImpPlot(rf,sort = T)
dev.off()

## prediction % confusion matrix - train data
p1 <- predict(rf,train,type = "prob")
confusionMatrix(p1,train$V2)


p1 <- apply(p1,1,max)
## prediction % confusion matrix - test data
p2 <- predict(rf,test)
confusionMatrix(p2,test$V2)


## ROC
library(pROC)
pdf("roc-train-hc.pdf")
#par(mfrow = c(2,3),pty = "s")
par(pty = "s")
multiclass.roc(train$V2,rf$votes[,1],plot = TRUE,
               legacy.axes=TRUE, #percent=TRUE, 
               xlab="False Positive Percentage", 
               ylab="True Postive Percentage", 
               col="#377eb8", lwd=4, print.auc=TRUE)
dev.off()
## 最后验证并预测
pred1<-predict(rf,newdata=test)
Freq1<-table(pred1,test$V2)
tp<-as.data.frame(Freq1)[4,3]
tn<-as.data.frame(Freq1)[1,3]
fn<-as.data.frame(Freq1)[2,3]
fp<-as.data.frame(Freq1)[3,3]
p<-tp/(tp+fp)
r<-tp/(tp+fn)
f<-2/(1/p+1/r)


sum(diag(Freq1))/sum(Freq1)
pdf("2-hc.pdf")
plot(margin(rf$votes,test$V2),main = "观测值被判断正确的概率图")
dev.off()


## MDS plot - Multi-dimensional Scaling Plot of Proximity Matrix
MDSplot(rf,fac = train$V2,palette = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E"))
distance.matrix <- dist(1-rf$proximity)
mds.stuff <- cmdscale(distance.matrix, eig = TRUE, x.ret =  TRUE)
mds.var.per <- round(mds.stuff$eig/sum(mds.stuff$eig)*100, 1)
mds.values <- mds.stuff$points
mds.data <- data.frame(Sample = rownames(mds.values),
                       X = mds.values[,1],
                       Y = mds.values[,2],
                       Status = train$V2)
p <- ggplot(data = mds.data, aes(x = X, y = Y, label = Sample))
p + geom_point(aes(color = Status)) +
  xlab(paste0("MDS1 - ", mds.var.per[1], "%")) +
  ylab(paste0("MDS2 - ", mds.var.per[2], "%")) +
  ggtitle("MDS plot using (1 - Random Forest Proximities)") +
  scale_color_manual(values = c("#015890","#DA4934","black")) +
  
  #scale_color_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","black")) +
  theme(axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        #axis.title = element_blank(),
        #strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
ggsave("MDS1-hc.pdf")



####-- 两类随机森林83 --####
setwd("f:/datahe/immuno/3-co-consensus/avg/plot/molecular/mRNA/expression/")
setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/mRNA/expression")
library(randomForest)
library(ggplot2)
library(cowplot)
library(caret)

## 原始数据
# 显著基因
gene <- read.table("row_clust_sig.txt",sep = "\t",header = T,stringsAsFactors = F)
gene <- gene[-grep("pseudogene",gene$Gene.type),]
gene <- gene[gene$clust == 3,]
gene$Gene.name <- gsub("-","_",gene$Gene.name)
# 样本亚型数据
class <- read.csv("/pub6/siyu/3-co-consensus/avg/pam-manhattan/pam-manhattan.k=5.consensusClass.csv",header = F,row.names = 1)
class$V2[class$V2 == 1 | class$V2 == 2] <- "Cold_Tumors"
class$V2[class$V2 == 3 | class$V2 == 4 | class$V2 == 5] <- "Hot_Tumors"
# 基因表达谱
matrix <- read.table("sig-mRNA-matrix.txt",sep = "\t",header = T,row.names = 1)
rownames(matrix) <- gsub("\\..*$","",rownames(matrix))
colnames(matrix) <- gsub("\\.","-",colnames(matrix))
matrix <- merge(matrix,gene[,c(1,3)],by.x = 0,by.y = "Gene.stable.ID")
rownames(matrix) <- matrix[,8824]
matrix <- matrix[,-c(1,8824)]
matrix <- as.data.frame(t(matrix))
matrix <- merge(matrix,class,by = 0)
rownames(matrix) <- matrix$Row.names
matrix <- matrix[,-1]
matrix$V2 <- factor(matrix$V2)

## 构建测试集，训练集
ind <- sample(2,nrow(matrix),replace = TRUE, prob = c(0.7,0.3))
set.seed(100)
train <- matrix[ind == 1,]
test <- matrix[ind == 2,]

#colnames(train) <- gsub("-","\\.",colnames(train))
#colnames(test) <- gsub("-","\\.",colnames(test))

#data.imputed <- rfImpute(V2 ~ ., data = train, iter = 6) # 有NA
## 选取误差最小的节点数mtry
n <- length(names(train))
set.seed(100)
err <- c()
for(i in 1:(n-1)){
  mtry_fit <- randomForest(V2 ~ ., data = train,mtry = i)
  err <- c(err,mean(mtry_fit$err.rate))
}
mtry <- which.min(err) #31

#t <- tuneRF(train[,-126],train[,126],
#            stepFactor = 0.5,
#            plot = TRUE,
#            ntreeTry = 1000,
#            trace = TRUE,
#           improve = 0.05)

hist(treesize(rf),
     main = "No. of Nodes for the Trees",
     col = "green")

## 选择ntree数目，默认500
set.seed(222)
ntree_fit <- randomForest(V2 ~ ., data = train,mtry = mtry,ntree = 1500)

oob_error.data <- data.frame(
  Trees = rep(1:nrow(ntree_fit$err.rate),times = 3),
  Type = rep(c("Cold_Tumors","Hot_Tumors","OOB"),each = nrow(ntree_fit$err.rate)),
  Error = c(ntree_fit$err.rate[,"Cold_Tumors"],
            ntree_fit$err.rate[,"Hot_Tumors"],
            ntree_fit$err.rate[,"OOB"]))

p <- ggplot(data = oob_error.data,aes(x = Trees, y = Error))
p + geom_line(aes(color = Type)) +
  scale_color_manual(values = c("#015890","#DA4934","black")) +
  theme(axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        #axis.title = element_blank(),
        #strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
ggsave("1-hc-83.pdf")





## 结果
set.seed(200)
rf <- randomForest(V2 ~ ., data = train,mtry = mtry,ntree = 1000,importance = TRUE,proximity=TRUE)


## 重要性
# gini指数表示节点的纯度，gini指数越大纯度越低。
# gini值平均降低量表示所有树的变量分割节点平均减小的不纯度。
# 对于变量重要度衡量，步骤如同前面介绍，将变量数据打乱，
# gini指数变化的均值作为变量的重要程度度量。
importance <- importance(x = rf)
write.table(importance,"importance-hc-83.txt",sep = "\t",quote = F)
importance <- read.table("importance.txt",sep = "\t",header = T)
varUsed(rf) # 按重要性排列

## 精确度，基尼系数
pdf("importance-hc-83.pdf")
varImpPlot(rf,sort = T)
dev.off()

## prediction % confusion matrix - train data
p1 <- predict(rf,train,type = "prob")
confusionMatrix(p1,train$V2)


p1 <- apply(p1,1,max)
## prediction % confusion matrix - test data
p2 <- predict(rf,test)
confusionMatrix(p2,test$V2)


## ROC
library(pROC)
pdf("roc-train-hc-83.pdf")
#par(mfrow = c(2,3),pty = "s")
par(pty = "s")
multiclass.roc(train$V2,rf$votes[,1],plot = TRUE,
               legacy.axes=TRUE, #percent=TRUE, 
               xlab="False Positive Percentage", 
               ylab="True Postive Percentage", 
               col="#377eb8", lwd=4, print.auc=TRUE)
dev.off()
## 最后验证并预测
pred1<-predict(rf,newdata=test)
Freq1<-table(pred1,test$V2)
tp<-as.data.frame(Freq1)[4,3]
tn<-as.data.frame(Freq1)[1,3]
fn<-as.data.frame(Freq1)[2,3]
fp<-as.data.frame(Freq1)[3,3]
p<-tp/(tp+fp)
r<-tp/(tp+fn)
f<-2/(1/p+1/r)


sum(diag(Freq1))/sum(Freq1)
pdf("2-hc.pdf")
plot(margin(rf$votes,test$V2),main = "观测值被判断正确的概率图")
dev.off()


## MDS plot - Multi-dimensional Scaling Plot of Proximity Matrix
MDSplot(rf,fac = train$V2,palette = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E"))
distance.matrix <- dist(1-rf$proximity)
mds.stuff <- cmdscale(distance.matrix, eig = TRUE, x.ret =  TRUE)
mds.var.per <- round(mds.stuff$eig/sum(mds.stuff$eig)*100, 1)
mds.values <- mds.stuff$points
mds.data <- data.frame(Sample = rownames(mds.values),
                       X = mds.values[,1],
                       Y = mds.values[,2],
                       Status = train$V2)
p <- ggplot(data = mds.data, aes(x = X, y = Y, label = Sample))
p + geom_point(aes(color = Status)) +
  xlab(paste0("MDS1 - ", mds.var.per[1], "%")) +
  ylab(paste0("MDS2 - ", mds.var.per[2], "%")) +
  ggtitle("MDS plot using (1 - Random Forest Proximities)") +
  scale_color_manual(values = c("#015890","#DA4934","black")) +
  
  #scale_color_manual(values = c("#3A94BB","#30B89D","#A7C46A","#F9B042","#E05B3E","black")) +
  theme(axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        #axis.title = element_blank(),
        #strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
ggsave("MDS1-hc-83.pdf")



#################
##  lncRNA表达 ##
#################
setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/lncRNA")
genes <- data.frame()
for(i in 1:10){
  mutation <- read.table(paste0("/pub6/siyu/TANRIC-lncRNA/pancancer-",i,".txt"),sep = "\t",header = T)
  genes <- rbind(genes,data.frame(gene = mutation$Sample,location = i))
}
write.table(genes,"/pub6/siyu/TANRIC-lncRNA/gene_location.txt",sep = "\t",quote = F,col.names = T,row.names = F)


## 构建表达谱
# 在方法得到的显著基因个数出现频率高于3的基因

# 所有显著性的基因
gene <- read.table("sig-lncRNA.txt",sep = "\t",header = T,row.names = 1)
gene_loc <- read.table("/pub6/siyu/TANRIC-lncRNA/gene_location.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
loc <- unique(gene_loc[rownames(gene),])

mRNA_all <- data.frame()
for(i in loc){
  mRNA <- read.table(paste0("/pub6/siyu/TANRIC-lncRNA/pancancer-",i,".txt"),sep = "\t",header = T,row.names = 1)
  mRNA <- mRNA[intersect(rownames(mRNA),rownames(gene)),]
  mRNA_all <- rbind(mRNA_all,mRNA)
}
write.table(mRNA_all,"lncRNA_sig_all.txt",sep = "\t",row.names = T,col.names = T,quote = F)

# 在pam-manhattan 5类方法中出现的显著基因
genes <- data.frame()
for (i in 1:10){
  gene <- read.table(paste0("lncRNA-Wil-FC-",i,".txt"),sep = "\t",header = T,stringsAsFactors = F)
  #gene <- unique(gene[gene$Method == "pam-manhattan" & gene$Group == 5,"Gene"])
  genes <- rbind(genes,gene)
}
write.table(genes,"lncRNA-Wil-FC.txt",sep = "\t",col.names = T,row.names =F)



gene <- read.table("lncRNA-Wil-FC.txt",sep = "\t",header = T,stringsAsFactors = F)
gene <- unique(gene[gene$Method == "pam-manhattan" & gene$Group == 5,"Gene"])
gene_loc <- read.table("/pub6/siyu/TANRIC-lncRNA/gene_location.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
loc <- unique(gene_loc[gene,])

mRNA_p <- data.frame()
for(i in loc){
  mRNA <- read.table(paste0("/pub6/siyu/TANRIC-lncRNA/pancancer-",i,".txt"),sep = "\t",header = T,row.names = 1)
  mRNA <- mRNA[intersect(rownames(mRNA),gene),]
  mRNA_p <- rbind(mRNA_p,mRNA)
}
write.table(mRNA_p,"expression/lncRNA_sig_pamman5.txt",sep = "\t",row.names = T,col.names = T,quote = F)


## start
library(pheatmap)
setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/lncRNA")

## 构建表达谱标签 annotation_col
class <- read.csv("/pub6/siyu/3-co-consensus/avg/pam-manhattan/pam-manhattan.k=5.consensusClass.csv",header = F,row.names = 1)
colnames(class) <- "Subtypes"
class$Subtypes <- paste("Subtype",class$Subtypes)
class$Subtypes <- factor(class$Subtypes)
rownames(class) <- gsub("-","\\.",rownames(class))

mRNA_all <- read.table("lncRNA_sig_all.txt",sep = "\t",row.names = 1,header = T)
mRNA_all <- scale(mRNA_all)

mRNA_p <- read.table("expression/lncRNA_sig_pamman5.txt",sep = "\t",row.names = 1,header = T)
#mRNA_p <- scale(mRNA_p)
mRNA_p <- mRNA_p[,intersect(rownames(class)[order(class$Subtypes)],colnames(mRNA_p))]

count0 <- apply(mRNA_p,1,function(x){as.numeric(table(as.numeric(x))["0"])})
mRNA_p <- mRNA_p[count0 < ncol(mRNA_p)/3,] # 去除1/3样本为0的基因（剩余404个）

count1 <- apply(mRNA_p,1,function(x){all(x>10)})
mRNA_p1 <- mRNA_p[-count1,] # 去除表达全部小于1的基因（剩余395个）


a <- arrayInd(order(mRNA_p,decreasing=TRUE)[1:50],dim(mRNA_p))
a <- a[!duplicated(a[,1]),]
for (i in 1:15){
  print(mRNA_p[a[i,1],a[i,2]])
}

mRNA_p <- mRNA_p[-a[,1],]



## 画图
class <- read.csv("/pub6/siyu/3-co-consensus/avg/pam-manhattan/pam-manhattan.k=5.consensusClass.csv",header = F,stringsAsFactors = F)
cancer <- read.table("/pub6/siyu/data/immuno-feature.txt",header = T,sep = "\t",stringsAsFactors = F)
cancer <- merge(cancer[,c(1,2)],class,by.x = "TCGA.Participant.Barcode",by.y = "V1")
cancer$class[cancer$V2 == 1 | cancer$V2 == 2] <- "Cold Tumors"
cancer$class[cancer$V2 == 3 | cancer$V2 == 4 | cancer$V2 == 5] <- "Hot Tumors"
cancer$V2 <- paste("Subtype",cancer$V2)
cancer <- cancer[order(cancer$TCGA.Study,cancer$V2),]
rownames(cancer) <- gsub("-","\\.",cancer$TCGA.Participant.Barcode)
cancer <- cancer[,-1]
colnames(cancer) <- c("Cancer","Subtypes","Class")

ann_colors = list(Subtypes = c(`Subtype 1` = "#3A94BB", 
                               `Subtype 2` = "#30B89D",
                               `Subtype 3` = "#A7C46A",
                               `Subtype 4` = "#F9B042",
                               `Subtype 5` = "#E05B3E"),
                  Cancer = c(brewer.pal(12, "Set3"),
                             brewer.pal(4, "Pastel1"),
                             brewer.pal(8, "Paired"),
                             brewer.pal(8, "Set2")),
                  Class = c(`Cold Tumors` = "#015890",
                            `Hot Tumors` = "#DA4934"))
#"#015890","#DA4934"
names(ann_colors$Cancer) <- unique(cancer$Cancer)

## 构建表达谱标签 annotation_col
class <- read.csv("/pub6/siyu/3-co-consensus/avg/pam-manhattan/pam-manhattan.k=5.consensusClass.csv",header = F,row.names = 1)
colnames(class) <- "Subtypes"
class$Subtypes <- paste("Subtype",class$Subtypes)
class$Subtypes <- factor(class$Subtypes)
rownames(class) <- gsub("-","\\.",rownames(class))


gap <- 0
gaps <- c()
for(i in as.numeric(table(class[intersect(rownames(class),colnames(mRNA_p)),]))){
  gap <- i + gap
  gaps <- c(gaps,gap)
}



list <- pheatmap(mRNA_p, 
                 color = colorRampPalette(c("white","firebrick3"))(100),
                 annotation_col = cancer, cluster_cols = FALSE,
                 gaps_col = gaps,
                 cutree_rows =3,
                 show_rownames=F,show_colnames=F,
                 #clustering_distance_cols = dcol,
                 #breaks = c(0,1:19),
                 
                 #scale="row",
                 annotation_colors = ann_colors,size = 1,
                 filename = paste0("expression/lncRNA-p.png"))

row_cluster <- as.data.frame(cutree(list$tree_row,k=3))
colnames(row_cluster) <- "clust"
row_cluster$clust <- as.character(row_cluster$clust)

write.table(row_cluster,"row_cluster.txt",sep = "\t",quote = F,col.names = T,row.names = T)

# 画出2-3类(显著区分)
mRNA_psig <- mRNA_p[rownames(row_cluster)[row_cluster$clust != 1],]

list1 <- pheatmap(mRNA_psig, 
                  color = colorRampPalette(c("white","firebrick3"))(100),
                  annotation_col = cancer, cluster_cols = FALSE,
                  gaps_col = gaps,
                  #cutree_rows =8,
                  show_rownames=F,show_colnames=F,
                  #legend_breaks = c(0,1:ceiling(max(mRNA_p))),
                  
                  #clustering_distance_cols = dcol,
                  #scale="row",
                  annotation_colors = ann_colors,size = 1,
                  filename = paste0("expression/mRNA-p-2-3.png"))

newOrder <- mRNA_psig[list1$tree_row$order,]
write.table(newOrder,"expression/sig-mRNA-matrix.txt",sep = "\t",col.names = T,row.names = T,quote = F)

## 用fc画显著基因
library(ggplot2)
setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/mRNA")

newOrder <- read.table("expression/sig-mRNA-matrix.txt",sep = "\t",header = T,stringsAsFactors = F)
row_cluster <- read.table("expression/row_cluster.txt",sep = "\t",header = T,stringsAsFactors = F)
gene <- read.table("mRNA-Wil-FC.txt",sep = "\t",header = T,stringsAsFactors = F)

a <- gene[gene$Method == "pam-manhattan" & gene$Group == 5 & gene$Gene %in% rownames(newOrder),]
a <- merge(a,row_cluster,by.x = "Gene",by.y = "row.names")
a$FCp <- log2(a$FCp)
a$FCp[a$FCp == -Inf] <- -max(abs(a$FCp[a$FCp != -Inf]))
a$Wilpvalue[is.na(a$Wilpvalue)] <- 0
a$Gene <- factor(a$Gene,levels = rev(rownames(newOrder)))
a$clust <- factor(a$clust,levels = c(3,2))
p <- ggplot(a,aes(Gene,-log10(Wilpvalue)))
p + #geom_tile(aes(fill = FCp)) +
  #geom_bar(color = "grey30",fill = "transparent",stat = "identity",position = "fill") +
  geom_bar(aes(fill = FCp),stat = "identity") +
  scale_fill_gradient2(low = "#05004E",high = "#FF0000",mid = "#F9F9F9") +
  coord_flip()  +
  facet_grid(clust~Subgroup,scales = "free",space = "free_y") + 
  labs(title = i,x = paste0("Gene = ",length(unique(a$Gene)))) +
  theme(#legend.position = "top",
    legend.background=element_blank(),
    axis.text.x=element_text(size=10),
    axis.text.y = element_text(size = 0.5),
    axis.line.x = element_line(size = 0.5, colour = "black"),
    axis.line.y = element_line(size = 0.5, colour = "black"),
    strip.background = element_blank(),
    panel.background = element_blank(),
    panel.border = element_blank(),
    panel.grid = element_blank())
ggsave(paste0("expression/",i,"-sig.pdf"),width = 10,height = 10)





################
##  miRNA表达 ##
################
genes <- data.frame()
for(i in 1:20){
  mutation <- read.table(paste0("/pub6/siyu/ucsc-mRNA-FPKM-UQ/pancancer-",i,".txt"),sep = "\t",header = T)
  genes <- rbind(genes,data.frame(gene = mutation$Sample,location = i))
}
write.table(genes,"/pub6/siyu/ucsc-mRNA-FPKM-UQ/gene_location.txt",sep = "\t",quote = F,col.names = T,row.names = F)


## 构建表达谱
# 在方法得到的显著基因个数出现频率高于3的基因

# 所有显著性的基因
gene <- read.table("sig-mRNA.txt",sep = "\t",header = T,row.names = 1)
gene_loc <- read.table("/pub6/siyu/ucsc-mRNA-FPKM-UQ/gene_location.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
loc <- unique(gene_loc[rownames(gene),])

mRNA_all <- data.frame()
for(i in loc){
  mRNA <- read.table(paste0("/pub6/siyu/ucsc-mRNA-FPKM-UQ/pancancer-",i,".txt"),sep = "\t",header = T,row.names = 1)
  mRNA <- mRNA[intersect(rownames(mRNA),rownames(gene)),]
  mRNA_all <- rbind(mRNA_all,mRNA)
}
write.table(mRNA_all,"mRNA_sig_all.txt",sep = "\t",row.names = T,col.names = T,quote = F)

# 在pam-manhattan 5类方法中出现的显著基因
gene <- read.table("mRNA-Wil-FC.txt",sep = "\t",header = T,stringsAsFactors = F)
gene <- unique(gene[gene$Method == "pam-manhattan" & gene$Group == 5,"Gene"])
gene_loc <- read.table("/pub6/siyu/ucsc-mRNA-FPKM-UQ/gene_location.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
loc <- unique(gene_loc[gene,])

mRNA_p <- data.frame()
for(i in loc){
  mRNA <- read.table(paste0("/pub6/siyu/ucsc-mRNA-FPKM-UQ/pancancer-",i,".txt"),sep = "\t",header = T,row.names = 1)
  mRNA <- mRNA[intersect(rownames(mRNA),gene),]
  mRNA_p <- rbind(mRNA_p,mRNA)
}
write.table(mRNA_p,"mRNA_sig_pamman5.txt",sep = "\t",row.names = T,col.names = T,quote = F)


## start
library(pheatmap)
setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/mRNA")

## 构建表达谱标签 annotation_col
class <- read.csv("/pub6/siyu/3-co-consensus/avg/pam-manhattan/pam-manhattan.k=5.consensusClass.csv",header = F,row.names = 1)
colnames(class) <- "Subtypes"
class$Subtypes <- paste("Subtype",class$Subtypes)
class$Subtypes <- factor(class$Subtypes)
rownames(class) <- gsub("-","\\.",rownames(class))





mRNA_all <- read.table("mRNA_sig_all.txt",sep = "\t",row.names = 1,header = T)
mRNA_all <- scale(mRNA_all)

mRNA_p <- read.table("mRNA_sig_pamman5.txt",sep = "\t",row.names = 1,header = T)
#mRNA_p <- scale(mRNA_p)
mRNA_p <- mRNA_p[,intersect(rownames(class)[order(class$Subtypes)],colnames(mRNA_p))]

## 画图
ann_colors = list(Subtypes = c(`Subtype 1` = "#3A94BB", 
                               `Subtype 2` = "#30B89D",
                               `Subtype 3` = "#A7C46A",
                               `Subtype 4` = "#F9B042",
                               `Subtype 5` = "#E05B3E"))

ann_colors = list(Subtypes = c(`Subtype 1` = "#3A94BB", 
                               `Subtype 2` = "#30B89D",
                               `Subtype 3` = "#A7C46A",
                               `Subtype 4` = "#F9B042",
                               `Subtype 5` = "#E05B3E"),
                  Cancer = c(brewer.pal(12, "Set3"),
                             brewer.pal(4, "Pastel1"),
                             brewer.pal(8, "Paired"),
                             brewer.pal(8, "Set2")),
                  Class = c(`Cold Tumors` = "#015890",
                            `Hot Tumors` = "#DA4934"))
#"#015890","#DA4934"
names(ann_colors$Cancer) <- unique(cancer$Cancer)


gap <- 0
gaps <- c()
for(i in as.numeric(table(class[intersect(rownames(class),colnames(mRNA_p)),]))){
  gap <- i + gap
  gaps <- c(gaps,gap)
}



list <- pheatmap(mRNA_p, 
                 color = colorRampPalette(c("white","firebrick3"))(100),
                 annotation_col = class, cluster_cols = FALSE,
                 gaps_col = gaps,
                 cutree_rows =3,
                 show_rownames=F,show_colnames=F,
                 #clustering_distance_cols = dcol,
                 #scale="row",
                 annotation_colors = ann_colors,size = 1,
                 filename = paste0("expression/mRNA-p.png"))
row_cluster <- as.data.frame(cutree(list$tree_row,k=3))
colnames(row_cluster) <- "clust"
row_cluster$clust <- as.character(row_cluster$clust)

write.table(row_cluster,"row_cluster.txt",sep = "\t",quote = F,col.names = T,row.names = T)

# 画出2-3类(显著区分)
mRNA_psig <- mRNA_p[rownames(row_cluster)[row_cluster$clust != 1],]

list1 <- pheatmap(mRNA_psig, 
                  color = colorRampPalette(c("white","firebrick3"))(100),
                  annotation_col = cancer, cluster_cols = FALSE,
                  gaps_col = gaps,
                  #cutree_rows =8,
                  show_rownames=F,show_colnames=F,
                  #legend_breaks = c(0,1:ceiling(max(mRNA_p))),
                  
                  #clustering_distance_cols = dcol,
                  #scale="row",
                  annotation_colors = ann_colors,size = 1,
                  filename = paste0("expression/mRNA-p-2-3.png"))

newOrder <- mRNA_psig[list1$tree_row$order,]
write.table(newOrder,"expression/sig-mRNA-matrix.txt",sep = "\t",col.names = T,row.names = T,quote = F)

## 用fc画显著基因
library(ggplot2)
setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/mRNA")

newOrder <- read.table("expression/sig-mRNA-matrix.txt",sep = "\t",header = T,stringsAsFactors = F)
row_cluster <- read.table("expression/row_cluster.txt",sep = "\t",header = T,stringsAsFactors = F)
gene <- read.table("mRNA-Wil-FC.txt",sep = "\t",header = T,stringsAsFactors = F)

a <- gene[gene$Method == "pam-manhattan" & gene$Group == 5 & gene$Gene %in% rownames(newOrder),]
a <- merge(a,row_cluster,by.x = "Gene",by.y = "row.names")
a$FCp <- log2(a$FCp)
a$FCp[a$FCp == -Inf] <- -max(abs(a$FCp[a$FCp != -Inf]))
a$Wilpvalue[is.na(a$Wilpvalue)] <- 0
a$Gene <- factor(a$Gene,levels = rev(rownames(newOrder)))
a$clust <- factor(a$clust,levels = c(3,2))
p <- ggplot(a,aes(Gene,-log10(Wilpvalue)))
p + #geom_tile(aes(fill = FCp)) +
  #geom_bar(color = "grey30",fill = "transparent",stat = "identity",position = "fill") +
  geom_bar(aes(fill = FCp),stat = "identity") +
  scale_fill_gradient2(low = "#05004E",high = "#FF0000",mid = "#F9F9F9") +
  coord_flip()  +
  facet_grid(clust~Subgroup,scales = "free",space = "free_y") + 
  labs(title = i,x = paste0("Gene = ",length(unique(a$Gene)))) +
  theme(#legend.position = "top",
    legend.background=element_blank(),
    axis.text.x=element_text(size=10),
    axis.text.y = element_text(size = 0.5),
    axis.line.x = element_line(size = 0.5, colour = "black"),
    axis.line.y = element_line(size = 0.5, colour = "black"),
    strip.background = element_blank(),
    panel.background = element_blank(),
    panel.border = element_blank(),
    panel.grid = element_blank())
ggsave(paste0("expression/",i,"-sig.pdf"),width = 10,height = 10)









#############
## 复发ROC ##
#############
setwd("f:/datahe/immuno/3-co-consensus/avg/plot/test")
library(survivalROC)
library(pROC)
library(pheatmap)
library(reshape2)
## 复发与否在Bcell CD8 Tcell的分布
gse <- read.table("GSE1378_series_matrix_result.txt",sep = "\t",header = T,row.names = 1)
gse <- read.table("GSE9893_series_matrix_result.txt",sep = "\t",header = T,row.names = 1)
gse <- read.table("GSE12093_series_matrix_result.txt",sep = "\t",header = T,row.names = 1)
gse <- read.table("GSE26459_series_matrix_result.txt",sep = "\t",header = T,row.names = 1)


gse <- as.data.frame(t(gse[c(5,2,11),]))

# 排B cell和CD8 Tcell秩次
gse$`B lineage` <- order(gse$`B lineage`)
gse$`CD8 T cells` <- order(gse$`CD8 T cells`)

# 按两种细胞的秩次均值排序
gse$cell_avg <- apply(gse[,c(1,2)],1,mean)
gse <- gse[order(gse$cell_avg),]
# 按复发状态排序
gse <- gse[order(gse$state,gse$cell_avg),]

state <- data.frame(row.names = rownames(gse),state = as.character(gse$state))

ann_colors = list(state = c(`0` = "firebrick3",`1` = "grey70"))
list <- pheatmap(gse[,c(1,2)], 
                 color = colorRampPalette(c("white","firebrick3"))(100),
                 annotation_row = state, cluster_cols = FALSE,cluster_rows = FALSE,
                 border=FALSE,
                 #gaps_col = gaps,
                 #cutree_rows =3,
                 show_rownames=F,show_colnames=T,
                 #clustering_distance_cols = dcol,
                 #scale="column",
                 annotation_colors = ann_colors,size = 1,
                 filename = paste0("复发264591.pdf"))

## 随机森林
library(randomForest)

# 原始数据
gse <- read.table(paste0("GSE",i,"_series_matrix_result.txt"),sep = "\t",header = T,row.names = 1)
gse <- as.data.frame(t(gse[c(5,2),]))

# 构建测试集，训练集
ind <- sample(2,nrow(gse),replace = TRUE, prob = c(0.7,0.3))
set.seed(100)
train <- gse[ind == 1,]
test <- gse[ind == 2,]

  
  
  

Mayo.fit4<-survivalROC.C(Stime=clinic$days_to_death,
                         status=clinic$X_EVENT,
                         marker=clinic$risk,
                         predict.time=365*5,
                         span=0.25*nobs^(-0.20))

###########
# 功能分析#
###########
## mRNA，表达
#BiocInstaller::biocLite("clusterProfiler")
#BiocInstaller::biocLite("org.Hs.eg.db")
#install.packages('GOplot')

## 
## 丹妮的GO 注释
library(clusterProfiler)
library(GOplot)
setwd("f:/datahe/immuno/3-co-consensus/avg/plot/molecular/mRNA")
#setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/mRNA")
gene <- read.table("expression/20-gene.txt",sep = "\t",header = T,stringsAsFactors = F)
gene_id <- read.table("gene-id.txt",sep = "\t",header = T,stringsAsFactors = F)
gene_id <- gene_id[,c("Gene.stable.ID","NCBI.gene.ID","Gene.name","Gene.type")]
gene_id <- gene_id[complete.cases(gene_id),]
gene <- gene[,c(1,2,4)]

colnames(gene)[c(1,4)] <- c("ID","logFC")
gene <- merge(gene,gene_id)
#genelist <- split(gene,paste(gene$Method,gene$Group))
#for (i in names(genelist)){
genesub <- split(gene,gene$Subgroup)
ego_resultall <- data.frame()

for (j in names(genesub)){
  ego <- enrichGO(OrgDb="org.Hs.eg.db",
                  gene = gene$Row.names,
                  pvalueCutoff = 0.05,
                  ont = "ALL",
                  readable=TRUE,keyType = "ENSEMBL")
  ego_result <- as.data.frame(ego)
  ego_resultall <- rbind(ego_resultall,ego_result)
  ego_result <- ego_result[,c(1,2,3,9,7)]
  colnames(ego_result) <- c("Category","ID","Term","Genes","adj_pval")
  ego_result$Genes <- gsub("/",",",ego_result$Genes)
  
  
  go <- circle_dat(ego_result,genesub[[j]])
  go <- go[,-c(6,8)]
  go <- merge(go,genesub[[j]][,c(3,4,9)],by.x = "genes",by.y = "Gene.name")
  colnames(go)[7] <- "zscore" 
  
  GOBubble(go, labels = length(unique(go$category)))
  ggsave(paste0("sig/",j,".pdf"))
}
#}

write.table(ego_resultall,"sig/ego_result.txt",sep = "\t",col.names = T,row.names = T,quote = F)

## mRNA，显著基因
#BiocInstaller::biocLite("clusterProfiler")
#BiocInstaller::biocLite("org.Hs.eg.db")
#install.packages('GOplot')
library(clusterProfiler)
library(GOplot)
setwd("f:/datahe/immuno/3-co-consensus/avg/plot/molecular/mRNA")
#setwd("/pub6/siyu/3-co-consensus/avg/plot/molecular/mRNA")
gene <- read.table("mRNA-pam5-Wil-FC.txt",sep = "\t",header = T,stringsAsFactors = F)
gene <- gene[gene$Group == 5 & gene$Method == "pam-manhattan",]
gene_id <- read.table("gene-id.txt",sep = "\t",header = T,stringsAsFactors = F)
gene_id <- gene_id[,c("Gene.stable.ID","NCBI.gene.ID","Gene.name")]
gene_id <- gene_id[complete.cases(gene_id),]

#gene <- data.frame()

#data(geneList,package = "DOSE")
#de <- abs(geneList) > 2
#ego <- enrichGO(OrgDb="org.Hs.eg.db",
#                gene = geneList,
#                pvalueCutoff = 0.05,
#                ont = "ALL",
#                readable=TRUE)




#gene <- gene[unlist(lapply(lapply(lapply(strsplit(as.character(gene$Sample),";"),as.numeric),function(i){!i <= 10}),all)),]
gene$Gene <- gsub("\\..*","",gene$Gene)
colnames(gene)[c(1,4)] <- c("ID","logFC")
gene <- merge(gene,gene_id,by.x = "ID",by.y = "Gene.stable.ID")
#genelist <- split(gene,paste(gene$Method,gene$Group))
#for (i in names(genelist)){
  genesub <- split(gene,gene$Subgroup)
  ego_resultall <- data.frame()
  
  for (j in names(genesub)){
    ego <- enrichGO(OrgDb="org.Hs.eg.db",
                    gene = genesub[[j]]$NCBI.gene.ID,
                    pvalueCutoff = 0.05,
                    ont = "ALL",
                    readable=TRUE)
    ego_result <- as.data.frame(ego)
    ego_resultall <- rbind(ego_resultall,ego_result)
    ego_result <- ego_result[,c(1,2,3,9,7)]
    colnames(ego_result) <- c("Category","ID","Term","Genes","adj_pval")
    ego_result$Genes <- gsub("/",",",ego_result$Genes)
    
    
    go <- circle_dat(ego_result,genesub[[j]])
    go <- go[,-c(6,8)]
    go <- merge(go,genesub[[j]][,c(3,4,9)],by.x = "genes",by.y = "Gene.name")
    colnames(go)[7] <- "zscore" 
    
    GOBubble(go, labels = length(unique(go$category)))
    ggsave(paste0("sig/",j,".pdf"))
  }
#}

write.table(ego_resultall,"sig/ego_result.txt",sep = "\t",col.names = T,row.names = T,quote = F)


setwd("f:/datahe/immuno/3-co-consensus/avg/plot/molecular/mRNA")
library(ggplot2)
ego <- read.table("sig/ego_result.txt",sep = "\t",header = T,stringsAsFactors = F)
ego$type <- c(rep("Subtype 1",9),rep("Subtype 2",53),
              rep("Subtype 3",7),rep("Subtype 4",4),rep("Subtype 5",19))
ego <- ego[ego$Count >= 2,]
ego <- ego[ego$p.adjust <= 0.05,]
ego <- ego[order(ego$type,ego$ONTOLOGY,ego$p.adjust,ego$Count),]

ego$Description <- factor(ego$Description,levels = unique(ego$Description))
ego$ONTOLOGY <- factor(ego$ONTOLOGY)
p <- ggplot(ego,aes(x = type,y = Description))
p + geom_point(aes(fill = log10(pvalue),color = ONTOLOGY,size = Count),shape = 21) +
  scale_size(range = c(3, 10)) +
  scale_fill_continuous(low = "#f12711",high = "#f5af19") +
  scale_color_manual(values = c("#159957","#155799")) +
  theme(legend.background = element_blank(),
        #legend.position = "none",
        axis.text = element_text(size = 10),
        axis.line.x = element_blank(),
        axis.title = element_blank(),
        #axis.ticks.x = element_blank(),
        strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

ggsave("sig/go005.pdf",width = 10,height = 15)
write.table(ego,"ego005.txt",sep = "\t",row.names = F,col.names = T,quote = F)


#20expression
setwd("f:/datahe/immuno/3-co-consensus/avg/plot/molecular/mRNA")
library(ggplot2)
ego <- read.csv("expression/20.csv",header = T,stringsAsFactors = F)

ego <- ego[ego$intersection_size >= 2,]
ego <- ego[order(ego$source,ego$adjusted_p_value,ego$intersection_size,decreasing = T),]

ego$term_name <- factor(ego$term_name,levels = unique(ego$term_name))
ego$source <- factor(ego$source)
p <- ggplot(ego,aes(y = -log10(adjusted_p_value),x = term_name))
p + #geom_point(aes(fill = log10(adjusted_p_value),color = source,size = intersection_size),shape = 21) +
  #scale_size(range = c(3, 10)) +
  geom_bar(aes(fill = source,color = source),stat = "identity") +
  #scale_fill_continuous(low = "#f12711",high = "#f5af19") +
  scale_fill_manual(values = c("#DC3912","#FF9900","#109618","#3366CC")) +
  scale_color_manual(values = c("#DC3912","#FF9900","#109618","#3366CC")) +
  coord_flip() +
  theme(legend.background = element_blank(),
        #legend.position = "none",
        axis.text.x = element_text(size = 10,angle = 90),
        
        axis.line.x = element_blank(),
        axis.title = element_blank(),
        #axis.ticks.x = element_blank(),
        strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

ggsave("sig/20.pdf",width = 10,height = 3)

#34yuhou
setwd("f:/datahe/immuno/3-co-consensus/avg/plot/molecular/mRNA")
library(ggplot2)
ego <- read.csv("sig/34.csv",header = T,stringsAsFactors = F)

ego <- ego[ego$intersection_size >= 2,]
ego <- ego[order(ego$source,ego$adjusted_p_value,ego$intersection_size,decreasing = T),]

ego$term_name <- factor(ego$term_name,levels = unique(ego$term_name))
ego$source <- factor(ego$source)
p <- ggplot(ego,aes(y = -log10(adjusted_p_value),x = term_name))
p + #geom_point(aes(fill = log10(adjusted_p_value),color = source,size = intersection_size),shape = 21) +
  #scale_size(range = c(3, 10)) +
  geom_bar(aes(fill = source,color = source),stat = "identity") +
  #scale_fill_continuous(low = "#f12711",high = "#f5af19") +
  scale_fill_manual(values = c("#DC3912","#FF9900","#109618","#3366CC")) +
  scale_color_manual(values = c("#DC3912","#FF9900","#109618","#3366CC")) +
  coord_flip() +
  theme(legend.background = element_blank(),
        #legend.position = "none",
        axis.text.x = element_text(size = 10,angle = 90),
        
        axis.line.x = element_blank(),
        axis.title = element_blank(),
        #axis.ticks.x = element_blank(),
        strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

ggsave("sig/34.pdf",width = 10,height = 3)


#1920gene
setwd("f:/datahe/immuno/3-co-consensus/avg/plot/molecular/mRNA")
library(ggplot2)
ego <- read.csv("sig/1-1071.csv",header = T,stringsAsFactors = F)

ego <- ego[ego$intersection_size >= 2,]
ego <- ego[order(ego$Subtypes,ego$source,ego$adjusted_p_value,ego$intersection_size),]

egolist <- split(ego,paste(ego$Subtypes,ego$source))
ego1 <- data.frame()
for(i in names(egolist)){
  egolist[[i]] <- head(egolist[[i]],10)
  ego1 <- rbind(ego1,egolist[[i]])
}

#ego <- ego[ego$p.adjust <= 0.05,]
ego1 <- ego1[order(ego1$Subtypes,ego1$source,ego1$adjusted_p_value,ego1$intersection_size,decreasing = T),]

ego1$term_name <- factor(ego1$term_name,levels = unique(ego1$term_name))
ego1$source <- factor(ego1$source)
p <- ggplot(ego1,aes(x = Subtypes,y = term_name))
p + #geom_point(aes(fill = log10(adjusted_p_value),color = source,size = intersection_size),shape = 21) +
  #scale_size(range = c(3, 10)) +
  geom_tile(aes(fill = source,color = source,alpha = -log10(adjusted_p_value))) +
  #scale_fill_continuous(low = "#f12711",high = "#f5af19") +
  scale_fill_manual(values = c("#DC3912","#FF9900","#109618","#3366CC")) +
  scale_color_manual(values = c("#DC3912","#FF9900","#109618","#3366CC")) +
  #coord_flip() +
  theme(legend.background = element_blank(),
        #legend.position = "top",
        axis.text.x = element_text(size = 10,angle = 90),
        
        axis.line.x = element_blank(),
        axis.title = element_blank(),
        #axis.ticks.x = element_blank(),
        strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
ggsave("sig/1920-all.pdf",width = 11,height = 15)

p <- ggplot(ego1,aes(x = factor(1),y = -log10(adjusted_p_value)))
p + geom_bar(aes(fill = source,color = source),stat = "identity", width = 1) + 
  scale_fill_manual(values = c("#DC3912","#FF9900","#109618","#3366CC")) +
  scale_color_manual(values = c("#DC3912","#FF9900","#109618","#3366CC")) +
  #coord_flip() +
  coord_polar(theta = "y") + 
  labs(x = "", y = "", title = "") +
  facet_grid(Subtypes~term_name) +
  theme(legend.background = element_blank(),
        legend.position = "top",
        #axis.text.x = element_text(size = 10,angle = 90),
        axis.text = element_blank(),
        axis.line.x = element_blank(),
        axis.title = element_blank(),
        axis.ticks = element_blank(),
        strip.background = element_blank(),
        strip.text.x = element_text(angle = 90),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())



ggsave("sig/1920-10.pdf",width = 20,height = 7)


#83mutation
setwd("f:/datahe/immuno/3-co-consensus/avg/plot/molecular/mutation")
library(ggplot2)
ego <- read.csv("3-45.csv",header = T,stringsAsFactors = F)

ego <- ego[ego$intersection_size >= 2,]


egolist <- split(ego,paste(ego$Subtypes,ego$source))
ego1 <- data.frame()
for(i in names(egolist)){
  egolist[[i]] <- egolist[[i]][order(egolist[[i]]$Subtypes,egolist[[i]]$source,egolist[[i]]$adjusted_p_value,egolist[[i]]$intersection_size),]
  egolist[[i]] <- head(egolist[[i]],10)
  ego1 <- rbind(ego1,egolist[[i]])
}

#ego <- ego[ego$p.adjust <= 0.05,]
ego1 <- ego1[order(ego1$Subtypes,ego1$source,ego1$adjusted_p_value,ego1$intersection_size),]

ego1$term_name <- factor(ego1$term_name,levels = unique(ego1$term_name))
ego1$chinese <- factor(ego1$chinese,levels = unique(ego1$chinese))
ego1$source <- factor(ego1$source)
p <- ggplot(ego1,aes(x = Subtypes,y = chinese))
p + #geom_point(aes(fill = log10(adjusted_p_value),color = source,size = intersection_size),shape = 21) +
  #scale_size(range = c(3, 10)) +
  geom_tile(aes(fill = source,color = source,alpha = -log10(adjusted_p_value))) +
  #scale_fill_continuous(low = "#f12711",high = "#f5af19") +
  scale_fill_manual(values = c("#DC3912","#FF9900","#109618","#3366CC")) +
  scale_color_manual(values = c("#DC3912","#FF9900","#109618","#3366CC")) +
  #coord_flip() +
  theme(legend.background = element_blank(),
        #legend.position = "top",
        #axis.text.x = element_text(size = 10,angle = 90),
        
        axis.line.x = element_blank(),
        axis.title = element_blank(),
        #axis.ticks.x = element_blank(),
        strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
ggsave("82.pdf",width = 10,height = 6)
ggsave("821.pdf",width = 6,height = 15)


p <- ggplot(ego1,aes(x = factor(1),y = -log10(adjusted_p_value)))
p + geom_bar(aes(fill = source,color = source),stat = "identity", width = 1) + 
  scale_fill_manual(values = c("#DC3912","#FF9900","#109618","#3366CC")) +
  scale_color_manual(values = c("#DC3912","#FF9900","#109618","#3366CC")) +
  #coord_flip() +
  coord_polar(theta = "y") + 
  labs(x = "", y = "", title = "") +
  facet_grid(Subtypes~term_name) +
  theme(legend.background = element_blank(),
        legend.position = "top",
        #axis.text.x = element_text(size = 10,angle = 90),
        axis.text = element_blank(),
        axis.line.x = element_blank(),
        axis.title = element_blank(),
        axis.ticks = element_blank(),
        strip.background = element_blank(),
        strip.text.x = element_text(angle = 90),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())



ggsave("sig/1920-10.pdf",width = 20,height = 7)


## miRNA
#BiocInstaller::biocLite("clusterProfiler")
#BiocInstaller::biocLite("org.Hs.eg.db")
#install.packages('GOplot')
library(clusterProfiler)
library(GOplot)
setwd("f:/datahe/immuno/big")
gene_id <- read.table("f:/datahe/gene-ncbi-id.txt",sep = "\t",header = T,stringsAsFactors = F)
gene_id <- gene_id[,c("Gene.stable.ID","NCBI.gene.ID","Gene.name")]
gene_id <- gene_id[complete.cases(gene_id),]
#gene <- data.frame()
gene <- read.table(paste0("plot/miRNA-Wil-FC.txt"),header = T,sep = "\t",stringsAsFactors = F)
m_mi <- read.table("plot/pcc_miRNA_mRNA.txt",header = F,sep = "\t",stringsAsFactors = F)
gene <- merge(gene,m_mi,by.x = "Gene",by.y = "V1",all.x = T)
tryCatch({
  
  
  #gene <- gene[unlist(lapply(lapply(lapply(strsplit(as.character(gene$Sample),";"),as.numeric),function(i){!i <= 10}),all)),]
  gene <- merge(gene,gene_id,by.x = "Gene",by.y = "Gene.stable.ID")
  gene1 <- gene[,c(10,4)]
  colnames(gene)[c(10,4)] <- c("ID","logFC")
  genelist <- split(gene,paste(gene$Method,gene$Group))
  for (i in names(genelist)){
    genesub <- split(genelist[[i]],genelist[[i]]$Subgroup)
    for (j in names(genesub)){
      ego <- enrichGO(OrgDb="org.Hs.eg.db",
                      gene = genesub[[j]]$NCBI.gene.ID,
                      pvalueCutoff = 0.05,
                      ont = "ALL",
                      readable=TRUE)
      ego_result <- as.data.frame(ego)
      ego_result <- ego_result[,c(1,2,3,9,7)]
      colnames(ego_result) <- c("Category","ID","Term","Genes","adj_pval")
      ego_result$Genes <- gsub("/",",",ego_result$Genes)
      go <- circle_dat(ego_result,gene)
      GOBubble(go, labels = 3)
      
    }
  }
  
  
  
},
error = function(e){cat("ERROR :",can,"  ",conditionMessage(e),"\n")})

## mutataion
#BiocInstaller::biocLite("clusterProfiler")
#BiocInstaller::biocLite("org.Hs.eg.db")
#install.packages('GOplot')
rm(list = ls())
library(clusterProfiler)
library(GOplot)
library(reshape2)
library(grid)
setwd("f:/datahe/immuno/molecular-level/mutation")
gene_id <- read.table("f:/datahe/gene-ncbi-id.txt",sep = "\t",header = T,stringsAsFactors = F)
gene_id <- gene_id[,c("NCBI.gene.ID","Gene.name")]
gene_id <- gene_id[complete.cases(gene_id),]
geneall <- read.table("MutationSample5.txt",sep = "\t",header = T,stringsAsFactors = F)
geneall <- merge(geneall,gene_id,by.x = "Gene",by.y = "Gene.name")


bp <- grobTree(rectGrob(gp=gpar(fill="#C1D8AA",colour = "#C1D8AA",alpha = 0.8)))
cc <- grobTree(rectGrob(gp=gpar(fill="#F9BDBD",colour = "#F9BDBD",alpha = 0.8)))
mf <- grobTree(rectGrob(gp=gpar(fill="#CBDBF9",colour = "#CBDBF9",alpha = 0.8)))
color <- data.frame(row.names = c("BP","CC","MF"),color = c("#C1D8AA","#F9BDBD","#CBDBF9"),stringsAsFactors = F)

## shorten the names of GO terms
shorten_names <- function(x, n_word=4, n_char=40){
  if (length(strsplit(x, " ")[[1]]) > n_word || (nchar(x) > 40))
  {
    if (nchar(x) > 40) x <- substr(x, 1, 40)
    x <- paste(paste(strsplit(x, " ")[[1]][1:min(length(strsplit(x," ")[[1]]), n_word)],
                     collapse=" "), "...", sep="")
    return(x)
  } 
  else
  {
    return(x)
  }
}
for (can in setdiff(dir("f:/datahe/immuno/threefold"),dir("f:/datahe/immuno/threefold","*.txt"))){
  tryCatch({
    geneall1 <- geneall[geneall$Cancer == can,]
    gene <- read.table(paste0(can,"-mutation-phyper10.txt"),sep = "\t",header = T,stringsAsFactors = F)
    gene <- merge(geneall1,gene,all.x = T)
    gene <- gene[!duplicated(gene),]
    ego <- enrichGO(OrgDb="org.Hs.eg.db",
                    gene = gene$NCBI.gene.ID,
                    pvalueCutoff = 0.05,
                    ont = "ALL",
                    readable=TRUE)
    ego_result <- as.data.frame(ego)
    write.table(ego_result,paste0(can,"-go.txt"),sep = "\t",quote = F,col.names = T,row.names = F)
    
    
    onto <- table(ego_result$ONTOLOGY)
    egolist <- split(ego_result,ego_result$ONTOLOGY)
    egolist <- lapply(egolist,function(x){na.omit(x[order(x$Count,decreasing = T),][1:20,])})
    onto[onto > 20] <- 20
    onto <- rep(names(onto),onto)
    ego_result <- unsplit(egolist,onto)
    
    
    ego_result <- ego_result[order(ego_result$Count),]
    ego_result <- ego_result[order(ego_result$ONTOLOGY,decreasing = T),]
    #ego_result$Description <- shorten_names(ego_result$Description)
    ego_result$Description <- factor(ego_result$Description,levels = unique(ego_result$Description))
    p <- ggplot(data=ego_result, aes(x=Description, y=Count,color = ONTOLOGY))
    p + #geom_bar(position="dodge") +
      geom_segment(aes(xend = Description,yend = 0),size = 1) +
      geom_point(aes(size = -p.adjust)) +
      scale_color_manual(values = color[levels(ego_result$ONTOLOGY),]) +
      coord_flip() +
      theme_bw()+
      theme(#legend.position = "top",
        legend.background=element_blank(),
        legend.key = element_blank(),
        axis.text.x=element_text(size = 10),
        axis.text.y = element_text(size = 10),
        axis.line.x = element_line(size = 0.5, colour = "black"),
        axis.line.y = element_line(size = 0.5, colour = "black"),
        #legend.text=element_text(size=rel(1.1)),
        #legend.title=element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
    
    
    ggsave(paste0(can,"-go.pdf"),width = 15,height = 15)
    
  },
  error = function(e){cat("ERROR :",can,"  ",conditionMessage(e),"\n")})
}
## CNV
#BiocInstaller::biocLite("clusterProfiler")
#BiocInstaller::biocLite("org.Hs.eg.db")
#install.packages('GOplot')
rm(list = ls())
library(clusterProfiler)
library(GOplot)
library(reshape2)
library(grid)
setwd("f:/datahe/immuno/molecular-level/CNV")
gene_id <- read.table("f:/datahe/gene-ncbi-id.txt",sep = "\t",header = T,stringsAsFactors = F)
gene_id <- gene_id[,c("NCBI.gene.ID","Gene.name")]
gene_id <- gene_id[complete.cases(gene_id),]



bp <- grobTree(rectGrob(gp=gpar(fill="#C1D8AA",colour = "#C1D8AA",alpha = 0.8)))
cc <- grobTree(rectGrob(gp=gpar(fill="#F9BDBD",colour = "#F9BDBD",alpha = 0.8)))
mf <- grobTree(rectGrob(gp=gpar(fill="#CBDBF9",colour = "#CBDBF9",alpha = 0.8)))
color <- data.frame(row.names = c("BP","CC","MF"),color = c("#C1D8AA","#F9BDBD","#CBDBF9"),stringsAsFactors = F)

## shorten the names of GO terms
shorten_names <- function(x, n_word=4, n_char=40){
  if (length(strsplit(x, " ")[[1]]) > n_word || (nchar(x) > 40))
  {
    if (nchar(x) > 40) x <- substr(x, 1, 40)
    x <- paste(paste(strsplit(x, " ")[[1]][1:min(length(strsplit(x," ")[[1]]), n_word)],
                     collapse=" "), "...", sep="")
    return(x)
  } 
  else
  {
    return(x)
  }
}
for (can in setdiff(dir("f:/datahe/immuno/threefold"),dir("f:/datahe/immuno/threefold","*.txt"))){
  tryCatch({
    gene <- read.table(paste0(can,"-CNV-phyper30.txt"),sep = "\t",header = T,stringsAsFactors = F)
    gene <- gene[unlist(lapply(lapply(lapply(strsplit(as.character(gene$Sample),";"),as.numeric),function(i){!i <= 10}),all)),]
    gene <- merge(gene,gene_id,by.x = "Gene",by.y = "Gene.name")
    gene <- gene[!duplicated(gene),]
    ego <- enrichGO(OrgDb="org.Hs.eg.db",
                    gene = gene$NCBI.gene.ID,
                    pvalueCutoff = 0.05,
                    ont = "ALL",
                    readable=TRUE)
    ego_result <- as.data.frame(ego)
    write.table(ego_result,paste0(can,"-go.txt"),sep = "\t",quote = F,col.names = T,row.names = F)
    
    
    onto <- table(ego_result$ONTOLOGY)
    egolist <- split(ego_result,ego_result$ONTOLOGY)
    egolist <- lapply(egolist,function(x){na.omit(x[order(x$Count,decreasing = T),][1:20,])})
    onto[onto > 20] <- 20
    onto <- rep(names(onto),onto)
    ego_result <- unsplit(egolist,onto)
    
    
    ego_result <- ego_result[order(ego_result$Count),]
    ego_result <- ego_result[order(ego_result$ONTOLOGY,decreasing = T),]
    #ego_result$Description <- shorten_names(ego_result$Description)
    ego_result$Description <- factor(ego_result$Description,levels = unique(ego_result$Description))
    p <- ggplot(data=ego_result, aes(x=Description, y=Count,color = ONTOLOGY))
    p + #geom_bar(position="dodge") +
      geom_segment(aes(xend = Description,yend = 0),size = 1) +
      geom_point(aes(size = -p.adjust)) +
      scale_color_manual(values = color[levels(ego_result$ONTOLOGY),]) +
      coord_flip() +
      theme_bw()+
      theme(#legend.position = "top",
        legend.background=element_blank(),
        legend.key = element_blank(),
        axis.text.x=element_text(size = 10),
        axis.text.y = element_text(size = 10),
        axis.line.x = element_line(size = 0.5, colour = "black"),
        axis.line.y = element_line(size = 0.5, colour = "black"),
        #legend.text=element_text(size=rel(1.1)),
        #legend.title=element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
    
    
    ggsave(paste0(can,"-go.pdf"),width = 15,height = 15)
    
  },
  error = function(e){cat("ERROR :",can,"  ",conditionMessage(e),"\n")})
}


















###########################
## 合并epic mcp 正常样本 ##
###########################
setwd("f:/datahe/immuno/EPIC/data/")
dirs <- setdiff(dir(),"EPIC.txt")
can_normal <- data.frame()
for (i in dirs){
  can <- read.table(i,sep = "\t",header = T,row.names = 1)
  can <- can[grep("\\.11.$",rownames(can)),]
  can_normal <- rbind(can_normal,can)
}
write.table(can_normal,"EPIC_normal.txt",sep = "\t",col.names = T,row.names = T,quote = F)

setwd("f:/datahe/immuno/MCP/data/")
dirs <- setdiff(dir(),"MCP.txt")
can_normal <- data.frame()
for (i in dirs){
  can <- read.table(i,sep = "\t",header = T,row.names = 1)
  can <- as.data.frame(t(can))
  can <- can[grep("\\.11.$",rownames(can)),]
  can_normal <- rbind(can_normal,can)
}
write.table(can_normal,"MCP_normal.txt",sep = "\t",col.names = T,row.names = T,quote = F)





####################################
# 比对T细胞功能障碍与mRNA mutation #
####################################
setwd("f:/datahe/immuno/3-co-consensus/avg/plot")
setwd("/pub6/siyu/3-co-consensus/avg/plot")
library(reshape2)
library(ggplot2)

m <- read.table("molecular/mRNA/mRNA-pam5-wilfc-symbol.txt",sep = "\t",header = T,stringsAsFactors = F)
mutation <- read.table("molecular/mutation/mutation-phyper10.txt",sep = "\t",header = T,stringsAsFactors = F)
mutation <- mutation[mutation$Method == "pam-manhattan" & mutation$Group == 5,]
tfuc <- read.table("significant_dysfunction.txt",sep = "\t",header = T,stringsAsFactors = F)

m_t <- tfuc[tfuc$Symbol %in% intersect(tfuc$Symbol,m$Gene.name),]
mu_t <- tfuc[tfuc$Symbol %in% intersect(tfuc$Symbol,mutation$Gene),]


## 构建表达谱标签 annotation_col
class <- read.csv("/pub6/siyu/3-co-consensus/avg/pam-manhattan/pam-manhattan.k=5.consensusClass.csv",header = F,row.names = 1)
colnames(class) <- "Subtypes"
class$Subtypes <- paste("Subtype",class$Subtypes)
class$Subtypes <- factor(class$Subtypes)
rownames(class) <- gsub("-","\\.",rownames(class))

# mRNA
# 构建表达谱
m_t1 <- merge(m_t,m,by.x = "Symbol",by.y = "Gene.name")
gene <- m_t1$ID
gene_loc <- read.table("/pub6/siyu/ucsc-mRNA-FPKM-UQ/gene_location.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
loc <- unique(gene_loc[gene,])

mRNA_all <- data.frame()
for(i in loc){
  mRNA <- read.table(paste0("/pub6/siyu/ucsc-mRNA-FPKM-UQ/pancancer-",i,".txt"),sep = "\t",header = T,row.names = 1)
  mRNA <- mRNA[intersect(gsub("\\..*$","",rownames(mRNA)),gene),]
  mRNA_all <- rbind(mRNA_all,mRNA)
}

mRNA_all <- mRNA_all[,intersect(rownames(class)[order(class$Subtypes)],colnames(mRNA_all))]

## 画图
ann_colors = list(Subtypes = c(`Subtype 1` = "#3A94BB", 
                               `Subtype 2` = "#30B89D",
                               `Subtype 3` = "#A7C46A",
                               `Subtype 4` = "#F9B042",
                               `Subtype 5` = "#E05B3E"))


#"#015890","#DA4934"


gap <- 0
gaps <- c()
for(i in as.numeric(table(class[intersect(rownames(class),colnames(mRNA_all)),]))){
  gap <- i + gap
  gaps <- c(gaps,gap)
}



list <- pheatmap(mRNA_all, 
                 color = colorRampPalette(c("white","firebrick3"))(100),
                 annotation_col = class, cluster_cols = FALSE,
                 gaps_col = gaps,
                 #cutree_rows =3,
                 show_rownames=T,show_colnames=F,
                 #clustering_distance_cols = dcol,
                 #scale="row",
                 annotation_colors = ann_colors,size = 1,
                 filename = paste0("mRNA-tfunc.pdf"))


mRNA_t <- t(mRNA_all)
mRNA_t <- merge(mRNA_t,class,by = 0)
mRNA_tlist <- split(mRNA_t,mRNA_t$Subtypes)
avg <- as.data.frame(lapply(mRNA_tlist,function(x){apply(x[,2:4],2,mean)}))
avg$id <- rownames(avg)
avg <- melt(avg)

#avg <- read.table("molecular/mRNA/mRNA_avg.txt",sep = "\t",header = T)
p <- ggplot(avg,aes(x = variable,y = id))
p + geom_tile(aes(fill = log10(value)),colour = "white") + 
  #labs(title = paste(i,"groups",dir)) +
  scale_fill_gradient(low = "#EBD6D5",high = "firebrick3") +
  #facet_wrap(~ Character,ncol = 2) +
  #geom_text(aes(label = signif(Wilcoxon,2)),size = 0.8) +
  theme(axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_blank(),
        axis.title = element_blank(),
        strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

ggsave("molecular/mRNA/mRNA-tfunc-mean.pdf",width = 8,height = 3)


# mutation
# 构建表达谱
gene <- mu_t$Symbol
gene_loc <- read.table("/pub6/siyu/mutation/gene_location.txt",sep = "\t",header = T,stringsAsFactors = F,row.names = 1)
loc <- unique(gene_loc[gene,])

mRNA_all <- data.frame()
for(i in loc){
  mRNA <- read.table(paste0("/pub6/siyu/mutation/pancancer-",i,".txt"),sep = "\t",header = T,row.names = 1)
  mRNA <- mRNA[intersect(gsub("\\..*$","",rownames(mRNA)),gene),]
  mRNA_all <- rbind(mRNA_all,mRNA)
}

mRNA_all <- mRNA_all[,intersect(rownames(class)[order(class$Subtypes)],colnames(mRNA_all))]

## 画图
ann_colors = list(Subtypes = c(`Subtype 1` = "#3A94BB", 
                               `Subtype 2` = "#30B89D",
                               `Subtype 3` = "#A7C46A",
                               `Subtype 4` = "#F9B042",
                               `Subtype 5` = "#E05B3E"))


#"#015890","#DA4934"


gap <- 0
gaps <- c()
for(i in as.numeric(table(class[intersect(rownames(class),colnames(mRNA_all)),]))){
  gap <- i + gap
  gaps <- c(gaps,gap)
}



list <- pheatmap(mRNA_all, 
                 color = colorRampPalette(c("white","firebrick3"))(100),
                 annotation_col = class, cluster_cols = FALSE,
                 gaps_col = gaps,
                 #cutree_rows =3,
                 show_rownames=T,show_colnames=F,
                 #clustering_distance_cols = dcol,
                 #scale="row",
                 annotation_colors = ann_colors,size = 1,
                 filename = paste0("mutation-tfunc.pdf"))

# 亚型中基因突变频率
mRNA_t <- t(mRNA_all)
mRNA_t <- merge(mRNA_t,class,by = 0)
mRNA_tlist <- split(mRNA_t,mRNA_t$Subtypes)
avg <- as.data.frame(lapply(mRNA_tlist,function(x){apply(x[,2:15],2,function(y){table(y)["1"]/length(y)})}))
avg$id <- rownames(avg)
avg <- melt(avg)
#write.table(avg,"molecular/mutation/mutation_ratio.txt",sep = "\t",col.names = T,row.name = F,quote = F)
#avg <- read.table("molecular/mutation/mutation_ratio.txt",sep = "\t",header = T,stringsAsFactors = F)
avg <- avg[order(avg$value,decreasing = T),]
avg$id <- factor(avg$id,levels = rev(unique(avg$id)))
p <- ggplot(avg,aes(x = variable,y = id))
p + geom_tile(aes(fill = value),colour = "white") + 
  #labs(title = paste(i,"groups",dir)) +
  scale_fill_gradient(low = "#EBD6D5",high = "firebrick3") +
  #facet_wrap(~ Character,ncol = 2) +
  #geom_text(aes(label = signif(Wilcoxon,2)),size = 0.8) +
  theme(axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_blank(),
        axis.title = element_blank(),
        strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


p <- ggplot(avg,aes(x = id,y = value))
p + geom_bar(aes(fill = value),colour = "white",stat = "identity") + 
  #labs(title = paste(i,"groups",dir)) +
  scale_fill_gradient(low = "#EBD6D5",high = "firebrick3") +
  facet_grid(~ variable) +
  coord_flip() +
  #geom_text(aes(label = signif(Wilcoxon,2)),size = 0.8) +
  theme(axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_blank(),
        axis.title = element_blank(),
        strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


ggsave("molecular/mutation/mutation-tfunc-ratio1.pdf",width = 8,height = 10)


#CNV数据显示及组间CNV差异识别-王娜

cnv <- data.frame()
for (i in 1:10) {
cnv1 <- read.table(paste0("/pub6/siyu/cnv/pancancer-",i,".txt"), sep = "\t", row.names= 1, header = T, stringsAsFactors = F)
cnv <- rbind(cnv,cnv1)
}
genelocation <- read.table("/pub6/siyu/ucsc-mRNA-FPKM-UQ/gene_location.txt", sep = "\t", header = T, stringsAsFactors = F)##ENSG

class <- read.table("/pub6/wenjing/train.valid/newresults/kmdist-spearman2/kmdist-spearman.k=4.consensusClass2.csv", sep = ",", header = T, stringsAsFactors = F)
class$sample <- gsub("-",".",class$sample)

cnv1 <- cnv[,na.omit(match(class$sample[which(class$class==4)],colnames(cnv)))]##1688+1787+1873+2007=7355
#write.table(cnv1, "/pub6/wenjing/cnv/cnv-subtype4.txt", sep="\t",quote = F )


cnv1$amp <- apply(cnv1[,1:2007],1,function(x) length(which(x==2))/length(x))
cnv1$gain <- apply(cnv1[,1:2007],1,function(x) length(which(x==1))/length(x))
cnv1$loss <- apply(cnv1[,1:2007],1,function(x) length(which(x==-1))/length(x))
cnv1$del <- apply(cnv1[,1:2007],1,function(x) length(which(x==-2))/length(x))
cnv1fre <- cnv1[,2008:2011]
write.table(cnv1fre, "/pub6/wenjing/cnv/cnv-subtype4-frequency.txt", sep="\t",quote = F )

genelocation <- read.table("/pub6/wenjing/cnv/genelocation (1)", sep = "\t", header = F, stringsAsFactors = F)
location <- genelocation[,-c(5,6)]
convert <- read.table("/pub6/wenjing/cnv/mart_export.txt", sep = "\t", header = T, stringsAsFactors = F)
location$ensg <- convert[match(substr(location$V4,1,15),convert[,3]),1]

#rownames(cnv1) <- unlist(strsplit(rownames(cnv1)[1:10],split = "|",fixed = T))[1]
#rownames(cnv1) <- apply(rownames(cnv1),1,function(x) unlist(strsplit(x,split = "|",fixed = T))[1])

cnv1$gene <- gsub("\\|.*","",rownames(cnv1))
cnv1$ensg <- gsub(".*\\|","",rownames(cnv1))

#cnv1$ensg <- location[match(cnv1$gene,location$V7),6]
cnv1$ensg[-which((nchar(cnv1$ensg)>15)==TRUE)] <- location[match(cnv1$ensg[-which((nchar(cnv1$ensg)>15)==TRUE)],location$V7),6]
cnv1$ensg <- substr(cnv1$ensg,1,15)
cnv1 <- na.omit(cnv1)
cnv1$enst <- location[match(cnv1$ensg,location$ensg),4]
cnv1$chr <- location[match(cnv1$ensg,location$ensg),1]
cnv1$start <- location[match(cnv1$ensg,location$ensg),2]
cnv1$end <- location[match(cnv1$ensg,location$ensg),3]

write.table(cnv1, "/pub6/wenjing/cnv/subtype1-cnvall.txt", sep="\t",quote = F )

cnv1 <- read.table("E:/pathway/CNV/subtype1-cnvall.txt", sep = "\t", header = T,row.names = 1,stringsAsFactors = F)

cnv1$loss <- 0-cnv1$loss
cnv1$del <- 0-cnv1$del
cnv1$chr[which(cnv1$chr=="chrX")] <- "chr23"
cnv1$chr <- as.numeric(gsub("chr","",cnv1$chr))

#cnv1$position <- as.numeric(paste(cnv1$chr,cnv1$start,sep = "."))

cnv2 <- cnv1[order(cnv1$chr,cnv1$start),]#按chr从小到大，如果chr一样，则按start从小到大
cnv2$position <- 1:dim(cnv2)[1]


a <- as.data.frame(table(cnv2$chr))$Freq
b <- c()
for (i in 1:23) {
  b[i] <- sum(a[1:i])
}

ggplot() + 
  geom_area(data = cnv2,aes(x = position,y = amp+gain),color = "#a92226",fill = "#a92226")+
  geom_area(data = cnv2,aes(x = position,y = gain),color = "#ce9c9d",fill = "#ce9c9d")+
  geom_area(data = cnv2,aes(x = position,y = loss+del),color = "#3c3e8f",fill = "#3c3e8f")+
  geom_area(data = cnv2,aes(x = position,y = loss),color = "#a7acca",fill = "#a7acca")+
  geom_vline(xintercept = b,linetype ="dotted")+
  ylim(-1,1)
ggsave("E:/图/4a-cnv-subtype1.pdf",width = 10,height = 4)

for (i in 1:4) {
  cnv1 <- read.table(paste0("E:/pathway/CNV/subtype",i,"-cnvall.txt"), sep = "\t", header = T,row.names = 1,stringsAsFactors = F)

  cnv1$loss <- 0-cnv1$loss
  cnv1$del <- 0-cnv1$del
  cnv1$chr[which(cnv1$chr=="chrX")] <- "chr23"
  cnv1$chr <- as.numeric(gsub("chr","",cnv1$chr))

  #cnv1$position <- as.numeric(paste(cnv1$chr,cnv1$start,sep = "."))

  cnv2 <- cnv1[order(cnv1$chr,cnv1$start),]#按chr从小到大，如果chr一样，则按start从小到大
  cnv2$position <- 1:dim(cnv2)[1]


  ggplot() + 
    geom_area(data = cnv2,aes(x = position,y = amp+gain),color = "#a92226",fill = "#a92226")+
    geom_area(data = cnv2,aes(x = position,y = gain),color = "#ce9c9d",fill = "#ce9c9d")+
    geom_area(data = cnv2,aes(x = position,y = loss+del),color = "#3c3e8f",fill = "#3c3e8f")+
    geom_area(data = cnv2,aes(x = position,y = loss),color = "#a7acca",fill = "#a7acca")+
    geom_vline(xintercept = b,linetype ="dotted")+
    theme(axis.text.x = element_blank(),    ###主题
          axis.text.y = element_text(size = 10),
          axis.line = element_line(),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())+
    ylim(-1,1)
  ggsave(paste0("E:/图/4a-cnv-subtype",i,".pdf"),width = 10,height = 3)

}

###########Fisher 精确检验##########

p1_2 <- data.frame()

for(i in 1:dim(cnv1)[1]){
p1_2[i,1] <- fisher.test(rbind(cnv3b[i,1:2],cnv4b[i,1:2]))$p.value
p1_2[i,2] <- fisher.test(rbind(cnv3b[i,3:4],cnv4b[i,3:4]))$p.value
}
rownames(p1_2) <- rownames(cnv1b)
p1_2 <- cbind(p1_2,cnv1b[,5:10])

write.table(p1_2, "/pub6/wenjing/cnv/3-4-FDR.txt", sep="\t",quote = F )



p1_2 <- read.table("E:/pathway/CNV/1-3-FDR.txt", sep = "\t", header = T,row.names = 1,stringsAsFactors = F)
p1_2$fdrgain <- p.adjust(p1_2$V1, method = "fdr", n = length(p1_2$V1))
p1_2$fdrloss <- p.adjust(p1_2$V2, method = "fdr", n = length(p1_2$V2))

p1_2$fdrgain2 <- -log(p1_2$fdrgain,10)
p1_2$fdrloss2 <- log(p1_2$fdrloss,10)

p1_2$chr[which(p1_2$chr=="chrX")] <- "chr23"
p1_2$chr <- as.numeric(gsub("chr","",p1_2$chr))
p1_2 <- p1_2[order(p1_2$chr,p1_2$start),]#按chr从小到大，如果chr一样，则按start从小到大
p1_2$position <- 1:dim(p1_2)[1]


ggplot() + 
  geom_area(data = p1_2 ,aes(x = position,y = fdrgain2),color = "#ce9d4e",fill = "#ce9d4e")+
  geom_area(data = p1_2 ,aes(x = position,y = fdrloss2),color = "#add179",fill = "#add179")+
  geom_vline(xintercept = b,linetype ="dotted")+
  theme(axis.text.x = element_blank(),    ###主题
        axis.text.y = element_text(size = 10),
        axis.line = element_line(),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())+
  ylim(-5,5)
ggsave("E:/图/1-3-cnv.pdf",width = 10,height = 3)
library(clusterProfiler)
library(org.Hs.eg.db)
library(DOSE)
library(enrichplot)
library(dplyr)
ego <- enrichGO(gene=genes,OrgDb = org.Hs.eg.db,keyType = "SYMBOL",ont = "BP",pvalueCutoff=0.05)  ##输入基因SYMBOL
ego <- simplify(ego,cutoff=0.3,by="p.adjust",select_fun=min)  ##去冗余
head(ego@result)
p<-emapplot(  ##通路间共同基因
  pairwise_termsim(ego),
  color = "p.adjust",  #颜色
  layout = "nicely",
  node_scale = NULL,
  line_scale = NULL,
  min_edge = 0.2,
  node_label_size = NULL,
  cex_label_category = 1,
  cex_category = NULL,
  cex_line = 0.5  #边的粗细
)


f<-c("ENSG00000272666","ENSG00000152766","ENSG00000041353","ENSG00000173239",
     "ENSG00000211966","ENSG00000211679","ENSG00000211895","ENSG00000254709",
     "ENSG00000239951")   ##9基因的ENSEMBL编号
EG2Ensembl=toTable(org.Hs.egENSEMBL)
geneLists=data.frame(ensembl_id=f)
results=merge(geneLists,EG2Ensembl,by='ensembl_id',all.x=T)  #KEGG需输入geneID
id=na.omit(results$gene_id)



ekk <- enrichKEGG(gene= id,organism  = 'hsa', qvalueCutoff = 0.05)
ekk@result


#######miRNA分析#######
###差异分析###
library(limma)
x<-read.csv("miRNA表达.csv",header=T)
row.names(x)<-x[,1]
x<-x[,-1]
KEGG_ES<-x
y<-read.table("k=4.txt",header = T)
y[y[,2]==3|y[,2]==4,2]<-2
group<-factor(y$cluster)
design <- model.matrix(~0+group)
cont.wt <- makeContrasts("group1-group2",
                         levels=design) 
fit = lmFit(KEGG_ES, design)
fit2 <- contrasts.fit(fit, cont.wt)
fit2 = eBayes(fit2)
tT=topTable(fit2, adjust="fdr",sort.by="logFC",n=Inf)
tT = subset(tT, select=c("adj.P.Val","P.Value","logFC"))
colnames(tT)=c("FDR","P.Value","logFC")
DEG<-tT[tT$P.Value<=0.01,]
write.csv(DEG,file = "DEG.csv")

###热图###
library('pheatmap')
x<-read.csv("miRNA表达.csv",header=T)
row.names(x)<-x[,1]
x<-x[,-1]
x<-log2(x)
x[x==-Inf]<-0
y<-read.table("k=4.txt",header = T)
row.names(y)<-y[,1]
annotation_col<-as.matrix(y)
annotation_col<-annotation_col[,-1]
annotation_col<-data.frame(annotation_col)
names(annotation_col)<-c("subtype")
pheatmap(x,show_colnames=F,cluster_col = FALSE,annotation_col = annotation_col,
)

###箱式图###
library("ggpubr")
x<-read.csv("miRNA箱式图.csv",header=T)
ggplot(x,aes(miRNA,FC,fill=as.factor(cluster),color=as.factor(cluster)))+
  geom_boxplot(outlier.colour = NA,alpha=0.8)+scale_y_continuous(limits=c(0,5.5))+
  scale_fill_discrete(name="subtype")+
  scale_x_discrete(name = "")+
  theme(panel.background = element_blank(),axis.line = element_line(),
        panel.border=element_rect(linetype="solid",fill=NA),
        legend.position="top")+
  stat_boxplot(geom = "errorbar")+
  geom_vline(xintercept=c(1.5,2.5,3.5,4.5,5.5), linetype=5)+
  guides(color="none")

###相关散点图###
library("ggpubr")
x<-read.csv("miRNA散点图.csv",header=T)
ggplot(data=x, aes(x=hsa.mir.4772, y=hsa.mir.200a))+geom_point(color="blue")+
  stat_smooth(method="lm",se=FALSE,color="red")+
  stat_cor(method = "pearson",label.x = 2,label.y =1.7 )

###单多cox分析###
library(survival)
library(survminer)
x<-read.csv("miRNA生存.csv",header=T)
res.cox<-coxph(Surv(OS.time, OS)~ hsa.mir.141, data = x)
res.cox<-coxph(Surv(OS.time, OS)~ hsa.mir.141+hsa.mir.200a+hsa.mir.4772+hsa.mir.203b
               +hsa.mir.214+hsa.mir.200b, data = x)
summary(res.cox)
risk<-predict(res.cox,type="risk")
gap<-median(risk)
risk[risk>gap]<-c('high')
risk[risk<=gap]<-c('low')
x$group<-risk
sfit <- survfit(Surv(OS.time, OS)~group, data=x)
ggsurvplot(sfit,data=x,pval = T,sur.median.line = "hv",xlab = "Time(days)",legend.title = "",
           legend = c(0.8,0.75),
           legend.labs = c("risk=high","risk=low")
           )

###计算HR值###
library(tableone)
library(forestplot)
library(stringr)
#一-2 multi1：提取：变量+HR+95%CI+95%CI
mul_cox1 <- summary(res.cox)
colnames(mul_cox1$conf.int)
multi1<-as.data.frame(round(mul_cox1$conf.int[, c(1, 3, 4)], 2))
#一-3、multi2：提取：HR(95%CI)和P
multi2<-ShowRegTable(res.cox, 
                     exp=TRUE, 
                     digits=2, 
                     pDigits =3,
                     printToggle = TRUE, 
                     quote=FALSE, 
                     ciFun=confint)
#一-4.将两次提取结果合并成表；取名result
result <-cbind(multi1,multi2);result
#一-5.行名转为表格第一列，并给予命名"Characteristics"
result<-tibble::rownames_to_column(result, var = "Characteristics");result
result<-rbind(c("Characteristics", NA, NA, NA, "HR(95%CI)","p"),
                             result)
for(i in 2:4) {result[, i] = as.numeric(result[, i])}
fig1<- forestplot(result[,c(1,5,6)], #告诉函数，合成的表格result的第1，5，6列还是显示数字
                  mean=result[,2],   #告诉函数，表格第2列为HR，它要变成森林图的小方块
                  lower=result[,3],  #告诉函数表格第3列为5%CI，
                  upper=result[,4],  #表格第5列为95%CI，它俩要化作线段，穿过方块
                  zero=1,            #告诉函数，零线或参考线为HR=1即x轴的垂直线
                  boxsize=0.3,       #设置小黑块的大小
                  graph.pos=2,       #森林图应插在图形第2列
                  lineheight = unit(20,'mm'),#设置图形中的行距
                  colgap = unit(1,'mm'),#设置图形中的列间距
                  lwd.zero = 2,#设置参考线的粗细
                  lwd.ci = 2,#设置区间估计线的粗细
                  col=fpColors(box='#458B00',summary="#8B008B",lines = 'black',zero = '#7AC5CD'),
                  #使用fpColors()函数定义图形元素的颜色，从左至右分别对应点估计方形，汇总值，区间估计线，参考线
                  xlab="The estimates",#设置x轴标签
                  lwd.xaxis=2,#设置X轴线的粗细
                  lty.ci = "solid",)
fig1

###桑基图###
library(networkD3)
a = read.table('桑基图.csv', header=TRUE, sep=',')# 根据文件路径读取所需的数据 

# 导入数据的起点终点是factor类型，需要将其转为chr，否则之后unique的是因子水平，不能进行合并。
names(a)[1]<-c("s")
names(a)[2]<-c("t")
names(a)[3]<-c("v")

a$s = as.character(a$s)    
a$t = as.character(a$t)  

Sankeylinks<-a  #取边的数据
Sankeynodes<-data.frame(name=unique(c(Sankeylinks$s,Sankeylinks$t)))   #取点的数据，用unique去重，转化为数据框格式，并将列名设置为“name”
Sankeynodes$index<-0:(nrow(Sankeynodes) - 1)  #增加设置1列index，方便后面合并，取值为0到总行数-1
Sankeylinks<-merge(Sankeylinks,Sankeynodes,by.x="s",by.y="name")  #将边数据与点数据合并，来源点即s为第4列
Sankeylinks<-merge(Sankeylinks,Sankeynodes,by.x="t",by.y="name")  #将边数据与点数据合并，目标点即t为第5列

Sankeydata<-Sankeylinks[,c(4,5,3)];  #取第4、5、3列数据，及来源、目标、边的值或权重
names(Sankeydata)<-c("Source","Target","Value")  #将三列数据分别命名
Sankeyname<-Sankeynodes[,1,drop=FALSE]  #取点的名称，即第一列

sankeyNetwork(Links=Sankeydata,Nodes=Sankeyname, Source ="Source",  
              Target = "Target", Value = "Value", NodeID = "name",  
              fontSize = 12, nodeWidth = 30)  
#Links为边，Nodes为点, Source指定来源点,Target指定目标点, Value指定每条边的值, NodeID指定点的id(可以与点名称一样), 
#fontSize指定字体大小, nodeWidth指定边的宽度

###富集网络图###
library(clusterProfiler)
library(enrichplot)
library(DOSE)
library(org.Hs.eg.db)
x<- read.csv("通路对应靶基因.csv",header = T)
z<-unique(x[3])
names(z)[1]<-c("symbol")
g2s<-toTable(org.Hs.egSYMBOL)
g2e<-toTable(org.Hs.egENSEMBL)
b<-merge(z,g2s,by='symbol',all.x=T)
d<-merge(b,g2e,by='gene_id',all.x=T)
edo <- enrichKEGG(gene=d[,1])
x2 <- pairwise_termsim(edo)
emapplot(x2)

###随机森林分类器###
library(randomForest)
library(caret)
library(pROC)
library(rpart)
data <- read.csv("miRNA随机森林141+200a+200b.csv",header = T)
trainlist <- createDataPartition(data$cluster,p=0.7,list = F)
train<-data[trainlist,]
test <- data[-trainlist,]
set.seed(17)
err<-as.numeric()
for(i in 1:(length(names(train)))-1){
  mtry_test <- randomForest(as.factor(cluster) ~ ., data = train,importance=T,na.action = na.pass, mtry=i)
  err<- append( err, mean( mtry_test$err.rate ) )
}
print(err)
mtry<-which.min(err)
ntree_fit<-randomForest(as.factor(cluster)~., data=train,importance=T,na.action = na.pass, mtry=mtry, ntree=1000)
ntree_fit
plot(ntree_fit)

##二分类问题
#importance
importance(ntree_fit)
varImpPlot(ntree_fit,main = "varImpPlot")
varImpPlot(ntree_fit,main = "varImpPlot",type = 1)
varImpPlot(ntree_fit,main = "varImpPlot",type = 2)
#偏相关图
partialPlot(x=ntree_fit,pred.data = train,x.var =OS,which.class = "1",ylab = "1" )
prop.table(table(train$OS,train$cluster),margin=1)


#训练集预测概率
trainpredprob<-predict(ntree_fit,newdata = train,type = "prob")
#训练集ROC
trainroc<-roc(response=train$cluster,#实际类别
              predictor=trainpredprob[,2])#预测概率
#训练集ROC曲线
plot(trainroc,print.auc=T,auc.polygon=TRUE,grid=T,max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,
     legacy.axes=T,bty="l")
#约登法则
bestp<-trainroc$thresholds[which.max(trainroc$sensitivities+trainroc$specificities)-1]
bestp
#训练集预测分类
trainpredlab<-as.factor(ifelse(trainpredprob[,2]>bestp,"1","0"))
#训练集混淆矩阵
confusionMatrix(data = trainpredlab,#预测类别
                reference = as.factor(train$cluster),#实际类别
                positive = "1",mode = "everything")
#测试集预测概率
testpredprob<-predict(ntree_fit,newdata = test,type = "prob")
#测试集预测分类
testpredlab<-as.factor(ifelse(testpredprob[,2]>bestp,"1","0"))
#测试集混淆矩阵
confusionMatrix(data = testpredlab,#预测类别
                reference = as.factor(test$cluster),#实际类别
                positive = "1",mode = "everything")
#测试集ROC
testroc<-roc(response=test$cluster,#实际类别
              predictor=testpredprob[,2])#预测概率
#训练集ROC曲线
plot(trainroc, print.auc=TRUE, auc.polygon=TRUE, max.auc.polygon=F,
     auc.polygon.col="white", print.thres=TRUE)
#测试集ROC曲线
plot(testroc, print.auc=TRUE, auc.polygon=TRUE, max.auc.polygon=F,
     auc.polygon.col="white", print.thres=TRUE)

###测试集生存###
x<- read.csv("分类生存.csv",header = T)
sfit <- survfit(Surv(OS.time, OS)~predict, data=x)
ggsurvplot(sfit,data=x,pval = T,sur.median.line = "hv",xlab = "Time(days)",legend.title = "",
           legend = c(0.8,0.75),
           legend.labs = c("predict=0","predict=1")
           )

###基因相关性计算###
x<- read.csv("gene FC.csv",header = T)
y<- read.csv("gene网络.csv",header = T)
names(y)[1]<-c('symbol')
names(y)[2]<-c('symbol')
g1=dplyr::inner_join(y[1],x,by="symbol")
g2=dplyr::inner_join(y[2],x,by="symbol")

cor<-c()
p<-c()
for (i in 1:length(y[,1])) {
  z<-cor.test(t(g1[i,2:length(g1[1,])]),t(g2[i,2:length(g2[1,])]))
  cor<-c(cor,z$estimate)
  p<-c(p,z$p.value)
}
pearson<-cbind(cor,p)
write.csv(pearson,file = "pearson.csv")



